
// ================================================================================================
// -*- C++ -*-
// File: debug_draw.hpp
// Author: Guilherme R. Lampert
// Created on: 10/12/15
// Brief: Debug Draw - an immediate-mode, renderer agnostic, lightweight debug drawing API.
// ================================================================================================

#ifndef DEBUG_DRAW_HPP
#define DEBUG_DRAW_HPP

// ========================================================
// Library Overview:
// ========================================================
//
// ---------
//  LICENSE
// ---------
// This software is in the public domain. Where that dedication is not recognized,
// you are granted a perpetual, irrevocable license to copy, distribute, and modify
// this file as you see fit.
//
// The source code is provided "as is", without warranty of any kind, express or implied.
// No attribution is required, but a mention about the author(s) is appreciated.
//
// -------------
//  QUICK SETUP
// -------------
// In *one* C++ source file, *before* including this file, do this:
//
//   #define DEBUG_DRAW_IMPLEMENTATION
//
// To enable the implementation. Further includes of this
// file *should not* redefine DEBUG_DRAW_IMPLEMENTATION.
// Example:
//
// In my_program.cpp:
//
//   #define DEBUG_DRAW_IMPLEMENTATION
//   #include "debug_draw.hpp"
//
// In my_program.hpp:
//
//   #include "debug_draw.hpp"
//
// -------------------
//  COMPILER SWITCHES
// -------------------
// Several compiler switches are provided for library customization. Check the
// following section for a detailed description of each. The noteworthy ones are:
//
// DEBUG_DRAW_CXX11_SUPPORTED
//  Enables the use of some C++11 features. If your compiler supports C++11
//  or better, you should define this switch globally or before every inclusion
//  of this file. If it is not defined, we try to guess it from the value of the
//  '__cplusplus' built-in macro constant.
//
// DEBUG_DRAW_MAX_XYZ
//  Sizes of internal intermediate buffers, which are statically allocated
//  in the implementation. If you need to draw more primitives than the sizes
//  of these buffers, you need to redefine them and recompile.
//
// DEBUG_DRAW_VERTEX_BUFFER_SIZE
//  Size in dd::DrawVertex elements of the intermediate vertex buffer used
//  to batch primitives before sending them to dd::RenderInterface. A bigger
//  buffer will reduce the number of calls to dd::RenderInterface when drawing
//  large sets of debug primitives.
//
// DEBUG_DRAW_OVERFLOWED(message)
//  An error handler called if the DEBUG_DRAW_MAX_XYZ sizes overflow.
//  By default it just prints a message to stderr.
//
// DEBUG_DRAW_USE_STD_MATH
//  If defined to nonzero, use cmath/math.h. If you redefine it to zero before
//  the DD implementation, it will force the use of local replacements
//  for the library. This might be useful if you want to avoid the dependency.
//  It is defined to zero by default (i.e. we use cmath by default).
//
// DEBUG_DRAW_XYZ_TYPE_DEFINED
//  The compound types used by the DD library can also be customized.
//  By default, ddVec3 and ddMat4x4 are plain C-arrays, but you can
//  redefine them to use your own classes or structures (see below).
//  ddStr is by default a std::string, but you can redefine it to
//  a custom string type if necessary. The only requirement is that
//  it provides a 'c_str()' method returning a null terminated const char* string.
//
// DEBUG_DRAW_STR_DEALLOC_FUNC(str)
//  If you define a custom string type for ddStr and it requires some
//  extra cleanup, you might define this function macro to perform the cleanup.
//  It is called by dd::clear() and dd::shutdown() on every instance of the
//  internal DebugString buffer.
//
// -------------------
//  MEMORY ALLOCATION
// -------------------
// Debug Draw will only perform one memory allocation during startup to decompress
// the built-in glyph bitmap used for debug text rendering. All the vertex buffers
// and intermediate draw/batch buffers used internally are declared as static
// C-style arrays with fixed size.
//
// Memory allocation & deallocation for the glyph bitmap decompression will be done via:
//
//   DD_MALLOC(size)
//   DD_MFREE(ptr)
//
// These two macros can be redefined if you'd like to supply you own memory allocator.
// By default, they are defined to use std::malloc and std::free, respectively.
// Note: If you redefine one, you must also provide the other!
//
// --------------------------------
//  INTERFACING WITH YOUR RENDERER
// --------------------------------
// Debug Draw doesn't touch on any renderer-specific aspects or APIs, instead you provide
// DD with all of it's rendering needs via the dd::RenderInterface abstract class.
//
// See the definition of dd::RenderInterface for the details. Not all methods are
// required. In fact, you could also implement a full no-op RenderInterface that
// disables debug drawing by simply inheriting from RenderInterface and not overriding
// any of the methods (or even easier, call dd::initialize(nullptr) to make everything a no-op).
//
// For examples on how to implement your own RenderInterface, see the accompanying samples.
// You can also find them in the source code repository for this project:
// https://github.com/glampert/debug-draw
//
// ------------------
//  CONVENTIONS USED
// ------------------
// Points and lines are always specified in world-space positions. This also
// applies to shapes drawn from lines, like boxes, spheres, cones, etc.
//
// 2D screen-text is in screen-space pixels (from 0,0 in the upper-left
// corner of the screen to screen_width-1 and screen_height-1).
// RenderInterface::drawGlyphList() also receives vertexes in screen-space.
//
// We make some usage of matrices for things like the projected text labels.
// Matrix layout used is column-major and vectors multiply as columns.
// This is the convention normally used by standard OpenGL.
//
// C++ Exceptions are not used. Little error checking is provided or
// done inside the library. We favor simpler, faster and easier to maintain
// code over more sophisticated error handling. The rationale is that a
// debug drawing API doesn't have to be very robust, since it won't make
// into the final release executable in most cases.
//
// END OF DOCUMENTATION

// ========================================================
// Compiler switches:
// ========================================================

//
// If the user didn't specify if C++11 or above are supported, try to guess
// from the value of '__cplusplus'. It should be 199711L for pre-C++11 compilers
// and 201103L in those supporting C++11, but this is not a guarantee that all
// C++11 features will be available and stable, so again, we are making a guess.
// It is recommended to instead supply the DEBUG_DRAW_CXX11_SUPPORTED switch
// yourself before including this file.
//
#ifndef DEBUG_DRAW_CXX11_SUPPORTED
    #if (__cplusplus > 199711L)
        #define DEBUG_DRAW_CXX11_SUPPORTED 1
    #endif // __cplusplus
#endif // DEBUG_DRAW_CXX11_SUPPORTED

//
// Max elements of each type at any given time.
// We supply these reasonable defaults, but you can provide your
// own tunned values to save memory or fit all of your debug data.
// These are hard constraints. If not enough, change and recompile.
//
#ifndef DEBUG_DRAW_MAX_STRINGS
    #define DEBUG_DRAW_MAX_STRINGS 512
#endif // DEBUG_DRAW_MAX_STRINGS

#ifndef DEBUG_DRAW_MAX_POINTS
    #define DEBUG_DRAW_MAX_POINTS 8192
#endif // DEBUG_DRAW_MAX_POINTS

#ifndef DEBUG_DRAW_MAX_LINES
    #define DEBUG_DRAW_MAX_LINES 32768
#endif // DEBUG_DRAW_MAX_LINES

//
// Size in vertexes of a local buffer we use to sort elements
// drawn with and without depth testing before submitting them to
// the RenderInterface. A larger buffer will require less flushes
// (e.g. RenderInterface calls) when drawing large amounts of
// primitives. Less will obviously save more memory. Each DrawVertex
// is about 32 bytes in size, we declare a local static array with
// this many entries.
//
#ifndef DEBUG_DRAW_VERTEX_BUFFER_SIZE
    #define DEBUG_DRAW_VERTEX_BUFFER_SIZE 4096
#endif // DEBUG_DRAW_VERTEX_BUFFER_SIZE

//
// This macro is called with an error message if any of the above
// sizes is overflowed during runtime. In a debug build, you might
// keep this enabled to be able to log and find out if more space
// is needed for the debug data arrays. Default output is stderr.
//
#ifndef DEBUG_DRAW_OVERFLOWED
    #include <iostream>
    #define DEBUG_DRAW_OVERFLOWED(message) std::cerr << message << "\n"
#endif // DEBUG_DRAW_OVERFLOWED

//
// Use <math.h> and <float.h> for trigonometry functions by default.
// If you wish to avoid those dependencies, DD provides local approximations
// of the required functions as a portable replacement. Just define
// DEBUG_DRAW_USE_STD_MATH to zero before including this file.
//
#ifndef DEBUG_DRAW_USE_STD_MATH
    #define DEBUG_DRAW_USE_STD_MATH 1
#endif // DEBUG_DRAW_USE_STD_MATH

// ========================================================
// Overridable Debug Draw types:
// ========================================================

//
// Following typedefs are not members of the dd:: namespace to allow easy redefinition by the user.
// If you provide a custom implementation for them before including this file, be sure to
// also define the proper DEBUG_DRAW_XYZ_TYPE_DEFINED switch to disable the default typedefs.
//
// The only requirement placed on the vector/matrix types is that they provide
// an array subscript operator [] and have the expected number of elements. Apart
// from that, they could be structs, classes, what-have-you. POD types are recommended
// but not mandatory.
//

#ifndef DEBUG_DRAW_VEC3_TYPE_DEFINED
    // ddVec3:
    //  A small array of floats with at least three elements, but
    //  it could have more for alignment purposes, extra slots are ignored.
    //  A custom ddVec3 type must provide the array subscript operator.
    typedef float ddVec3[3];

    // ddVec3Param:
    //  Since our default ddVec3 is a plain C-array, it decays to a pointer
    //  when passed as an input parameter to a function, so we can use it directly.
    //  If you change it to some structured type, it might be more efficient
    //  passing by const reference instead, however, some platforms have optimized
    //  hardware registers for vec3s/vec4s, so passing by value might also be efficient.
    typedef const ddVec3 ddVec3Param;

    #define DEBUG_DRAW_VEC3_TYPE_DEFINED 1
#endif // DEBUG_DRAW_VEC3_TYPE_DEFINED

#ifndef DEBUG_DRAW_MAT4X4_TYPE_DEFINED
    // ddMat4x4:
    //  Homogeneous matrix of 16 floats, representing rotations as well as
    //  translation/scaling and projections. The internal matrix layout used by this
    //  library is COLUMN-MAJOR, vectors multiplying as columns (usual OpenGL convention).
    //  Column-major matrix layout:
    //          c.0   c.1   c.2    c.3
    //    r.0 | 0.x   4.x   8.x    12.x |
    //    r.1 | 1.y   5.y   9.y    13.y |
    //    r.2 | 2.z   6.z   10.z   14.z |
    //    r.3 | 3.w   7.w   11.w   15.w |
    //  If your custom matrix type uses row-major format internally, you'll
    //  have to transpose them before passing your matrices to the DD functions.
    //  We use the array subscript operator internally, so it must also be provided.
    typedef float ddMat4x4[4 * 4];

    // ddMat4x4Param:
    //  Since our default ddMat4x4 is a plain C-array, it decays to a pointer
    //  when passed as an input parameter to a function, so we can use it directly.
    //  If you change it to some structured type, it might be more efficient
    //  passing by const reference instead.
    typedef const ddMat4x4 ddMat4x4Param;

    #define DEBUG_DRAW_MAT4X4_TYPE_DEFINED 1
#endif // DEBUG_DRAW_MAT4X4_TYPE_DEFINED

#ifndef DEBUG_DRAW_STRING_TYPE_DEFINED
    // ddStr:
    //  String type used internally to store the debug text strings.
    //  A custom string type must provide at least an assignment
    //  operator (=) and a 'c_str()' method that returns a
    //  null-terminated const char* string pointer. That's it.
    //  An array subscript operator [] is not required for ddStr.
    #include <string>
    typedef std::string ddStr;

    // ddStrParam:
    //  If we have C++11, the correct usage for std::string is to
    //  pass by value and move when storing it. Pre-11 usage is
    //  pass by const reference and copy-assign.
    #if DEBUG_DRAW_CXX11_SUPPORTED
        typedef std::string ddStrParam;
    #else // !C++11
        typedef const std::string & ddStrParam;
    #endif // DEBUG_DRAW_CXX11_SUPPORTED

    #define DEBUG_DRAW_STRING_TYPE_DEFINED 1
#endif // DEBUG_DRAW_STRING_TYPE_DEFINED

#ifndef DEBUG_DRAW_INT_TYPES_DEFINED
    // ddI64:
    //  64-bits integer type used to keep track of times in milliseconds.
    //  If your platform is missing cstdint/stdint.h you can redefine it
    //  to some platform-specific equivalent. If not compiling C++11, we
    //  assume cstdint is missing and try a MSVC extension or the 'long long' type.
    //
    // ddU32:
    //  32-bits unsigned integer. Used internally for int=>float casts
    //  (mainly only if using the local fast-math approximations).
    //  Make sure it is not smaller than sizeof(float).
    #if DEBUG_DRAW_CXX11_SUPPORTED
        #include <cstdint>
        typedef std::int64_t  ddI64;
        typedef std::uint32_t ddU32;
    #else // !C++11
        #ifdef _MSC_VER
            typedef          __int64 ddI64;
            typedef unsigned __int32 ddU32;
        #else // !_MSC_VER
            typedef    long long ddI64;
            typedef unsigned int ddU32;
        #endif // _MSC_VER
    #endif // DEBUG_DRAW_CXX11_SUPPORTED

    #define DEBUG_DRAW_INT_TYPES_DEFINED 1
#endif // DEBUG_DRAW_INT_TYPES_DEFINED

namespace dd
{

// ========================================================
// Debug Draw functions:
// Durations are always in milliseconds.
// Colors are RGB floats in the [0,1] range.
// Positions are in world-space, unless stated otherwise.
// ========================================================

// Add a point in 3D space to the debug draw queue.
// Point is expressed in world-space coordinates.
// Note that not all renderer support configurable point
// size, so take the 'size' parameter as a hint only
void point(ddVec3Param pos,
           ddVec3Param color,
           float size = 1.0f,
           int durationMillis = 0,
           bool depthEnabled = true);

// Add a 3D line to the debug draw queue. Note that
// lines are expressed in world coordinates, and so are
// all wireframe primitives which are built from lines.
void line(ddVec3Param from,
          ddVec3Param to,
          ddVec3Param color,
          int durationMillis = 0,
          bool depthEnabled = true);

// Add a 2D text string as an overlay to the current view, using a built-in font.
// Position is in screen-space pixels, origin at the top-left corner of the screen.
// The third element (Z) of the position vector is ignored.
// Note: Newlines and tabs are handled (1 tab = 4 spaces).
void screenText(ddStrParam str,
                ddVec3Param pos,
                ddVec3Param color,
                float scaling = 1.0f,
                int durationMillis = 0);

// Add a 3D text label centered at the given world position that
// gets projected to screen-space. The label always faces the viewer.
// sx/sy, sw/sh are the viewport coordinates/size, in pixels.
// 'vpMatrix' is the view * projection transform to map the text from 3D to 2D.
void projectedText(ddStrParam str,
                   ddVec3Param pos,
                   ddVec3Param color,
                   ddMat4x4Param vpMatrix,
                   int sx, int sy,
                   int sw, int sh,
                   float scaling = 1.0f,
                   int durationMillis = 0);

// Add a set of three coordinate axis depicting the position and orientation of the given transform.
// 'size' defines the size of the arrow heads. 'length' defines the length of the arrow's base line.
void axisTriad(ddMat4x4Param transform,
               float size, float length,
               int durationMillis = 0,
               bool depthEnabled = true);

// Add a 3D line with an arrow-like end to the debug draw queue.
// 'size' defines the arrow head size. 'from' and 'to' the length of the arrow's base line.
void arrow(ddVec3Param from,
           ddVec3Param to,
           ddVec3Param color,
           float size,
           int durationMillis = 0,
           bool depthEnabled = true);

// Add an axis-aligned cross (3 lines converging at a point) to the debug draw queue.
// 'length' defines the length of the crossing lines.
// 'center' is the world-space point where the lines meet.
void cross(ddVec3Param center,
           float length,
           int durationMillis = 0,
           bool depthEnabled = true);

// Add a wireframe circle to the debug draw queue.
void circle(ddVec3Param center,
            ddVec3Param planeNormal,
            ddVec3Param color,
            float radius,
            float numSteps,
            int durationMillis = 0,
            bool depthEnabled = true);

// Add a wireframe plane in 3D space to the debug draw queue.
// If 'normalVecScale' is not zero, a line depicting the plane normal is also draw.
void plane(ddVec3Param center,
           ddVec3Param planeNormal,
           ddVec3Param planeColor,
           ddVec3Param normalVecColor,
           float planeScale,
           float normalVecScale,
           int durationMillis = 0,
           bool depthEnabled = true);

// Add a wireframe sphere to the debug draw queue.
void sphere(ddVec3Param center,
            ddVec3Param color,
            float radius,
            int durationMillis = 0,
            bool depthEnabled = true);

// Add a wireframe cone to the debug draw queue.
// The cone 'apex' is the point where all lines meet.
// The length of the 'dir' vector determines the thickness.
// 'baseRadius' & 'apexRadius' are in degrees.
void cone(ddVec3Param apex,
          ddVec3Param dir,
          ddVec3Param color,
          float baseRadius,
          float apexRadius,
          int durationMillis = 0,
          bool depthEnabled = true);

// Wireframe box from the eight points that define it.
void box(const ddVec3 points[8],
         ddVec3Param color,
         int durationMillis = 0,
         bool depthEnabled = true);

// Add a wireframe box to the debug draw queue.
void box(ddVec3Param center,
         ddVec3Param color,
         float width,
         float height,
         float depth,
         int durationMillis = 0,
         bool depthEnabled = true);

// Add a wireframe Axis Aligned Bounding Box (AABB) to the debug draw queue.
void aabb(ddVec3Param mins,
          ddVec3Param maxs,
          ddVec3Param color,
          int durationMillis = 0,
          bool depthEnabled = true);

// Add a wireframe frustum pyramid to the debug draw queue.
// 'invClipMatrix' is the inverse of the matrix defining the frustum
// (AKA clip) volume, which normally consists of the projection * view matrix.
// E.g.: inverse(projMatrix * viewMatrix)
void frustum(ddMat4x4Param invClipMatrix,
             ddVec3Param color,
             int durationMillis = 0,
             bool depthEnabled = true);

// Add a vertex normal for debug visualization.
// The normal vector 'normal' is assumed to be already normalized.
void vertexNormal(ddVec3Param origin,
                  ddVec3Param normal,
                  float length,
                  int durationMillis = 0,
                  bool depthEnabled = true);

// Add a "tangent basis" at a given point in world space.
// Color scheme used is: normal=WHITE, tangent=YELLOW, bi-tangent=MAGENTA.
// The normal vector, tangent and bi-tangent vectors are assumed to be already normalized.
void tangentBasis(ddVec3Param origin,
                  ddVec3Param normal,
                  ddVec3Param tangent,
                  ddVec3Param bitangent,
                  float lengths,
                  int durationMillis = 0,
                  bool depthEnabled = true);

// Makes a 3D square grid of lines along the X and Z planes.
// 'y' defines the height in the Y axis where the grid is placed.
// The grid will go from 'mins' to 'maxs' units in both the X and Z.
// 'step' defines the gap between each line of the grid.
void xzSquareGrid(float mins, float maxs,
                  float y,    float step,
                  ddVec3Param color,
                  int durationMillis = 0,
                  bool depthEnabled = true);

// ========================================================
// Debug Draw vertex type:
// The only drawing type the user has to interface with.
// ========================================================

union DrawVertex
{
    struct
    {
        float x, y, z;
        float r, g, b;
        float size;
    } point;

    struct
    {
        float x, y, z;
        float r, g, b;
    } line;

    struct
    {
        float x, y;
        float u, v;
        float r, g, b;
    } glyph;
};

//
// Opaque handle to a texture object.
// Used by the debug text drawing functions.
//
struct OpaqueTextureType;
typedef OpaqueTextureType * GlyphTextureHandle;

// ========================================================
// Debug Draw rendering callbacks:
// Implementation is provided by the user so we don't
// tie this code directly to a specific rendering API.
// ========================================================

class RenderInterface
{
public:

    //
    // These are called by dd::flush() before any drawing and after drawing is finished.
    // User can override these to perform any common setup for subsequent draws and to
    // cleanup afterwards. By default, no-ops stubs are provided.
    //
    virtual void beginDraw();
    virtual void endDraw();

    //
    // Create/free the glyph bitmap texture used by the debug text drawing functions.
    // The debug renderer currently only creates one of those on startup.
    //
    // You're not required to implement these two if you don't care about debug text drawing.
    // Default no-op stubs are provided by default, which disable debug text rendering.
    //
    // Texture dimensions are in pixels, data format is always 8-bits per pixel (Grayscale/GL_RED).
    // The pixel values range from 255 for a pixel within a glyph to 0 for a transparent pixel.
    // If createGlyphTexture() returns null, the renderer will disable all text drawing functions.
    //
    virtual GlyphTextureHandle createGlyphTexture(int width, int height, const void * pixels);
    virtual void destroyGlyphTexture(GlyphTextureHandle glyphTex);

    //
    // Batch drawing methods for the primitives used by the debug renderer.
    // If you don't wish to support a given primitive type, don't override the method.
    //
    virtual void drawPointList(const DrawVertex * points, int count, bool depthEnabled);
    virtual void drawLineList (const DrawVertex * lines,  int count, bool depthEnabled);
    virtual void drawGlyphList(const DrawVertex * glyphs, int count, GlyphTextureHandle glyphTex);

    // User defined cleanup. Nothing by default.
    virtual ~RenderInterface() = 0;
};

// ========================================================
// Housekeeping functions:
// ========================================================

// Flags for dd::flush()
enum FlushFlags
{
    FlushPoints = 1 << 1,
    FlushLines  = 1 << 2,
    FlushText   = 1 << 3,
    FlushAll    = (FlushPoints | FlushLines | FlushText)
};

// Initialize with the user-supplied renderer interface.
// Given object must remain valid until after dd::shutdown() is called!
// If 'renderer' is null, the Debug Draw functions become no-ops, but
// can still be safely called.
void initialize(RenderInterface * renderer);

// After this is called, it is safe to dispose the RenderInterface instance
// you passed to dd::initialize(). Shutdown will also attempt to free the glyph texture.
void shutdown();

// Test if there's data in the debug draw queue and dd::flush() should be called.
bool hasPendingDraws();

// Actually calls the RenderInterface to consume the debug draw queues.
// Objects that have expired their lifetimes get removed.
// Pass the current application time in milliseconds to remove
// timed objects that have expired. Passing zero removes all
// objects after they get drawn, regardless of lifetime.
void flush(ddI64 currTimeMillis, int flags = FlushAll);

// Manually removes all queued debug render data without drawing.
// This is not normally called. To draw stuff, call dd::flush() instead.
void clear();

} // namespace dd {}

// ================== End of header file ==================
#endif // DEBUG_DRAW_HPP
// ================== End of header file ==================

// ================================================================================================
//
//                                  Debug Draw Implementation
//
// ================================================================================================

#ifdef DEBUG_DRAW_IMPLEMENTATION

//
// Suppresses
//   "declaration requires an exit-time destructor [-Wexit-time-destructors]"
// and
//   "declaration requires a global constructor [-Wglobal-constructors]"
// on Clang/llvm-GCC.
//
// We declare static file-level arrays
// for the debug strings, lines and points, which
// might have constructors/destructors if redefined
// by the library user. Our default DebugString type
// uses std::string, so it has an implicit constructor
// and destructor pair, which also triggers these two
// warnings if they are enabled.
//
#ifdef __clang__
    #pragma clang diagnostic push
    #pragma clang diagnostic ignored "-Wexit-time-destructors"
    #pragma clang diagnostic ignored "-Wglobal-constructors"
#endif // __clang__

// ========================================================
// The DD_* macros are for internal use and get
// #undefined at the end of the implementation.
// ========================================================

//
// C++11 goodies:
//
#if DEBUG_DRAW_CXX11_SUPPORTED
    #include <utility>
    #define DD_MOVE(expr) std::move(expr)
    #define DD_NULL       nullptr
#else // !C++11
    #include <cstddef>
    #define DD_MOVE(expr) expr
    #define DD_NULL       NULL
#endif // DEBUG_DRAW_CXX11_SUPPORTED

//
// These are internal and only required for the glyph bitmap texture setup,
// but the user can still override and provided custom allocators if needed.
//
#ifndef DD_MALLOC
    #include <cstdlib>
    #define DD_MALLOC std::malloc
    #define DD_MFREE  std::free
#endif // DD_MALLOC

//
// Optional math.h replacements if you want to avoid the dependency:
//
#if DEBUG_DRAW_USE_STD_MATH
    #include <math.h>
    #include <float.h>
    #ifdef FLT_EPSILON
        #define DD_EPSILON FLT_EPSILON
    #else // !FLT_EPSILON
        #define DD_EPSILON 1e-14
    #endif // FLT_EPSILON
    #ifdef M_PI
        #define DD_PI M_PI
    #else // !M_PI
        #define DD_PI 3.1415926535897931f
    #endif // M_PI
    // NOTE: Using the *f suffix ones because some platforms might not support
    // double precision (e.g. PS2), where these are the only ones available.
    #define DD_FABS(x)       fabsf(x)
    #define DD_FSIN(radians) sinf(radians)
    #define DD_FCOS(radians) cosf(radians)
    #define DD_INV_FSQRT(x)  (1.0f / sqrtf(x))
#else // !DEBUG_DRAW_USE_STD_MATH
    #define DD_EPSILON       1e-14
    #define DD_PI            3.1415926535897931f
    #define DD_FABS(x)       fastFabs(x)
    #define DD_FSIN(radians) fastSin(radians)
    #define DD_FCOS(radians) fastCos(radians)
    #define DD_INV_FSQRT(x)  fastInvSqrt(x)
#endif // DEBUG_DRAW_USE_STD_MATH

//
// Misc helpers:
//
#define DD_TAU              (DD_PI * 2.0f)
#define DD_DEG2RAD(degrees) (static_cast<float>(degrees) * DD_PI / 180.0f)
#define DD_ARRAY_LEN(arr)   (static_cast<int>(sizeof(arr) / sizeof((arr)[0])))
#define DD_CHECK_INIT       if (g_renderInterface == DD_NULL) { return; }

namespace dd
{

// ========================================================
// Embedded bitmap font for debug text rendering:
// ========================================================

struct FontChar
{
    unsigned short x;
    unsigned short y;
};

struct FontCharSet
{
    enum { MaxChars = 256 };
    const unsigned char * bitmap;
    int bitmapWidth;
    int bitmapHeight;
    int bitmapColorChannels;
    int bitmapDecompressSize;
    int charBaseHeight;
    int charWidth;
    int charHeight;
    int charCount;
    FontChar chars[MaxChars];
};

// These are defined at the end of the file. Data for the arrays
// was generated with font-tool (https://github.com/glampert/font-tool)
// from the Monoid font face (https://github.com/larsenwork/monoid)
extern const int g_fontMonoid18BitmapSizeBytes;
extern const unsigned char g_fontMonoid18Bitmap[];
extern const FontCharSet g_fontMonoid18CharSet;

// If you decide to change the font, these are the only things that
// need to be updated. The fontXYZCharSet variables are never
// referenced directly in the code, these macros are used instead.
#define DD_FONT_BITMAP_SIZE g_fontMonoid18BitmapSizeBytes
#define DD_FONT_BITMAP      g_fontMonoid18Bitmap
#define DD_FONT_CHAR_SET    g_fontMonoid18CharSet

// ========================================================
// Internal Debug Draw queue and helper types/functions:
// ========================================================

namespace
{

struct DebugString
{
    ddI64  expiryDateMillis;
    ddVec3 color;
    float  posX;
    float  posY;
    float  scaling;
    ddStr  text;
    bool   centered;
};

struct DebugPoint
{
    ddI64  expiryDateMillis;
    ddVec3 position;
    ddVec3 color;
    float  size;
    bool   depthEnabled;
};

struct DebugLine
{
    ddI64  expiryDateMillis;
    ddVec3 posFrom;
    ddVec3 posTo;
    ddVec3 color;
    bool   depthEnabled;
};

// Debug strings queue (2D screen-space strings + 3D projected labels):
static int g_debugStringsCount = 0;
static DebugString g_debugStrings[DEBUG_DRAW_MAX_STRINGS];

// 3D debug points queue:
static int g_debugPointsCount = 0;
static DebugPoint g_debugPoints[DEBUG_DRAW_MAX_POINTS];

// 3D debug lines queue:
static int g_debugLinesCount = 0;
static DebugLine g_debugLines[DEBUG_DRAW_MAX_LINES];

// Temporary vertex buffer we use to expand the lines/points before calling on RenderInterface.
static int g_vertexBufferUsed = 0;
static DrawVertex g_vertexBuffer[DEBUG_DRAW_VERTEX_BUFFER_SIZE];

// Latest time value (in milliseconds) from dd::flush().
static ddI64 g_currentTimeMillis = 0;

// Ref to the external renderer. Can be null for a no-op debug draw.
static RenderInterface * g_renderInterface = DD_NULL;

// Our built-in glyph bitmap. If kept null, no text is rendered.
static GlyphTextureHandle g_glyphTex = DD_NULL;

// ========================================================
// Fast approximations of math functions used by DD.
// ========================================================

// We only need these if the user didn't want the math.h dependency.
#if !DEBUG_DRAW_USE_STD_MATH

union Float2UInt
{
    float asFloat;
    ddU32 asUInt;
};

inline float roundFloat(float x)
{
    // Probably slower than std::floor(), also depends of FPU settings,
    // but we only need this for that special sin/cos() case anyways...
    const int i = static_cast<int>(x);
    return (x >= 0.0f) ? static_cast<float>(i) : static_cast<float>(i - 1);
}

inline float fastFabs(float x)
{
    // Mask-off the sign bit
    Float2UInt i;
    i.asFloat = x;
    i.asUInt &= 0x7FFFFFFF;
    return i.asFloat;
}

inline float fastInvSqrt(float x)
{
    // Modified version of the emblematic Q_rsqrt() from Quake 3.
    // See: http://en.wikipedia.org/wiki/Fast_inverse_square_root
    Float2UInt i;
    float y, r;
    y = x * 0.5f;
    i.asFloat = x;
    i.asUInt = 0x5F3759DF - (i.asUInt >> 1);
    r = i.asFloat;
    r = r * (1.5f - (r * r * y));
    return r;
}

inline float fastSin(float radians)
{
    static const float A = -2.39e-08;
    static const float B =  2.7526e-06;
    static const float C =  1.98409e-04;
    static const float D =  8.3333315e-03;
    static const float E =  1.666666664e-01;
    static const float HALFPI = DD_PI * 0.5f;

    if (radians < 0.0f || radians >= DD_TAU)
    {
        radians -= roundFloat(radians / DD_TAU) * DD_TAU;
    }

    if (radians < DD_PI)
    {
        if (radians > HALFPI)
        {
            radians = DD_PI - radians;
        }
    }
    else
    {
        radians = (radians > (DD_PI + HALFPI)) ? (radians - DD_TAU) : (DD_PI - radians);
    }

    const float s = radians * radians;
    return radians * (((((A * s + B) * s - C) * s + D) * s - E) * s + 1.0f);
}

inline float fastCos(float radians)
{
    static const float A = -2.605e-07;
    static const float B =  2.47609e-05;
    static const float C =  1.3888397e-03;
    static const float D =  4.16666418e-02;
    static const float E =  4.999999963e-01;
    static const float HALFPI = DD_PI * 0.5f;

    if (radians < 0.0f || radians >= DD_TAU)
    {
        radians -= roundFloat(radians / DD_TAU) * DD_TAU;
    }

    float d;
    if (radians < DD_PI)
    {
        if (radians > HALFPI)
        {
            radians = DD_PI - radians;
            d = -1.0f;
        }
        else
        {
            d = 1.0f;
        }
    }
    else
    {
        if (radians > (DD_PI + HALFPI))
        {
            radians = radians - DD_TAU;
            d = 1.0f;
        }
        else
        {
            radians = DD_PI - radians;
            d = -1.0f;
        }
    }

    const float s = radians * radians;
    return d * (((((A * s + B) * s - C) * s + D) * s - E) * s + 1.0f);
}

#endif // DEBUG_DRAW_USE_STD_MATH

// ========================================================
// ddVec3 helpers:
// ========================================================

enum { X, Y, Z, W };

inline void vecSet(ddVec3 & dest, const float x, const float y, const float z)
{
    dest[X] = x;
    dest[Y] = y;
    dest[Z] = z;
}

inline void vecCopy(ddVec3 & dest, ddVec3Param src)
{
    dest[X] = src[X];
    dest[Y] = src[Y];
    dest[Z] = src[Z];
}

inline void vecAdd(ddVec3 & result, ddVec3Param a, ddVec3Param b)
{
    result[X] = a[X] + b[X];
    result[Y] = a[Y] + b[Y];
    result[Z] = a[Z] + b[Z];
}

inline void vecSub(ddVec3 & result, ddVec3Param a, ddVec3Param b)
{
    result[X] = a[X] - b[X];
    result[Y] = a[Y] - b[Y];
    result[Z] = a[Z] - b[Z];
}

inline void vecScale(ddVec3 & result, ddVec3Param v, const float s)
{
    result[X] = v[X] * s;
    result[Y] = v[Y] * s;
    result[Z] = v[Z] * s;
}

inline void vecNormalize(ddVec3 & result, ddVec3Param v)
{
    const float lenSqr = v[X] * v[X] + v[Y] * v[Y] + v[Z] * v[Z];
    const float invLen = DD_INV_FSQRT(lenSqr);
    result[X] = v[X] * invLen;
    result[Y] = v[Y] * invLen;
    result[Z] = v[Z] * invLen;
}

inline void vecOrthogonalBasis(ddVec3 & left, ddVec3 & up, ddVec3Param v)
{
    // Produces two orthogonal vectors for normalized vector v.
    float lenSqr, invLen;
    if (DD_FABS(v[Z]) > 0.7f)
    {
        lenSqr = v[Y] * v[Y] + v[Z] * v[Z];
        invLen = DD_INV_FSQRT(lenSqr);
        up[X] = 0.0f;
        up[Y] =  v[Z] * invLen;
        up[Z] = -v[Y] * invLen;
        left[X] = lenSqr * invLen;
        left[Y] = -v[X] * up[Z];
        left[Z] =  v[X] * up[Y];
    }
    else
    {
        lenSqr = v[X] * v[X] + v[Y] * v[Y];
        invLen = DD_INV_FSQRT(lenSqr);
        left[X] = -v[Y] * invLen;
        left[Y] =  v[X] * invLen;
        left[Z] = 0.0f;
        up[X] = -v[Z] * left[Y];
        up[Y] =  v[Z] * left[X];
        up[Z] = lenSqr * invLen;
    }
}

// ========================================================
// ddMat4x4 helpers:
// ========================================================

inline void matTransformPointXYZ(ddVec3 & result, ddVec3Param p, ddMat4x4Param m)
{
    result[X] = (m[0] * p[X]) + (m[4] * p[Y]) + (m[8]  * p[Z]) + m[12]; // p[W] assumed to be 1
    result[Y] = (m[1] * p[X]) + (m[5] * p[Y]) + (m[9]  * p[Z]) + m[13];
    result[Z] = (m[2] * p[X]) + (m[6] * p[Y]) + (m[10] * p[Z]) + m[14];
}

inline void matTransformPointXYZW(float result[4], ddVec3Param p, ddMat4x4Param m)
{
    result[X] = (m[0] * p[X]) + (m[4] * p[Y]) + (m[8]  * p[Z]) + m[12]; // p[W] assumed to be 1
    result[Y] = (m[1] * p[X]) + (m[5] * p[Y]) + (m[9]  * p[Z]) + m[13];
    result[Z] = (m[2] * p[X]) + (m[6] * p[Y]) + (m[10] * p[Z]) + m[14];
    result[W] = (m[3] * p[X]) + (m[7] * p[Y]) + (m[11] * p[Z]) + m[15];
}

inline float matTransformPointXYZW2(ddVec3 & result, const float p[3], ddMat4x4Param m)
{
    result[X] = (m[0] * p[X]) + (m[4] * p[Y]) + (m[8]  * p[Z]) + m[12]; // p[W] assumed to be 1
    result[Y] = (m[1] * p[X]) + (m[5] * p[Y]) + (m[9]  * p[Z]) + m[13];
    result[Z] = (m[2] * p[X]) + (m[6] * p[Y]) + (m[10] * p[Z]) + m[14];
    float rw  = (m[3] * p[X]) + (m[7] * p[Y]) + (m[11] * p[Z]) + m[15];
    return rw;
}

// ========================================================
// Misc local functions for draw queue management:
// ========================================================

enum DrawMode
{
    DrawModePoints,
    DrawModeLines,
    DrawModeText
};

void flushDebugVerts(const DrawMode mode, const bool depthEnabled)
{
    if (g_vertexBufferUsed == 0)
    {
        return;
    }

    switch (mode)
    {
    case DrawModePoints :
        g_renderInterface->drawPointList(g_vertexBuffer, g_vertexBufferUsed, depthEnabled);
        break;
    case DrawModeLines :
        g_renderInterface->drawLineList(g_vertexBuffer, g_vertexBufferUsed, depthEnabled);
        break;
    case DrawModeText :
        g_renderInterface->drawGlyphList(g_vertexBuffer, g_vertexBufferUsed, g_glyphTex);
        break;
    } // switch (mode)

    g_vertexBufferUsed = 0;
}

void pushPointVert(const DebugPoint & point)
{
    // Make room for one more vert:
    if ((g_vertexBufferUsed + 1) >= DEBUG_DRAW_VERTEX_BUFFER_SIZE)
    {
        flushDebugVerts(DrawModePoints, point.depthEnabled);
    }

    DrawVertex & v = g_vertexBuffer[g_vertexBufferUsed++];
    v.point.x    = point.position[X];
    v.point.y    = point.position[Y];
    v.point.z    = point.position[Z];
    v.point.r    = point.color[X];
    v.point.g    = point.color[Y];
    v.point.b    = point.color[Z];
    v.point.size = point.size;
}

void pushLineVert(const DebugLine & line)
{
    // Make room for two more verts:
    if ((g_vertexBufferUsed + 2) >= DEBUG_DRAW_VERTEX_BUFFER_SIZE)
    {
        flushDebugVerts(DrawModeLines, line.depthEnabled);
    }

    DrawVertex & v0 = g_vertexBuffer[g_vertexBufferUsed++];
    DrawVertex & v1 = g_vertexBuffer[g_vertexBufferUsed++];

    v0.line.x = line.posFrom[X];
    v0.line.y = line.posFrom[Y];
    v0.line.z = line.posFrom[Z];
    v0.line.r = line.color[X];
    v0.line.g = line.color[Y];
    v0.line.b = line.color[Z];

    v1.line.x = line.posTo[X];
    v1.line.y = line.posTo[Y];
    v1.line.z = line.posTo[Z];
    v1.line.r = line.color[X];
    v1.line.g = line.color[Y];
    v1.line.b = line.color[Z];
}

void pushGlyphVerts(const DrawVertex verts[4])
{
    static const int indexes[6] = { 0, 1, 2, 2, 1, 3 }; // A CCW winding triangle.

    // Make room for one more glyph (2 tris):
    if ((g_vertexBufferUsed + 6) >= DEBUG_DRAW_VERTEX_BUFFER_SIZE)
    {
        flushDebugVerts(DrawModeText, false);
    }

    for (int i = 0; i < 6; ++i)
    {
        g_vertexBuffer[g_vertexBufferUsed++].glyph = verts[indexes[i]].glyph;
    }
}

void pushStringGlyphs(float x, float y, const char * text, ddVec3Param color, const float scaling)
{
    // Invariants for all characters:
    const float initialX    = x;
    const float scaleU      = DD_FONT_CHAR_SET.bitmapWidth;
    const float scaleV      = DD_FONT_CHAR_SET.bitmapHeight;
    const float fixedWidth  = DD_FONT_CHAR_SET.charWidth;
    const float fixedHeight = DD_FONT_CHAR_SET.charHeight;
    const float tabsWidth   = fixedWidth * 4.0f; // TAB = 4 spaces.

    for (; *text != '\0'; ++text)
    {
        const int charVal = *text;
        if (charVal >= FontCharSet::MaxChars)
        {
            continue;
        }
        if (charVal == ' ')
        {
            x += fixedWidth * scaling;
            continue;
        }
        if (charVal == '\t')
        {
            x += tabsWidth * scaling;
            continue;
        }
        if (charVal == '\n')
        {
            y += fixedHeight * scaling;
            x  = initialX;
            continue;
        }

        const FontChar fontChar = DD_FONT_CHAR_SET.chars[charVal];
        const float u0 = (fontChar.x + 0.5f) / scaleU;
        const float v0 = (fontChar.y + 0.5f) / scaleV;
        const float u1 = u0 + (fixedWidth  / scaleU);
        const float v1 = v0 + (fixedHeight / scaleV);
        const float w  = scaling * fixedWidth;
        const float h  = scaling * fixedHeight;

        DrawVertex verts[4];
        verts[0].glyph.x = x;
        verts[0].glyph.y = y;
        verts[0].glyph.u = u0;
        verts[0].glyph.v = v0;
        verts[0].glyph.r = color[X];
        verts[0].glyph.g = color[Y];
        verts[0].glyph.b = color[Z];
        verts[1].glyph.x = x;
        verts[1].glyph.y = y + h;
        verts[1].glyph.u = u0;
        verts[1].glyph.v = v1;
        verts[1].glyph.r = color[X];
        verts[1].glyph.g = color[Y];
        verts[1].glyph.b = color[Z];
        verts[2].glyph.x = x + w;
        verts[2].glyph.y = y;
        verts[2].glyph.u = u1;
        verts[2].glyph.v = v0;
        verts[2].glyph.r = color[X];
        verts[2].glyph.g = color[Y];
        verts[2].glyph.b = color[Z];
        verts[3].glyph.x = x + w;
        verts[3].glyph.y = y + h;
        verts[3].glyph.u = u1;
        verts[3].glyph.v = v1;
        verts[3].glyph.r = color[X];
        verts[3].glyph.g = color[Y];
        verts[3].glyph.b = color[Z];

        pushGlyphVerts(verts);
        x += fixedWidth * scaling; // Next char.
    }
}

float calcTextWidth(const char * text, const float scaling)
{
    const float fixedWidth = DD_FONT_CHAR_SET.charWidth;
    const float tabsWidth  = fixedWidth * 4.0f; // TAB = 4 spaces.

    float x = 0.0f;
    for (; *text != '\0'; ++text)
    {
        // Tabs are handled differently (4 spaces)
        if (*text == '\t')
        {
            x += tabsWidth * scaling;
        }
        else // Non-tab char (including whitespace)
        {
            x += fixedWidth * scaling;
        }
    }

    return x;
}

void drawDebugStrings()
{
    if (g_debugStringsCount == 0)
    {
        return;
    }

    for (int i = 0; i < g_debugStringsCount; ++i)
    {
        const DebugString & dstr = g_debugStrings[i];
        if (dstr.centered)
        {
            // 3D Labels are centered at the point of origin, e.g. center-aligned.
            const float offset = calcTextWidth(dstr.text.c_str(), dstr.scaling) * 0.5f;
            pushStringGlyphs(dstr.posX - offset, dstr.posY, dstr.text.c_str(), dstr.color, dstr.scaling);
        }
        else
        {
            // Left-aligned
            pushStringGlyphs(dstr.posX, dstr.posY, dstr.text.c_str(), dstr.color, dstr.scaling);
        }
    }

    flushDebugVerts(DrawModeText, false);
}

void drawDebugPoints()
{
    if (g_debugPointsCount == 0)
    {
        return;
    }

    //
    // First pass, points with depth test ENABLED:
    //
    int numDepthlessPoints = 0;
    for (int i = 0; i < g_debugPointsCount; ++i)
    {
        const DebugPoint & point = g_debugPoints[i];
        if (point.depthEnabled)
        {
            pushPointVert(point);
        }
        numDepthlessPoints += !point.depthEnabled;
    }
    flushDebugVerts(DrawModePoints, true);

    //
    // Second pass draws points with depth DISABLED:
    //
    if (numDepthlessPoints > 0)
    {
        for (int i = 0; i < g_debugPointsCount; ++i)
        {
            const DebugPoint & point = g_debugPoints[i];
            if (!point.depthEnabled)
            {
                pushPointVert(point);
            }
        }
        flushDebugVerts(DrawModePoints, false);
    }
}

void drawDebugLines()
{
    if (g_debugLinesCount == 0)
    {
        return;
    }

    //
    // First pass, lines with depth test ENABLED:
    //
    int numDepthlessLines = 0;
    for (int i = 0; i < g_debugLinesCount; ++i)
    {
        const DebugLine & line = g_debugLines[i];
        if (line.depthEnabled)
        {
            pushLineVert(line);
        }
        numDepthlessLines += !line.depthEnabled;
    }
    flushDebugVerts(DrawModeLines, true);

    //
    // Second pass draws lines with depth DISABLED:
    //
    if (numDepthlessLines > 0)
    {
        for (int i = 0; i < g_debugLinesCount; ++i)
        {
            const DebugLine & line = g_debugLines[i];
            if (!line.depthEnabled)
            {
                pushLineVert(line);
            }
        }
        flushDebugVerts(DrawModeLines, false);
    }
}

template<class T>
void clearDebugQueue(T * queue, int & queueCount)
{
    if (g_currentTimeMillis == 0)
    {
        queueCount = 0;
        return;
    }

    int index = 0;
    T * pElem = queue;

    // Concatenate elements that still need to be draw on future frames:
    for (int i = 0; i < queueCount; ++i, ++pElem)
    {
        if (pElem->expiryDateMillis > g_currentTimeMillis)
        {
            if (index != i)
            {
                queue[index] = *pElem;
            }
            ++index;
        }
    }

    queueCount = index;
}

int rleDecode(unsigned char * output, const int outSizeBytes,
              const unsigned char * input, const int inSizeBytes)
{
    if (output == DD_NULL || input == DD_NULL)
    {
        return -1;
    }
    if (outSizeBytes <= 0 || inSizeBytes <= 0)
    {
        return -1;
    }

    int bytesWritten = 0;
    for (int i = 0; i < inSizeBytes; i += 2)
    {
        int rleCount = *input++;
        const unsigned char rleByte = *input++;

        // Replicate the RLE packet.
        while (rleCount--)
        {
            *output++ = rleByte;
            if (++bytesWritten == outSizeBytes && rleCount > 0)
            {
                // Reached end of output and we are not done yet, stop with an error.
                return -1;
            }
        }
    }

    return bytesWritten;
}

void setupGlyphTexture()
{
    if (g_renderInterface == DD_NULL)
    {
        return;
    }

    if (g_glyphTex != DD_NULL)
    {
        g_renderInterface->destroyGlyphTexture(g_glyphTex);
        g_glyphTex = DD_NULL;
    }

    const int decompressedSize = DD_FONT_CHAR_SET.bitmapDecompressSize;
    unsigned char * decompressedBitmap = reinterpret_cast<unsigned char *>(DD_MALLOC(decompressedSize));
    if (decompressedBitmap == DD_NULL)
    {
        return; // Out of memory, it seems...
    }

    // The glyph bitmap is always assumed to be RLE encoded in the format
    // outputted by the font-tool (see: https://github.com/glampert/font-tool)
    if (rleDecode(decompressedBitmap, decompressedSize,
                  DD_FONT_BITMAP, DD_FONT_BITMAP_SIZE) <= 0)
    {
        // Something when wrong...
        DD_MFREE(decompressedBitmap);
        return;
    }

    g_glyphTex = g_renderInterface->createGlyphTexture(
                    DD_FONT_CHAR_SET.bitmapWidth,
                    DD_FONT_CHAR_SET.bitmapHeight,
                    decompressedBitmap);

    // No longer needed.
    DD_MFREE(decompressedBitmap);
}

} // namespace unnamed {}

// ========================================================
// Public Debug Draw interface:
// ========================================================

void initialize(RenderInterface * renderer)
{
    if (g_renderInterface != DD_NULL) // Reinitializing?
    {
        shutdown(); // Shutdown first.
    }

    g_renderInterface = renderer;
    g_currentTimeMillis = 0;
    g_vertexBufferUsed  = 0;
    g_debugStringsCount = 0;
    g_debugPointsCount  = 0;
    g_debugLinesCount   = 0;

    setupGlyphTexture();
}

void shutdown()
{
    //
    // If this macro is defined, the user-provided ddStr type
    // needs some extra cleanup before shutdown, so we run for
    // all entries in the g_debugStrings[] array.
    //
    // We could call std::string::clear() here, but clear()
    // doesn't deallocate memory in std string, so we might
    // as well let the default destructor do the cleanup,
    // when using the default (AKA std::string) ddStr.
    //
    #ifdef DEBUG_DRAW_STR_DEALLOC_FUNC
    for (int i = 0; i < DD_ARRAY_LEN(g_debugStrings); ++i)
    {
        DEBUG_DRAW_STR_DEALLOC_FUNC(g_debugStrings[i].text);
    }
    #endif // DEBUG_DRAW_STR_DEALLOC_FUNC

    if (g_renderInterface != DD_NULL && g_glyphTex != DD_NULL)
    {
        g_renderInterface->destroyGlyphTexture(g_glyphTex);
        g_glyphTex = DD_NULL;
    }

    g_renderInterface = DD_NULL;
}

bool hasPendingDraws()
{
    return (g_debugStringsCount + g_debugPointsCount + g_debugLinesCount) > 0;
}

void flush(const ddI64 currTimeMillis, const int flags)
{
    DD_CHECK_INIT;

    if (!hasPendingDraws())
    {
        return;
    }

    // Save the last know time value for next dd::line/dd::point calls.
    g_currentTimeMillis = currTimeMillis;

    // Let the user set common render states...
    g_renderInterface->beginDraw();

    // Issue the render calls:
    if (flags & FlushLines)  { drawDebugLines();   }
    if (flags & FlushPoints) { drawDebugPoints();  }
    if (flags & FlushText)   { drawDebugStrings(); }

    // And cleanup if needed...
    g_renderInterface->endDraw();

    // Remove all expired objects, regardless of draw flags:
    clearDebugQueue(g_debugStrings, g_debugStringsCount);
    clearDebugQueue(g_debugPoints,  g_debugPointsCount);
    clearDebugQueue(g_debugLines,   g_debugLinesCount);
}

void clear()
{
    DD_CHECK_INIT;

    // Let the user cleanup the debug strings:
    #ifdef DEBUG_DRAW_STR_DEALLOC_FUNC
    for (int i = 0; i < DD_ARRAY_LEN(g_debugStrings); ++i)
    {
        DEBUG_DRAW_STR_DEALLOC_FUNC(g_debugStrings[i].text);
    }
    #endif // DEBUG_DRAW_STR_DEALLOC_FUNC

    g_vertexBufferUsed  = 0;
    g_debugStringsCount = 0;
    g_debugPointsCount  = 0;
    g_debugLinesCount   = 0;
}

void point(ddVec3Param pos, ddVec3Param color, const float size, const int durationMillis, const bool depthEnabled)
{
    DD_CHECK_INIT;

    if (g_debugPointsCount == DEBUG_DRAW_MAX_POINTS)
    {
        DEBUG_DRAW_OVERFLOWED("DEBUG_DRAW_MAX_POINTS limit reached! Dropping further debug point draws.");
        return;
    }

    DebugPoint & point     = g_debugPoints[g_debugPointsCount++];
    point.expiryDateMillis = g_currentTimeMillis + durationMillis;
    point.depthEnabled     = depthEnabled;
    point.size             = size;

    vecCopy(point.position, pos);
    vecCopy(point.color, color);
}

void line(ddVec3Param from, ddVec3Param to, ddVec3Param color, const int durationMillis, const bool depthEnabled)
{
    DD_CHECK_INIT;

    if (g_debugLinesCount == DEBUG_DRAW_MAX_LINES)
    {
        DEBUG_DRAW_OVERFLOWED("DEBUG_DRAW_MAX_LINES limit reached! Dropping further debug line draws.");
        return;
    }

    DebugLine & line      = g_debugLines[g_debugLinesCount++];
    line.expiryDateMillis = g_currentTimeMillis + durationMillis;
    line.depthEnabled     = depthEnabled;

    vecCopy(line.posFrom, from);
    vecCopy(line.posTo, to);
    vecCopy(line.color, color);
}

void screenText(ddStrParam str, ddVec3Param pos, ddVec3Param color, const float scaling, const int durationMillis)
{
    DD_CHECK_INIT;
    if (g_glyphTex == DD_NULL)
    {
        return;
    }

    if (g_debugStringsCount == DEBUG_DRAW_MAX_STRINGS)
    {
        DEBUG_DRAW_OVERFLOWED("DEBUG_DRAW_MAX_STRINGS limit reached! Dropping further debug string draws.");
        return;
    }

    DebugString & dstr    = g_debugStrings[g_debugStringsCount++];
    dstr.expiryDateMillis = g_currentTimeMillis + durationMillis;
    dstr.posX             = pos[X];
    dstr.posY             = pos[Y];
    dstr.scaling          = scaling;
    dstr.text             = DD_MOVE(str);
    dstr.centered         = false;
    vecCopy(dstr.color, color);
}

void projectedText(ddStrParam str, ddVec3Param pos, ddVec3Param color, ddMat4x4Param vpMatrix,
                   const int sx, const int sy, const int sw, const int sh, const float scaling,
                   const int durationMillis)
{
    DD_CHECK_INIT;
    if (g_glyphTex == DD_NULL)
    {
        return;
    }

    if (g_debugStringsCount == DEBUG_DRAW_MAX_STRINGS)
    {
        DEBUG_DRAW_OVERFLOWED("DEBUG_DRAW_MAX_STRINGS limit reached! Dropping further debug string draws.");
        return;
    }

    float tempPoint[4];
    matTransformPointXYZW(tempPoint, pos, vpMatrix);

    // Bail if W ended up as zero.
    if (DD_FABS(tempPoint[W]) < DD_EPSILON)
    {
        return;
    }

    // Perspective divide (we only care about the 2D part now):
    tempPoint[X] /= tempPoint[W];
    tempPoint[Y] /= tempPoint[W];

    // Map to window coordinates:
    float scrX = ((tempPoint[X] * 0.5f) + 0.5f) * sw + sx;
    float scrY = ((tempPoint[Y] * 0.5f) + 0.5f) * sh + sy;

    // Need to invert the direction because on OGL the screen origin is the bottom-left corner.
    // NOTE: This is not renderer agnostic, I think... Should add a #define or something!
    scrY = static_cast<float>(sh) - scrY;

    DebugString & dstr    = g_debugStrings[g_debugStringsCount++];
    dstr.expiryDateMillis = g_currentTimeMillis + durationMillis;
    dstr.posX             = scrX;
    dstr.posY             = scrY;
    dstr.scaling          = scaling;
    dstr.text             = DD_MOVE(str);
    dstr.centered         = true;
    vecCopy(dstr.color, color);
}

void axisTriad(ddMat4x4Param transform, const float size, const float length,
               const int durationMillis, const bool depthEnabled)
{
    DD_CHECK_INIT;

    ddVec3 p0, p1, p2, p3;
    ddVec3 xEnd, yEnd, zEnd;
    ddVec3 origin, cR, cG, cB;

    vecSet(cR, 1.0f, 0.0f, 0.0f);
    vecSet(cG, 0.0f, 1.0f, 0.0f);
    vecSet(cB, 0.0f, 0.0f, 1.0f);

    vecSet(origin, 0.0f, 0.0f, 0.0f);
    vecSet(xEnd, length, 0.0f, 0.0f);
    vecSet(yEnd, 0.0f, length, 0.0f);
    vecSet(zEnd, 0.0f, 0.0f, length);

    matTransformPointXYZ(p0, origin, transform);
    matTransformPointXYZ(p1, xEnd, transform);
    matTransformPointXYZ(p2, yEnd, transform);
    matTransformPointXYZ(p3, zEnd, transform);

    arrow(p0, p1, cR, size, durationMillis, depthEnabled); // X: red axis
    arrow(p0, p2, cG, size, durationMillis, depthEnabled); // Y: green axis
    arrow(p0, p3, cB, size, durationMillis, depthEnabled); // Z: blue axis
}

void arrow(ddVec3Param from, ddVec3Param to, ddVec3Param color, const float size,
           const int durationMillis, const bool depthEnabled)
{
    DD_CHECK_INIT;

    static bool sinCosTablesComputed = false;
    static float arrowSin[45];
    static float arrowCos[45];
    static float arrowStep;

    // Calculate sine and cosine tables only once:
    if (!sinCosTablesComputed)
    {
        int i = 0;
        float degrees = 0.0f;
        arrowStep = 30.0f; // In degrees.

        for (; degrees < 360.0f; degrees += arrowStep, ++i)
        {
            arrowSin[i] = DD_FSIN(DD_DEG2RAD(degrees));
            arrowCos[i] = DD_FCOS(DD_DEG2RAD(degrees));
        }

        arrowSin[i] = arrowSin[0];
        arrowCos[i] = arrowCos[0];
        sinCosTablesComputed = true;
    }

    // Body line:
    line(from, to, color, durationMillis, depthEnabled);

    // Aux vectors to compute the arrowhead:
    ddVec3 up, right, forward;
    vecSub(forward, to, from);
    vecNormalize(forward, forward);
    vecOrthogonalBasis(right, up, forward);
    vecScale(forward, forward, size);

    // Arrowhead is a cone (sin/cos tables used here):
    float degrees = 0.0f;
    for (int i = 0; degrees < 360.0f; degrees += arrowStep, ++i)
    {
        float scale;
        ddVec3 v1, v2, temp;

        scale = 0.5f * size * arrowCos[i];
        vecScale(temp, right, scale);
        vecSub(v1, to, forward);
        vecAdd(v1, v1, temp);

        scale = 0.5f * size * arrowSin[i];
        vecScale(temp, up, scale);
        vecAdd(v1, v1, temp);

        scale = 0.5f * size * arrowCos[i + 1];
        vecScale(temp, right, scale);
        vecSub(v2, to, forward);
        vecAdd(v2, v2, temp);

        scale = 0.5f * size * arrowSin[i + 1];
        vecScale(temp, up, scale);
        vecAdd(v2, v2, temp);

        line(v1, to, color, durationMillis, depthEnabled);
        line(v1, v2, color, durationMillis, depthEnabled);
    }
}

void cross(ddVec3Param center, const float length, const int durationMillis, const bool depthEnabled)
{
    DD_CHECK_INIT;

    ddVec3 from, to;
    ddVec3 cR, cG, cB;

    vecSet(cR, 1.0f, 0.0f, 0.0f);
    vecSet(cG, 0.0f, 1.0f, 0.0f);
    vecSet(cB, 0.0f, 0.0f, 1.0f);

    const float cx = center[X];
    const float cy = center[Y];
    const float cz = center[Z];
    const float hl = length * 0.5f; // Half on each side.

    // Red line: X - length/2 to X + length/2
    vecSet(from, cx - hl, cy, cz);
    vecSet(to,   cx + hl, cy, cz);
    line(from, to, cR, durationMillis, depthEnabled);

    // Green line: Y - length/2 to Y + length/2
    vecSet(from, cx, cy - hl, cz);
    vecSet(to,   cx, cy + hl, cz);
    line(from, to, cG, durationMillis, depthEnabled);

    // Blue line: Z - length/2 to Z + length/2
    vecSet(from, cx, cy, cz - hl);
    vecSet(to,   cx, cy, cz + hl);
    line(from, to, cB, durationMillis, depthEnabled);
}

void circle(ddVec3Param center, ddVec3Param planeNormal, ddVec3Param color, const float radius,
            const float numSteps, const int durationMillis, const bool depthEnabled)
{
    DD_CHECK_INIT;

    ddVec3 left, up;
    ddVec3 point, lastPoint;

    vecOrthogonalBasis(left, up, planeNormal);

    vecScale(up, up, radius);
    vecScale(left, left, radius);
    vecAdd(lastPoint, center, up);

    for (int i = 1; i <= numSteps; ++i)
    {
        const float radians = DD_TAU * i / numSteps;

        ddVec3 vs, vc;
        vecScale(vs, left, DD_FSIN(radians));
        vecScale(vc, up,   DD_FCOS(radians));

        vecAdd(point, center, vs);
        vecAdd(point, point,  vc);

        line(lastPoint, point, color, durationMillis, depthEnabled);
        vecCopy(lastPoint, point);
    }
}

void plane(ddVec3Param center, ddVec3Param planeNormal, ddVec3Param planeColor, ddVec3Param normalVecColor,
           const float planeScale, const float normalVecScale, const int durationMillis, const bool depthEnabled)
{
    DD_CHECK_INIT;

    ddVec3 v1, v2, v3, v4;
    ddVec3 tangent, bitangent;
    vecOrthogonalBasis(tangent, bitangent, planeNormal);

    // A little bit of preprocessor voodoo to make things more interesting :P
    #define DD_PLANE_V(v, op1, op2) \
    v[X] = (center[X] op1 (tangent[X] * planeScale) op2 (bitangent[X] * planeScale)); \
    v[Y] = (center[Y] op1 (tangent[Y] * planeScale) op2 (bitangent[Y] * planeScale)); \
    v[Z] = (center[Z] op1 (tangent[Z] * planeScale) op2 (bitangent[Z] * planeScale))
    DD_PLANE_V(v1, -, -);
    DD_PLANE_V(v2, +, -);
    DD_PLANE_V(v3, +, +);
    DD_PLANE_V(v4, -, +);
    #undef DD_PLANE_V

    // Draw the wireframe plane quadrilateral:
    line(v1, v2, planeColor, durationMillis, depthEnabled);
    line(v2, v3, planeColor, durationMillis, depthEnabled);
    line(v3, v4, planeColor, durationMillis, depthEnabled);
    line(v4, v1, planeColor, durationMillis, depthEnabled);

    // Optionally add a line depicting the plane normal:
    if (normalVecScale != 0.0f)
    {
        ddVec3 normalVec;
        normalVec[X] = (planeNormal[X] * normalVecScale) + center[X];
        normalVec[Y] = (planeNormal[Y] * normalVecScale) + center[Y];
        normalVec[Z] = (planeNormal[Z] * normalVecScale) + center[Z];
        line(center, normalVec, normalVecColor, durationMillis, depthEnabled);
    }
}

void sphere(ddVec3Param center, ddVec3Param color, const float radius, const int durationMillis, const bool depthEnabled)
{
    DD_CHECK_INIT;

    static const int stepSize = 15;
    ddVec3 cache[360 / stepSize];
    ddVec3 radiusVec;

    vecSet(radiusVec, 0.0f, 0.0f, radius);
    vecAdd(cache[0], center, radiusVec);

    for (int n = 1; n < DD_ARRAY_LEN(cache); ++n)
    {
        vecCopy(cache[n], cache[0]);
    }

    ddVec3 lastPoint, temp;
    for (int i = stepSize; i <= 360; i += stepSize)
    {
        const float s = DD_FSIN(DD_DEG2RAD(i));
        const float c = DD_FCOS(DD_DEG2RAD(i));

        lastPoint[X] = center[X];
        lastPoint[Y] = center[Y] + radius * s;
        lastPoint[Z] = center[Z] + radius * c;

        for (int n = 0, j = stepSize; j <= 360; j += stepSize, ++n)
        {
            temp[X] = center[X] + DD_FSIN(DD_DEG2RAD(j)) * radius * s;
            temp[Y] = center[Y] + DD_FCOS(DD_DEG2RAD(j)) * radius * s;
            temp[Z] = lastPoint[Z];

            line(lastPoint, temp, color, durationMillis, depthEnabled);
            line(lastPoint, cache[n], color, durationMillis, depthEnabled);

            vecCopy(cache[n], lastPoint);
            vecCopy(lastPoint, temp);
        }
    }
}

void cone(ddVec3Param apex, ddVec3Param dir, ddVec3Param color, const float baseRadius,
          const float apexRadius, const int durationMillis, const bool depthEnabled)
{
    DD_CHECK_INIT;

    static const int stepSize = 20;
    ddVec3 axis[3];
    ddVec3 top, temp0, temp1, temp2;
    ddVec3 p1, p2, lastP1, lastP2;

    vecCopy(axis[2], dir);
    vecNormalize(axis[2], axis[2]);
    vecOrthogonalBasis(axis[0], axis[1], axis[2]);

    axis[1][X] = -axis[1][X];
    axis[1][Y] = -axis[1][Y];
    axis[1][Z] = -axis[1][Z];

    vecAdd(top, apex, dir);
    vecScale(temp1, axis[1], baseRadius);
    vecAdd(lastP2, top, temp1);

    if (apexRadius == 0.0f)
    {
        for (int i = stepSize; i <= 360; i += stepSize)
        {
            vecScale(temp1, axis[0], DD_FSIN(DD_DEG2RAD(i)));
            vecScale(temp2, axis[1], DD_FCOS(DD_DEG2RAD(i)));
            vecAdd(temp0, temp1, temp2);

            vecScale(temp0, temp0, baseRadius);
            vecAdd(p2, top, temp0);

            line(lastP2, p2, color, durationMillis, depthEnabled);
            line(p2, apex, color, durationMillis, depthEnabled);

            vecCopy(lastP2, p2);
        }
    }
    else // A degenerate cone with open apex:
    {
        vecScale(temp1, axis[1], apexRadius);
        vecAdd(lastP1, apex, temp1);

        for (int i = stepSize; i <= 360; i += stepSize)
        {
            vecScale(temp1, axis[0], DD_FSIN(DD_DEG2RAD(i)));
            vecScale(temp2, axis[1], DD_FCOS(DD_DEG2RAD(i)));
            vecAdd(temp0, temp1, temp2);

            vecScale(temp1, temp0, apexRadius);
            vecScale(temp2, temp0, baseRadius);

            vecAdd(p1, apex, temp1);
            vecAdd(p2, top,  temp2);

            line(lastP1, p1, color, durationMillis, depthEnabled);
            line(lastP2, p2, color, durationMillis, depthEnabled);
            line(p1, p2, color, durationMillis, depthEnabled);

            vecCopy(lastP1, p1);
            vecCopy(lastP2, p2);
        }
    }
}

void box(const ddVec3 points[8], ddVec3Param color, const int durationMillis, const bool depthEnabled)
{
    // Build the lines from points using clever indexing tricks:
    // (& 3 is a fancy way of doing % 4, but avoids the expensive modulo operation)
    for (int i = 0; i < 4; ++i)
    {
        line(points[i], points[(i + 1) & 3], color, durationMillis, depthEnabled);
        line(points[4 + i], points[4 + ((i + 1) & 3)], color, durationMillis, depthEnabled);
        line(points[i], points[4 + i], color, durationMillis, depthEnabled);
    }
}

void box(ddVec3Param center, ddVec3Param color, const float width, const float height,
         const float depth, const int durationMillis, const bool depthEnabled)
{
    DD_CHECK_INIT;

    const float cx = center[X];
    const float cy = center[Y];
    const float cz = center[Z];
    const float w  = width  * 0.5f;
    const float h  = height * 0.5f;
    const float d  = depth  * 0.5f;

    // Create all the 8 points:
    ddVec3 points[8];
    #define DD_BOX_V(v, op1, op2, op3) \
    v[X] = cx op1 w; \
    v[Y] = cy op2 h; \
    v[Z] = cz op3 d
    DD_BOX_V(points[0], -, +, +);
    DD_BOX_V(points[1], -, +, -);
    DD_BOX_V(points[2], +, +, -);
    DD_BOX_V(points[3], +, +, +);
    DD_BOX_V(points[4], -, -, +);
    DD_BOX_V(points[5], -, -, -);
    DD_BOX_V(points[6], +, -, -);
    DD_BOX_V(points[7], +, -, +);
    #undef DD_BOX_V

    box(points, color, durationMillis, depthEnabled);
}

void aabb(ddVec3Param mins, ddVec3Param maxs, ddVec3Param color, const int durationMillis, const bool depthEnabled)
{
    DD_CHECK_INIT;

    ddVec3 bb[2];
    ddVec3 points[8];

    vecCopy(bb[0], mins);
    vecCopy(bb[1], maxs);

    // Expand min/max bounds:
    for (int i = 0; i < DD_ARRAY_LEN(points); ++i)
    {
        points[i][X] = bb[(i ^ (i >> 1)) & 1][X];
        points[i][Y] = bb[(i >> 1) & 1][Y];
        points[i][Z] = bb[(i >> 2) & 1][Z];
    }

    // Build the lines:
    box(points, color, durationMillis, depthEnabled);
}

void frustum(ddMat4x4Param invClipMatrix, ddVec3Param color, const int durationMillis, const bool depthEnabled)
{
    DD_CHECK_INIT;

    // Start with the standard clip volume, then bring it back to world space.
    static const float planes[8][3] = {
        // near plane
        { -1.0f, -1.0f, -1.0f }, {  1.0f, -1.0f, -1.0f },
        {  1.0f,  1.0f, -1.0f }, { -1.0f,  1.0f, -1.0f },
        // far plane
        { -1.0f, -1.0f,  1.0f }, {  1.0f, -1.0f,  1.0f },
        {  1.0f,  1.0f,  1.0f }, { -1.0f,  1.0f,  1.0f }
    };

    ddVec3 points[8];
    float wCoords[8];

    // Transform the planes by the inverse clip matrix:
    for (int i = 0; i < DD_ARRAY_LEN(planes); ++i)
    {
        wCoords[i] = matTransformPointXYZW2(points[i], planes[i], invClipMatrix);
    }

    // Divide by the W component of each:
    for (int i = 0; i < DD_ARRAY_LEN(planes); ++i)
    {
        // But bail if any W ended up as zero.
        if (DD_FABS(wCoords[W]) < DD_EPSILON)
        {
            return;
        }

        points[i][X] /= wCoords[i];
        points[i][Y] /= wCoords[i];
        points[i][Z] /= wCoords[i];
    }

    // Connect the dots:
    box(points, color, durationMillis, depthEnabled);
}

void vertexNormal(ddVec3Param origin, ddVec3Param normal, const float length,
                  const int durationMillis, const bool depthEnabled)
{
    DD_CHECK_INIT;

    ddVec3 normalVec;
    ddVec3 normalColor;

    vecSet(normalColor, 1.0f, 1.0f, 1.0f);

    normalVec[X] = (normal[X] * length) + origin[X];
    normalVec[Y] = (normal[Y] * length) + origin[Y];
    normalVec[Z] = (normal[Z] * length) + origin[Z];

    line(origin, normalVec, normalColor, durationMillis, depthEnabled);
}

void tangentBasis(ddVec3Param origin, ddVec3Param normal, ddVec3Param tangent, ddVec3Param bitangent,
                  const float lengths, const int durationMillis, const bool depthEnabled)
{
    DD_CHECK_INIT;

    ddVec3 cN, cT, cB;
    ddVec3 vN, vT, vB;

    vecSet(cN, 1.0f, 1.0f, 1.0f); // Vertex normals are WHITE
    vecSet(cT, 1.0f, 1.0f, 0.0f); // Tangents are YELLOW
    vecSet(cB, 1.0f, 0.0f, 1.0f); // Bi-tangents are MAGENTA

    vN[X] = (normal[X] * lengths) + origin[X];
    vN[Y] = (normal[Y] * lengths) + origin[Y];
    vN[Z] = (normal[Z] * lengths) + origin[Z];

    vT[X] = (tangent[X] * lengths) + origin[X];
    vT[Y] = (tangent[Y] * lengths) + origin[Y];
    vT[Z] = (tangent[Z] * lengths) + origin[Z];

    vB[X] = (bitangent[X] * lengths) + origin[X];
    vB[Y] = (bitangent[Y] * lengths) + origin[Y];
    vB[Z] = (bitangent[Z] * lengths) + origin[Z];

    line(origin, vN, cN, durationMillis, depthEnabled);
    line(origin, vT, cT, durationMillis, depthEnabled);
    line(origin, vB, cB, durationMillis, depthEnabled);
}

void xzSquareGrid(const float mins, const float maxs, const float y, const float step,
                  ddVec3Param color, const int durationMillis, const bool depthEnabled)
{
    ddVec3 from, to;
    for (float i = mins; i <= maxs; i += step)
    {
        // Horizontal line (along the X)
        vecSet(from, mins, y, i);
        vecSet(to,   maxs, y, i);
        line(from, to, color, durationMillis, depthEnabled);

        // Vertical line (along the Z)
        vecSet(from, i, y, mins);
        vecSet(to,   i, y, maxs);
        line(from, to, color, durationMillis, depthEnabled);
    }
}

// ========================================================
// RenderInterface stubs:
// ========================================================

RenderInterface::~RenderInterface() { }
void RenderInterface::beginDraw() { }
void RenderInterface::endDraw() { }
void RenderInterface::drawPointList(const DrawVertex *, int, bool) { }
void RenderInterface::drawLineList(const DrawVertex *, int, bool) { }
void RenderInterface::drawGlyphList(const DrawVertex *, int, GlyphTextureHandle) { }
void RenderInterface::destroyGlyphTexture(GlyphTextureHandle) { }
GlyphTextureHandle RenderInterface::createGlyphTexture(int, int, const void *) { return DD_NULL; }

// ========================================================
// The embedded font bitmap and glyph charset:
// ========================================================

/*
 * Data generated from font 'monoid-18.fnt' by font-tool.
 * Command line: monoid-18.fnt monoid-18.png monoid-18.h Monoid18 --compress --structs
 *
 * The Monoid font, copyright (c) 2015 Andreas Larsen and contributors,
 * is released under the MIT license. See: https://github.com/larsenwork/monoid
 *
 * The following glyph bitmap is an RLE compressed graymap.
 */
const int g_fontMonoid18BitmapSizeBytes = 16384;
const unsigned char g_fontMonoid18Bitmap[] = { // ~16 KB
  0xFF, 0x00, 0xA1, 0x00, 0x02, 0xFF, 0x1A, 0x00, 0x01, 0xFF, 0x01, 0xFE, 0x01, 0xE5, 0x28,
  0x00, 0x01, 0xF9, 0x01, 0xFF, 0x01, 0xF0, 0x0A, 0x00, 0x02, 0xFF, 0x31, 0x00, 0x03, 0xFF,
  0x50, 0x00, 0x03, 0xFF, 0x23, 0x00, 0x01, 0xF8, 0x01, 0xFE, 0x01, 0xFF, 0x19, 0x00, 0x01,
  0xF5, 0x01, 0xFF, 0x01, 0xFB, 0x27, 0x00, 0x01, 0xC5, 0x01, 0xFB, 0x01, 0xFF, 0x01, 0xFD,
  0x09, 0x00, 0x01, 0xC5, 0x01, 0xFC, 0x01, 0xFB, 0x30, 0x00, 0x04, 0xFF, 0x01, 0xFD, 0x01,
  0xFF, 0x1C, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x01, 0x00, 0x01, 0xD8, 0x01, 0xF9,
  0x01, 0xFC, 0x2A, 0x00, 0x01, 0xFE, 0x03, 0xFF, 0x01, 0xFE, 0x1F, 0x00, 0x01, 0xFF, 0x01,
  0xFD, 0x05, 0xFF, 0x01, 0xFC, 0x0A, 0x00, 0x01, 0xF9, 0x02, 0xFF, 0x01, 0xFE, 0x09, 0x00,
  0x01, 0xB7, 0x01, 0xFC, 0x01, 0xFD, 0x01, 0xE9, 0x0F, 0x00, 0x08, 0xFF, 0x0F, 0x00, 0x01,
  0xF9, 0x01, 0xFF, 0x01, 0xFB, 0x0A, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x2F, 0x00, 0x01, 0xF5,
  0x07, 0xFF, 0x1B, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x01, 0x00, 0x01, 0xD8, 0x02,
  0xFB, 0x29, 0x00, 0x01, 0xF9, 0x05, 0xFF, 0x01, 0xFD, 0x1D, 0x00, 0x01, 0xF8, 0x03, 0xFF,
  0x01, 0xFC, 0x02, 0xFF, 0x01, 0xFD, 0x01, 0xFB, 0x09, 0x00, 0x01, 0xF5, 0x01, 0xFF, 0x01,
  0xFE, 0x02, 0xFF, 0x01, 0xFC, 0x09, 0x00, 0x01, 0xF5, 0x01, 0xFF, 0x01, 0xFC, 0x0E, 0x00,
  0x04, 0xFF, 0x01, 0xFE, 0x04, 0xFF, 0x01, 0xFD, 0x0D, 0x00, 0x01, 0xD8, 0x01, 0xF8, 0x01,
  0xFE, 0x01, 0xFD, 0x0A, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x2E, 0x00, 0x02, 0xFF, 0x01, 0xFC,
  0x01, 0xFF, 0x02, 0x00, 0x01, 0xFC, 0x01, 0xFF, 0x01, 0xFB, 0x1B, 0x00, 0x01, 0xF5, 0x01,
  0xFD, 0x01, 0xE9, 0x01, 0x00, 0x01, 0xC5, 0x02, 0xFB, 0x29, 0x00, 0x01, 0xF4, 0x01, 0xFE,
  0x01, 0xFF, 0x01, 0x00, 0x01, 0xF9, 0x01, 0xFD, 0x01, 0xFB, 0x03, 0x00, 0x01, 0xFF, 0x18,
  0x00, 0x01, 0xB5, 0x01, 0xFD, 0x01, 0xFE, 0x01, 0xFF, 0x01, 0x00, 0x01, 0xF5, 0x01, 0xFD,
  0x01, 0xF0, 0x0A, 0x00, 0x01, 0xF9, 0x01, 0xFF, 0x01, 0xFC, 0x01, 0x00, 0x01, 0xF9, 0x01,
  0xFF, 0x01, 0xFB, 0x09, 0x00, 0x01, 0xB5, 0x01, 0xFD, 0x01, 0xFC, 0x0D, 0x00, 0x01, 0xD8,
  0x01, 0xF9, 0x03, 0xFF, 0x03, 0x00, 0x02, 0xFF, 0x01, 0xFB, 0x0D, 0x00, 0x01, 0xF5, 0x01,
  0xFF, 0x01, 0xFB, 0x0B, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x2E, 0x00, 0x01, 0xF6, 0x01, 0xFF,
  0x01, 0xFB, 0x03, 0x00, 0x01, 0xD8, 0x01, 0xF9, 0x01, 0xFB, 0x1B, 0x00, 0x01, 0xF5, 0x01,
  0xFD, 0x03, 0x00, 0x02, 0xFB, 0x29, 0x00, 0x01, 0xF6, 0x01, 0xFD, 0x01, 0xF0, 0x01, 0x00,
  0x01, 0xD8, 0x02, 0xFB, 0x02, 0x00, 0x01, 0xFA, 0x01, 0xFF, 0x01, 0xFB, 0x17, 0x00, 0x01,
  0xF9, 0x01, 0xFF, 0x01, 0xFC, 0x02, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x0A, 0x00,
  0x01, 0xF5, 0x02, 0xFF, 0x02, 0x00, 0x01, 0xF4, 0x01, 0xFF, 0x01, 0xFD, 0x09, 0x00, 0x01,
  0xF6, 0x01, 0xFF, 0x01, 0xFC, 0x0C, 0x00, 0x01, 0xF9, 0x01, 0xFF, 0x01, 0xFB, 0x06, 0x00,
  0x01, 0xF4, 0x01, 0xFD, 0x01, 0xE9, 0x0C, 0x00, 0x01, 0xF7, 0x02, 0xFF, 0x0B, 0x00, 0x01,
  0xD8, 0x02, 0xFB, 0x0F, 0x00, 0x01, 0xD8, 0x01, 0xFB, 0x01, 0xFE, 0x1C, 0x00, 0x01, 0xF6,
  0x01, 0xFF, 0x01, 0xFB, 0x03, 0x00, 0x01, 0xBB, 0x01, 0xFC, 0x01, 0xFB, 0x19, 0x00, 0x01,
  0xD8, 0x08, 0xFF, 0x01, 0xFE, 0x01, 0xF0, 0x1A, 0x00, 0x01, 0xD8, 0x01, 0xFB, 0x01, 0xFE,
  0x0A, 0x00, 0x01, 0xF8, 0x01, 0xFF, 0x01, 0xFD, 0x01, 0xFF, 0x01, 0xFB, 0x01, 0xFF, 0x01,
  0xFA, 0x01, 0x00, 0x01, 0xFA, 0x01, 0xFF, 0x01, 0xFC, 0x01, 0xFF, 0x17, 0x00, 0x01, 0xF5,
  0x01, 0xFF, 0x01, 0xFE, 0x02, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x09, 0x00, 0x01,
  0xFD, 0x01, 0xFF, 0x01, 0xFB, 0x03, 0x00, 0x01, 0xFD, 0x01, 0xFF, 0x01, 0xFB, 0x09, 0x00,
  0x01, 0xEA, 0x01, 0xFF, 0x01, 0xFB, 0x0C, 0x00, 0x01, 0xF9, 0x01, 0xFF, 0x01, 0xFB, 0x02,
  0x00, 0x04, 0xFF, 0x02, 0xFD, 0x01, 0xE9, 0x0B, 0x00, 0x01, 0xF9, 0x01, 0xFF, 0x01, 0xFB,
  0x0C, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x0F, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x1C, 0x00, 0x01,
  0xD8, 0x01, 0xF9, 0x01, 0xFF, 0x01, 0xFC, 0x01, 0x00, 0x01, 0xD8, 0x01, 0xF8, 0x01, 0xFF,
  0x01, 0xFC, 0x19, 0x00, 0x01, 0xC5, 0x01, 0xFD, 0x07, 0xFF, 0x01, 0xFE, 0x01, 0xE9, 0x07,
  0x00, 0x08, 0xFF, 0x0B, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x0A, 0x00, 0x01, 0xD8, 0x01, 0xF8,
  0x03, 0xFF, 0x01, 0xFB, 0x01, 0x00, 0x01, 0xF8, 0x01, 0xFF, 0x01, 0xFC, 0x01, 0xE5, 0x18,
  0x00, 0x01, 0xF6, 0x01, 0xFF, 0x01, 0xFC, 0x02, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9,
  0x09, 0x00, 0x01, 0xF3, 0x01, 0xFF, 0x01, 0xFE, 0x04, 0x00, 0x01, 0xF4, 0x02, 0xFF, 0x09,
  0x00, 0x01, 0xF5, 0x01, 0xFF, 0x01, 0xFC, 0x0B, 0x00, 0x01, 0xF5, 0x01, 0xFE, 0x01, 0xE4,
  0x01, 0x00, 0x01, 0xFC, 0x05, 0xFF, 0x01, 0xFD, 0x01, 0xE9, 0x0B, 0x00, 0x01, 0xF6, 0x01,
  0xFF, 0x01, 0xFE, 0x0C, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x0F, 0x00, 0x01, 0xD8, 0x02, 0xFB,
  0x1D, 0x00, 0x01, 0xF9, 0x01, 0xFF, 0x01, 0xFD, 0x01, 0xFF, 0x01, 0xFC, 0x01, 0xFF, 0x01,
  0xFC, 0x01, 0xF0, 0x1A, 0x00, 0x01, 0xFF, 0x01, 0xFB, 0x01, 0xFE, 0x03, 0xFF, 0x01, 0xFB,
  0x01, 0xFD, 0x01, 0xFF, 0x07, 0x00, 0x01, 0xC5, 0x01, 0xFD, 0x06, 0xFF, 0x01, 0xFB, 0x0B,
  0x00, 0x01, 0xD8, 0x02, 0xFB, 0x0C, 0x00, 0x03, 0xFF, 0x01, 0x00, 0x01, 0xF8, 0x01, 0xFF,
  0x01, 0xFD, 0x01, 0xE4, 0x19, 0x00, 0x01, 0xBB, 0x01, 0xFC, 0x02, 0xFF, 0x01, 0x00, 0x01,
  0xF9, 0x01, 0xFD, 0x0A, 0x00, 0x02, 0xFF, 0x05, 0x00, 0x02, 0xFF, 0x0A, 0x00, 0x01, 0xEF,
  0x01, 0xFF, 0x01, 0xFB, 0x0B, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xF0, 0x01, 0xEA, 0x01,
  0xFF, 0x01, 0xFE, 0x03, 0xFF, 0x01, 0xFE, 0x01, 0xFD, 0x01, 0xE9, 0x0A, 0x00, 0x01, 0xF6,
  0x01, 0xFF, 0x01, 0xFB, 0x0D, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x0B, 0x00, 0x02, 0xFF, 0x02,
  0x00, 0x01, 0xD8, 0x02, 0xFB, 0x02, 0x00, 0x02, 0xFF, 0x07, 0x00, 0x04, 0xFF, 0x01, 0xF0,
  0x03, 0x00, 0x02, 0xFE, 0x01, 0xF0, 0x07, 0x00, 0x01, 0xFC, 0x04, 0xFF, 0x01, 0xFD, 0x01,
  0xE9, 0x1C, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x01, 0x00, 0x01, 0xD8, 0x02, 0xFB,
  0x08, 0x00, 0x01, 0xD8, 0x01, 0xFE, 0x06, 0xFF, 0x01, 0xFE, 0x0B, 0x00, 0x01, 0xD8, 0x02,
  0xFB, 0x0F, 0x00, 0x01, 0xF9, 0x01, 0xFF, 0x01, 0xFD, 0x01, 0xE4, 0x1B, 0x00, 0x01, 0xFE,
  0x04, 0xFF, 0x01, 0xFE, 0x01, 0xFF, 0x1D, 0x00, 0x01, 0xF6, 0x01, 0xFF, 0x01, 0xFD, 0x0A,
  0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0x00, 0x01, 0xF2, 0x01, 0xFF, 0x01, 0xFC, 0x03, 0x00,
  0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x0A, 0x00, 0x01, 0xF5, 0x02, 0xFF, 0x0D, 0x00, 0x01,
  0xD8, 0x02, 0xFB, 0x0B, 0x00, 0x01, 0xF2, 0x01, 0xFF, 0x01, 0xFE, 0x02, 0xFF, 0x01, 0xFC,
  0x01, 0xFD, 0x04, 0xFF, 0x01, 0xFD, 0x05, 0x00, 0x01, 0xC5, 0x01, 0xFB, 0x03, 0xFF, 0x01,
  0xFC, 0x01, 0xF0, 0x02, 0x00, 0x01, 0xF7, 0x01, 0xFE, 0x01, 0xE9, 0x06, 0x00, 0x01, 0xF8,
  0x04, 0xFF, 0x01, 0xFC, 0x02, 0x00, 0x02, 0xFF, 0x1A, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01,
  0xE9, 0x01, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x18, 0x00, 0x05, 0xFF, 0x01, 0xFB, 0x01, 0xFC,
  0x01, 0x00, 0x03, 0xFF, 0x0A, 0x00, 0x01, 0xF9, 0x01, 0xFF, 0x01, 0xFD, 0x01, 0xFF, 0x09,
  0x00, 0x0B, 0xFF, 0x09, 0x00, 0x01, 0xFF, 0x01, 0xFE, 0x04, 0xFF, 0x02, 0xFD, 0x1B, 0x00,
  0x01, 0xF9, 0x01, 0xFF, 0x01, 0xFB, 0x0A, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0x00, 0x01,
  0xF2, 0x02, 0xFF, 0x03, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x09, 0x00, 0x01, 0xF9,
  0x01, 0xFF, 0x01, 0xFB, 0x0E, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x0B, 0x00, 0x0C, 0xFF, 0x05,
  0x00, 0x01, 0xFE, 0x01, 0xFF, 0x01, 0xFD, 0x01, 0xFF, 0x01, 0xF8, 0x01, 0xFF, 0x01, 0xFC,
  0x02, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x05, 0x00, 0x01, 0xF9, 0x01, 0xFF, 0x01,
  0xFE, 0x03, 0xFF, 0x01, 0xFD, 0x01, 0xE5, 0x01, 0x00, 0x01, 0xF5, 0x01, 0xFE, 0x01, 0xE9,
  0x19, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x03, 0x00, 0x02, 0xFB, 0x18, 0x00, 0x01, 0xF5, 0x09,
  0xFF, 0x01, 0xFE, 0x01, 0xE9, 0x08, 0x00, 0x01, 0xF8, 0x01, 0xFF, 0x01, 0xFD, 0x01, 0xE5,
  0x0A, 0x00, 0x01, 0xF5, 0x09, 0xFF, 0x01, 0xFE, 0x01, 0xE9, 0x0A, 0x00, 0x01, 0xF9, 0x01,
  0xFD, 0x01, 0xFF, 0x01, 0xFB, 0x01, 0xFF, 0x01, 0xFB, 0x1C, 0x00, 0x01, 0xF7, 0x02, 0xFF,
  0x09, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0x00, 0x01, 0xF2, 0x01, 0xFF, 0x01, 0xFB, 0x02,
  0x00, 0x01, 0xEA, 0x01, 0xFF, 0x01, 0xFD, 0x01, 0xE9, 0x09, 0x00, 0x01, 0xF6, 0x01, 0xFF,
  0x01, 0xFD, 0x0E, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x0D, 0x00, 0x05, 0xFF, 0x01, 0xFC, 0x01,
  0xFF, 0x01, 0xF0, 0x07, 0x00, 0x01, 0xF5, 0x01, 0xFF, 0x01, 0xFB, 0x01, 0x00, 0x01, 0xC5,
  0x01, 0xF9, 0x04, 0xFF, 0x01, 0xFA, 0x06, 0x00, 0x01, 0xF7, 0x01, 0xFF, 0x01, 0xFD, 0x02,
  0x00, 0x01, 0xF6, 0x01, 0xFF, 0x01, 0xFB, 0x01, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9,
  0x18, 0x00, 0x02, 0xFF, 0x01, 0xFE, 0x03, 0xFF, 0x01, 0xFD, 0x01, 0xFE, 0x01, 0xFF, 0x17,
  0x00, 0x01, 0xF9, 0x09, 0xFF, 0x01, 0xFD, 0x01, 0xE9, 0x07, 0x00, 0x01, 0xF8, 0x01, 0xFF,
  0x01, 0xFD, 0x05, 0xFF, 0x07, 0x00, 0x01, 0xF9, 0x09, 0xFF, 0x01, 0xFD, 0x01, 0xE9, 0x09,
  0x00, 0x01, 0xD8, 0x01, 0xFB, 0x01, 0xFC, 0x02, 0x00, 0x01, 0xF7, 0x01, 0xFF, 0x01, 0xFB,
  0x1B, 0x00, 0x01, 0xF6, 0x01, 0xFF, 0x01, 0xFB, 0x09, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01,
  0x00, 0x01, 0xEB, 0x01, 0xFF, 0x01, 0xFE, 0x02, 0xFF, 0x01, 0xFB, 0x01, 0xFF, 0x01, 0xFD,
  0x01, 0xE9, 0x08, 0x00, 0x01, 0xEF, 0x01, 0xFF, 0x01, 0xFB, 0x0F, 0x00, 0x01, 0xD8, 0x02,
  0xFB, 0x0E, 0x00, 0x01, 0xF9, 0x03, 0xFF, 0x01, 0xFB, 0x09, 0x00, 0x01, 0xF5, 0x01, 0xFE,
  0x01, 0xE5, 0x02, 0x00, 0x01, 0xFF, 0x01, 0xFD, 0x03, 0xFF, 0x01, 0xFE, 0x05, 0x00, 0x01,
  0xC5, 0x02, 0xFB, 0x03, 0x00, 0x01, 0xD8, 0x01, 0xF8, 0x02, 0xFF, 0x01, 0xF9, 0x01, 0xFD,
  0x01, 0xE9, 0x17, 0x00, 0x01, 0xC5, 0x09, 0xFF, 0x01, 0xE9, 0x1B, 0x00, 0x02, 0xFB, 0x0B,
  0x00, 0x01, 0xF8, 0x01, 0xFF, 0x01, 0xFD, 0x01, 0xFF, 0x01, 0xF7, 0x04, 0xFF, 0x01, 0xFC,
  0x1B, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x02, 0x00, 0x01, 0xF3, 0x01, 0xFF, 0x01, 0xFC, 0x1C,
  0x00, 0x01, 0xF6, 0x02, 0xFF, 0x08, 0x00, 0x01, 0xF5, 0x01, 0xFF, 0x01, 0xF7, 0x01, 0x00,
  0x01, 0xF5, 0x03, 0xFF, 0x01, 0xFD, 0x01, 0xFF, 0x01, 0xFE, 0x01, 0xE9, 0x08, 0x00, 0x01,
  0xF5, 0x01, 0xFF, 0x01, 0xFC, 0x0F, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x0D, 0x00, 0x01, 0xBB,
  0x01, 0xFC, 0x02, 0xFF, 0x01, 0xF9, 0x01, 0xFF, 0x01, 0xFB, 0x08, 0x00, 0x02, 0xFF, 0x04,
  0x00, 0x01, 0xC5, 0x03, 0xFF, 0x06, 0x00, 0x01, 0xC5, 0x02, 0xFB, 0x04, 0x00, 0x01, 0xFD,
  0x03, 0xFF, 0x01, 0xFD, 0x01, 0xE9, 0x18, 0x00, 0x01, 0xFF, 0x02, 0xFE, 0x03, 0xFF, 0x01,
  0xFC, 0x01, 0xFE, 0x01, 0xFF, 0x07, 0x00, 0x01, 0xD8, 0x01, 0xFB, 0x06, 0xFF, 0x01, 0xFB,
  0x0B, 0x00, 0x01, 0xC5, 0x02, 0xFB, 0x0A, 0x00, 0x01, 0xF8, 0x01, 0xFF, 0x01, 0xFE, 0x01,
  0xE3, 0x01, 0xB5, 0x01, 0xFF, 0x01, 0xFC, 0x02, 0xFF, 0x01, 0xFA, 0x01, 0xFF, 0x01, 0xFE,
  0x1A, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x02, 0x00, 0x01, 0xEF, 0x01, 0xFF, 0x01, 0xFB, 0x1C,
  0x00, 0x01, 0xFE, 0x01, 0xFF, 0x01, 0xFA, 0x08, 0x00, 0x01, 0xF5, 0x01, 0xFF, 0x01, 0xFD,
  0x02, 0x00, 0x03, 0xFF, 0x01, 0xF0, 0x02, 0xFF, 0x08, 0x00, 0x01, 0xEA, 0x01, 0xFF, 0x01,
  0xFB, 0x10, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x0D, 0x00, 0x01, 0xF6, 0x01, 0xFF, 0x01, 0xFB,
  0x01, 0x00, 0x01, 0xB5, 0x01, 0xFD, 0x02, 0xFF, 0x18, 0x00, 0x01, 0xF5, 0x01, 0xFF, 0x01,
  0xFE, 0x04, 0x00, 0x01, 0xF9, 0x02, 0xFF, 0x01, 0xFD, 0x01, 0xE9, 0x19, 0x00, 0x01, 0xF5,
  0x01, 0xFD, 0x01, 0xF0, 0x02, 0x00, 0x02, 0xFB, 0x08, 0x00, 0x01, 0xD8, 0x01, 0xF8, 0x05,
  0xFF, 0x01, 0xFD, 0x01, 0xFB, 0x0B, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x0A, 0x00, 0x01, 0xF9,
  0x01, 0xFE, 0x01, 0xFF, 0x01, 0x00, 0x01, 0xFD, 0x01, 0xFF, 0x01, 0xFA, 0x02, 0x00, 0x01,
  0xF5, 0x02, 0xFF, 0x1A, 0x00, 0x01, 0xC5, 0x02, 0xFB, 0x02, 0x00, 0x01, 0xF8, 0x01, 0xFF,
  0x01, 0xFD, 0x1D, 0x00, 0x01, 0xF7, 0x02, 0xFF, 0x07, 0x00, 0x01, 0xFE, 0x01, 0xFF, 0x01,
  0xFB, 0x10, 0x00, 0x01, 0xF6, 0x01, 0xFF, 0x01, 0xFC, 0x10, 0x00, 0x01, 0xD8, 0x02, 0xFB,
  0x0C, 0x00, 0x01, 0xF9, 0x01, 0xFF, 0x01, 0xFC, 0x03, 0x00, 0x01, 0xF9, 0x01, 0xFF, 0x01,
  0xFB, 0x18, 0x00, 0x01, 0xF9, 0x01, 0xFF, 0x01, 0xFD, 0x01, 0xFF, 0x03, 0x00, 0x01, 0xB7,
  0x02, 0xFF, 0x01, 0xFB, 0x1A, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x01, 0x00, 0x01,
  0xD8, 0x02, 0xFB, 0x1C, 0x00, 0x01, 0xC5, 0x01, 0xFC, 0x01, 0xFB, 0x0A, 0x00, 0x02, 0xFF,
  0x02, 0x00, 0x01, 0xF6, 0x01, 0xFF, 0x01, 0xFC, 0x02, 0x00, 0x01, 0xF6, 0x01, 0xFF, 0x01,
  0xFD, 0x18, 0x00, 0x01, 0xFF, 0x02, 0x00, 0x02, 0xFB, 0x01, 0x00, 0x02, 0xFF, 0x01, 0xFE,
  0x01, 0xE4, 0x1D, 0x00, 0x01, 0xF5, 0x01, 0xFF, 0x01, 0xFB, 0x07, 0x00, 0x01, 0xD8, 0x01,
  0xF9, 0x03, 0xFF, 0x04, 0x00, 0x01, 0xFF, 0x08, 0x00, 0x01, 0xB5, 0x01, 0xFD, 0x01, 0xFC,
  0x11, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x0D, 0x00, 0x02, 0xFF, 0x04, 0x00, 0x01, 0xFF, 0x1A,
  0x00, 0x01, 0xF8, 0x02, 0xFF, 0x01, 0xFE, 0x07, 0xFF, 0x19, 0x00, 0x01, 0xF5, 0x01, 0xFD,
  0x01, 0xE9, 0x01, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x1D, 0x00, 0x02, 0xFF, 0x0E, 0x00, 0x01,
  0xD8, 0x01, 0xF8, 0x04, 0xFF, 0x01, 0xFC, 0x01, 0xF0, 0x17, 0x00, 0x01, 0xFD, 0x01, 0xFF,
  0x01, 0xFE, 0x02, 0xFF, 0x01, 0xFE, 0x03, 0xFF, 0x01, 0xFE, 0x1E, 0x00, 0x01, 0xD8, 0x01,
  0xF8, 0x01, 0xFE, 0x01, 0xFD, 0x07, 0x00, 0x04, 0xFF, 0x01, 0xFE, 0x04, 0xFF, 0x01, 0xFB,
  0x07, 0x00, 0x01, 0xF5, 0x01, 0xFF, 0x01, 0xFC, 0x11, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x2F,
  0x00, 0x01, 0xFF, 0x01, 0xFD, 0x07, 0xFF, 0x01, 0xFC, 0x05, 0x00, 0x0B, 0xFF, 0x09, 0x00,
  0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x01, 0x00, 0x01, 0xD8, 0x01, 0xF9, 0x01, 0xFC, 0x2E,
  0x00, 0x01, 0xFF, 0x01, 0xFA, 0x02, 0xFF, 0x01, 0xFD, 0x01, 0xFF, 0x18, 0x00, 0x01, 0xF9,
  0x01, 0xFC, 0x05, 0xFF, 0x01, 0xFD, 0x01, 0xFF, 0x20, 0x00, 0x01, 0xF9, 0x01, 0xFF, 0x01,
  0xFC, 0x08, 0x00, 0x05, 0xFF, 0x01, 0xFE, 0x03, 0xFF, 0x06, 0x00, 0x01, 0xB7, 0x01, 0xFC,
  0x01, 0xFD, 0x01, 0xE9, 0x11, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x31, 0x00, 0x03, 0xFF, 0x0A,
  0x00, 0x01, 0xF3, 0x0A, 0xFF, 0x01, 0xE9, 0x3F, 0x00, 0x02, 0xFF, 0x1D, 0x00, 0x01, 0xFF,
  0x01, 0xFD, 0x01, 0xFC, 0x23, 0x00, 0x01, 0xC5, 0x01, 0xFB, 0x01, 0xFF, 0x01, 0xFD, 0x16,
  0x00, 0x01, 0xF5, 0x01, 0xFF, 0x01, 0xFB, 0x12, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x3E, 0x00,
  0x0B, 0xFF, 0x60, 0x00, 0x02, 0xFF, 0x24, 0x00, 0x01, 0xFC, 0x01, 0xFF, 0x01, 0xF0, 0x16,
  0x00, 0x02, 0xFF, 0x01, 0xE5, 0x12, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0xFD, 0x00, 0x01, 0xD8,
  0x01, 0xF9, 0x01, 0xFC, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF,
  0x00, 0xFF, 0x00, 0xFF, 0x00, 0x37, 0x00, 0x03, 0xFF, 0x13, 0x00, 0x03, 0xFF, 0x09, 0x00,
  0x06, 0xFF, 0x0C, 0x00, 0x07, 0xFF, 0x09, 0x00, 0x02, 0xFF, 0x15, 0x00, 0x01, 0xFF, 0x01,
  0xF0, 0xA2, 0x00, 0x01, 0xC5, 0x01, 0xFD, 0x02, 0xFF, 0x01, 0xFD, 0x10, 0x00, 0x01, 0xFF,
  0x01, 0xFC, 0x02, 0xFF, 0x01, 0xFA, 0x08, 0x00, 0x01, 0xC5, 0x05, 0xFF, 0x01, 0xFE, 0x01,
  0xE9, 0x0B, 0x00, 0x01, 0xF5, 0x05, 0xFF, 0x01, 0xFA, 0x09, 0x00, 0x01, 0xF9, 0x01, 0xFF,
  0x01, 0xFD, 0x12, 0x00, 0x01, 0xFF, 0x01, 0xFB, 0x01, 0xFF, 0x01, 0xFB, 0x60, 0x00, 0x03,
  0xFF, 0x40, 0x00, 0x02, 0xFF, 0x01, 0xFD, 0x01, 0xFF, 0x01, 0xFC, 0x0F, 0x00, 0x01, 0xF4,
  0x01, 0xFF, 0x01, 0xFE, 0x02, 0xFF, 0x09, 0x00, 0x04, 0xFF, 0x01, 0xFE, 0x01, 0xFD, 0x01,
  0xE9, 0x0B, 0x00, 0x01, 0xF5, 0x01, 0xFE, 0x05, 0xFF, 0x09, 0x00, 0x01, 0xFF, 0x01, 0xFD,
  0x01, 0xFF, 0x01, 0xFC, 0x10, 0x00, 0x01, 0xEF, 0x01, 0xFC, 0x01, 0xFF, 0x01, 0xFD, 0x01,
  0xFF, 0x4F, 0x00, 0x01, 0xD8, 0x01, 0xF9, 0x01, 0xFC, 0x0C, 0x00, 0x01, 0xF8, 0x04, 0xFF,
  0x01, 0xFE, 0x01, 0xFF, 0x0B, 0x00, 0x01, 0xF6, 0x01, 0xFE, 0x01, 0xF9, 0x32, 0x00, 0x01,
  0xF6, 0x01, 0xFF, 0x01, 0xFB, 0x0E, 0x00, 0x01, 0xC5, 0x02, 0xFB, 0x10, 0x00, 0x01, 0xF5,
  0x01, 0xFD, 0x01, 0xE9, 0x0B, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xF0, 0x0E, 0x00, 0x01,
  0xEF, 0x01, 0xFB, 0x01, 0xFF, 0x01, 0xFD, 0x0F, 0x00, 0x01, 0xF7, 0x01, 0xFF, 0x01, 0xFD,
  0x51, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x0C, 0x00, 0x01, 0xF4, 0x01, 0xFE, 0x02, 0xFF, 0x01,
  0xFC, 0x03, 0xFF, 0x0A, 0x00, 0x01, 0xF9, 0x01, 0xFF, 0x01, 0xFC, 0x32, 0x00, 0x01, 0xBB,
  0x01, 0xFC, 0x01, 0xFB, 0x0E, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x10, 0x00, 0x01, 0xF5, 0x01,
  0xFD, 0x01, 0xE9, 0x0B, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x0F, 0x00, 0x01, 0xF9,
  0x01, 0xFF, 0x01, 0xFE, 0x01, 0xF9, 0x0D, 0x00, 0x01, 0xF7, 0x01, 0xFF, 0x01, 0xFC, 0x52,
  0x00, 0x01, 0xD8, 0x02, 0xFB, 0x0C, 0x00, 0x01, 0xFF, 0x04, 0x00, 0x02, 0xFF, 0x01, 0xFC,
  0x0A, 0x00, 0x01, 0xD8, 0x01, 0xF9, 0x01, 0xFE, 0x01, 0xE4, 0x0D, 0x00, 0x01, 0xFB, 0x01,
  0xFD, 0x14, 0x00, 0x02, 0xFB, 0x01, 0xFF, 0x0B, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x0E, 0x00,
  0x01, 0xD8, 0x01, 0xFB, 0x01, 0xFC, 0x10, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x0B,
  0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x10, 0x00, 0x01, 0xF9, 0x01, 0xFF, 0x01, 0xFB,
  0x0C, 0x00, 0x01, 0xB7, 0x01, 0xFD, 0x01, 0xFC, 0x01, 0xF0, 0x52, 0x00, 0x01, 0xD8, 0x02,
  0xFB, 0x11, 0x00, 0x01, 0xC5, 0x02, 0xFB, 0x0B, 0x00, 0x01, 0xF5, 0x01, 0xFF, 0x01, 0xFB,
  0x0C, 0x00, 0x01, 0xBB, 0x01, 0xF9, 0x01, 0xFF, 0x01, 0xFC, 0x12, 0x00, 0x01, 0xFF, 0x01,
  0xFC, 0x01, 0xFF, 0x01, 0xFD, 0x0B, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x0E, 0x00, 0x01, 0xD8,
  0x01, 0xF9, 0x01, 0xFB, 0x10, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x0B, 0x00, 0x01,
  0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x10, 0x00, 0x01, 0xD8, 0x01, 0xF9, 0x01, 0xFC, 0x01, 0xF0,
  0x0B, 0x00, 0x01, 0xF9, 0x01, 0xFF, 0x01, 0xFB, 0x0E, 0x00, 0x01, 0xFE, 0x02, 0xFF, 0x01,
  0xFE, 0x0D, 0x00, 0x01, 0xFE, 0x02, 0xFF, 0x01, 0xFE, 0x30, 0x00, 0x01, 0xD8, 0x02, 0xFB,
  0x11, 0x00, 0x01, 0xB7, 0x01, 0xFC, 0x01, 0xFB, 0x0B, 0x00, 0x01, 0xBB, 0x02, 0xFF, 0x0D,
  0x00, 0x01, 0xC5, 0x01, 0xF9, 0x01, 0xFF, 0x01, 0xFD, 0x10, 0x00, 0x01, 0xFF, 0x01, 0xFD,
  0x01, 0xFF, 0x01, 0xFE, 0x0C, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x0E, 0x00, 0x01, 0xEA, 0x01,
  0xFF, 0x01, 0xFB, 0x10, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x0B, 0x00, 0x01, 0xF5,
  0x01, 0xFD, 0x01, 0xE9, 0x11, 0x00, 0x01, 0xF6, 0x02, 0xFF, 0x0B, 0x00, 0x01, 0xF6, 0x02,
  0xFF, 0x0E, 0x00, 0x01, 0xF5, 0x02, 0xFF, 0x01, 0xFB, 0x0D, 0x00, 0x01, 0xF5, 0x02, 0xFF,
  0x01, 0xFB, 0x30, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x11, 0x00, 0x01, 0xF5, 0x01, 0xFF, 0x01,
  0xFC, 0x1C, 0x00, 0x01, 0xD8, 0x01, 0xF6, 0x01, 0xFF, 0x01, 0xFC, 0x0E, 0x00, 0x03, 0xFF,
  0x01, 0xFE, 0x0D, 0x00, 0x01, 0xC5, 0x01, 0xFB, 0x01, 0xFE, 0x01, 0xFF, 0x0D, 0x00, 0x01,
  0xFA, 0x01, 0xFF, 0x01, 0xFA, 0x10, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x0B, 0x00,
  0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x11, 0x00, 0x01, 0xF5, 0x02, 0xFF, 0x0B, 0x00, 0x01,
  0xF4, 0x01, 0xFD, 0x01, 0xE9, 0x0E, 0x00, 0x01, 0xF5, 0x02, 0xFF, 0x01, 0xFB, 0x0D, 0x00,
  0x01, 0xF5, 0x02, 0xFF, 0x01, 0xFB, 0x30, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x10, 0x00, 0x01,
  0xFE, 0x01, 0xFF, 0x01, 0xFD, 0x01, 0xE5, 0x1E, 0x00, 0x01, 0xF7, 0x01, 0xFF, 0x01, 0xFC,
  0x01, 0xE9, 0x0B, 0x00, 0x03, 0xFF, 0x01, 0xFE, 0x0F, 0x00, 0x01, 0xF8, 0x04, 0xFF, 0x09,
  0x00, 0x01, 0xFF, 0x01, 0xFD, 0x01, 0xFF, 0x01, 0xFE, 0x01, 0xFF, 0x10, 0x00, 0x01, 0xF5,
  0x01, 0xFD, 0x01, 0xE9, 0x0B, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x11, 0x00, 0x01,
  0xF7, 0x02, 0xFF, 0x0B, 0x00, 0x01, 0xF4, 0x01, 0xFB, 0x0F, 0x00, 0x04, 0xFF, 0x0D, 0x00,
  0x04, 0xFF, 0x30, 0x00, 0x01, 0xD8, 0x01, 0xFA, 0x01, 0xFE, 0x0F, 0x00, 0x01, 0xF6, 0x02,
  0xFF, 0x01, 0xFE, 0x20, 0x00, 0x01, 0xF8, 0x01, 0xFF, 0x01, 0xFC, 0x01, 0xFF, 0x09, 0x00,
  0x01, 0xFC, 0x02, 0xFF, 0x01, 0xFE, 0x10, 0x00, 0x01, 0xBB, 0x03, 0xFF, 0x01, 0xFA, 0x08,
  0x00, 0x01, 0xC5, 0x01, 0xFD, 0x02, 0xFF, 0x01, 0xFA, 0x11, 0x00, 0x01, 0xF5, 0x01, 0xFD,
  0x01, 0xE9, 0x0B, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x11, 0x00, 0x01, 0xEF, 0x02,
  0xFF, 0x0B, 0x00, 0x01, 0xF4, 0x01, 0xFB, 0x66, 0x00, 0x01, 0xF5, 0x01, 0xFF, 0x01, 0xFC,
  0x22, 0x00, 0x01, 0xF7, 0x01, 0xFF, 0x01, 0xFB, 0x08, 0x00, 0x01, 0xC5, 0x01, 0xFC, 0x02,
  0xFF, 0x11, 0x00, 0x01, 0xF6, 0x01, 0xFF, 0x01, 0xFD, 0x02, 0xFF, 0x09, 0x00, 0x04, 0xFF,
  0x01, 0xFC, 0x10, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x0B, 0x00, 0x01, 0xF5, 0x01,
  0xFD, 0x01, 0xE9, 0x11, 0x00, 0x01, 0xF9, 0x02, 0xFF, 0x0B, 0x00, 0x01, 0xF4, 0x01, 0xFC,
  0x01, 0xF0, 0x64, 0x00, 0x01, 0xC5, 0x02, 0xFB, 0x22, 0x00, 0x01, 0xB7, 0x01, 0xFA, 0x01,
  0xFF, 0x01, 0xFB, 0x08, 0x00, 0x01, 0xD8, 0x01, 0xFB, 0x02, 0xFF, 0x10, 0x00, 0x01, 0xC5,
  0x02, 0xFB, 0x0E, 0x00, 0x01, 0xF4, 0x01, 0xFF, 0x01, 0xFB, 0x10, 0x00, 0x01, 0xF5, 0x01,
  0xFD, 0x01, 0xE9, 0x0B, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x11, 0x00, 0x01, 0xF5,
  0x02, 0xFF, 0x0B, 0x00, 0x01, 0xF6, 0x01, 0xFD, 0x01, 0xE9, 0x64, 0x00, 0x01, 0xD8, 0x01,
  0xF8, 0x01, 0xFC, 0x21, 0x00, 0x01, 0xEF, 0x01, 0xFB, 0x01, 0xFF, 0x01, 0xFC, 0x0A, 0x00,
  0x03, 0xFF, 0x01, 0xFD, 0x0F, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x0E, 0x00, 0x01, 0xB7, 0x01,
  0xFD, 0x01, 0xFB, 0x10, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x0B, 0x00, 0x01, 0xF5,
  0x01, 0xFD, 0x01, 0xE9, 0x11, 0x00, 0x01, 0xF4, 0x02, 0xFF, 0x0B, 0x00, 0x01, 0xF5, 0x01,
  0xFF, 0x01, 0xFB, 0x87, 0x00, 0x01, 0xFF, 0x01, 0xFC, 0x01, 0xFF, 0x01, 0xFC, 0x0C, 0x00,
  0x02, 0xFD, 0x01, 0xFF, 0x01, 0xFC, 0x0E, 0x00, 0x01, 0xD8, 0x01, 0xFB, 0x01, 0xFC, 0x0E,
  0x00, 0x01, 0xD8, 0x02, 0xFB, 0x10, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x0B, 0x00,
  0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x10, 0x00, 0x01, 0xBB, 0x01, 0xFC, 0x01, 0xFB, 0x0C,
  0x00, 0x01, 0xF7, 0x01, 0xFF, 0x01, 0xFB, 0x1F, 0x00, 0x01, 0xF9, 0x02, 0xFF, 0x01, 0xFC,
  0x0D, 0x00, 0x01, 0xF9, 0x02, 0xFF, 0x01, 0xFC, 0x52, 0x00, 0x02, 0xFD, 0x01, 0xFF, 0x01,
  0xFD, 0x0E, 0x00, 0x01, 0xFF, 0x01, 0xFC, 0x01, 0xFF, 0x01, 0xFC, 0x0D, 0x00, 0x01, 0xD8,
  0x02, 0xFB, 0x0E, 0x00, 0x01, 0xD8, 0x01, 0xFB, 0x01, 0xFC, 0x10, 0x00, 0x01, 0xF5, 0x01,
  0xFD, 0x01, 0xE9, 0x0B, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x10, 0x00, 0x01, 0xF5,
  0x01, 0xFF, 0x01, 0xFB, 0x0C, 0x00, 0x01, 0xBB, 0x01, 0xFC, 0x01, 0xFD, 0x01, 0xE5, 0x0D,
  0x00, 0x04, 0xFF, 0x0D, 0x00, 0x01, 0xF5, 0x02, 0xFF, 0x01, 0xFB, 0x0D, 0x00, 0x01, 0xF5,
  0x02, 0xFF, 0x01, 0xFB, 0x0D, 0x00, 0x04, 0xFF, 0x1F, 0x00, 0x03, 0xFF, 0x01, 0xF0, 0x1D,
  0x00, 0x03, 0xFF, 0x01, 0xFD, 0x10, 0x00, 0x01, 0xEF, 0x01, 0xFC, 0x01, 0xFF, 0x01, 0xFC,
  0x0C, 0x00, 0x01, 0xBB, 0x01, 0xFC, 0x01, 0xFB, 0x0E, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x10,
  0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x0B, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9,
  0x0F, 0x00, 0x01, 0xF9, 0x01, 0xFF, 0x01, 0xFE, 0x01, 0xF9, 0x0D, 0x00, 0x01, 0xF7, 0x01,
  0xFF, 0x01, 0xFB, 0x0D, 0x00, 0x01, 0xF5, 0x02, 0xFF, 0x01, 0xFB, 0x0D, 0x00, 0x01, 0xF5,
  0x02, 0xFF, 0x01, 0xFB, 0x0D, 0x00, 0x01, 0xF5, 0x02, 0xFF, 0x01, 0xFB, 0x0D, 0x00, 0x01,
  0xF5, 0x02, 0xFF, 0x01, 0xFB, 0x1E, 0x00, 0x01, 0xD8, 0x01, 0xF9, 0x02, 0xFF, 0x01, 0xFB,
  0x1C, 0x00, 0x01, 0xEF, 0x02, 0xFF, 0x01, 0xFD, 0x12, 0x00, 0x02, 0xFB, 0x01, 0xFF, 0x01,
  0xFA, 0x0B, 0x00, 0x01, 0xF6, 0x01, 0xFF, 0x01, 0xFB, 0x0E, 0x00, 0x01, 0xC5, 0x02, 0xFB,
  0x10, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x0B, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01,
  0xF0, 0x0E, 0x00, 0x01, 0xB5, 0x01, 0xFB, 0x01, 0xFF, 0x01, 0xFC, 0x0E, 0x00, 0x01, 0xD8,
  0x01, 0xF8, 0x01, 0xFF, 0x01, 0xFD, 0x0C, 0x00, 0x01, 0xF5, 0x02, 0xFF, 0x01, 0xFB, 0x0D,
  0x00, 0x02, 0xFF, 0x01, 0xFD, 0x01, 0xFB, 0x0D, 0x00, 0x02, 0xFF, 0x01, 0xFD, 0x01, 0xFB,
  0x0D, 0x00, 0x01, 0xF5, 0x02, 0xFF, 0x01, 0xFB, 0x1E, 0x00, 0x01, 0xC5, 0x01, 0xFB, 0x02,
  0xFF, 0x01, 0xFB, 0x1D, 0x00, 0x01, 0xF8, 0x01, 0xFD, 0x14, 0x00, 0x01, 0xB7, 0x01, 0xFA,
  0x01, 0xFF, 0x09, 0x00, 0x02, 0xFF, 0x01, 0xFC, 0x01, 0xFF, 0x01, 0xFD, 0x0F, 0x00, 0x01,
  0xF6, 0x04, 0xFF, 0x09, 0x00, 0x04, 0xFF, 0x01, 0xFC, 0x01, 0xFD, 0x01, 0xE9, 0x0B, 0x00,
  0x01, 0xF5, 0x01, 0xFE, 0x05, 0xFF, 0x09, 0x00, 0x01, 0xFF, 0x01, 0xFC, 0x01, 0xFF, 0x01,
  0xFC, 0x10, 0x00, 0x01, 0xFF, 0x01, 0xFD, 0x01, 0xFF, 0x01, 0xFE, 0x01, 0xFF, 0x0A, 0x00,
  0x01, 0xF5, 0x02, 0xFF, 0x01, 0xFC, 0x0F, 0x00, 0x02, 0xFB, 0x0F, 0x00, 0x02, 0xFB, 0x0D,
  0x00, 0x01, 0xF5, 0x02, 0xFF, 0x01, 0xFC, 0x1F, 0x00, 0x01, 0xF8, 0x03, 0xFF, 0x3E, 0x00,
  0x01, 0xC5, 0x01, 0xFD, 0x02, 0xFF, 0x01, 0xFD, 0x10, 0x00, 0x01, 0xFF, 0x01, 0xFC, 0x02,
  0xFF, 0x01, 0xFA, 0x08, 0x00, 0x01, 0xC5, 0x05, 0xFF, 0x01, 0xFE, 0x01, 0xE9, 0x0B, 0x00,
  0x01, 0xF5, 0x05, 0xFF, 0x01, 0xFA, 0x09, 0x00, 0x01, 0xFB, 0x01, 0xFF, 0x01, 0xFD, 0x12,
  0x00, 0x01, 0xFF, 0x01, 0xFC, 0x01, 0xFF, 0x01, 0xFB, 0x1C, 0x00, 0x01, 0xFE, 0x01, 0xFF,
  0x01, 0xFC, 0x0E, 0x00, 0x01, 0xFE, 0x01, 0xFF, 0x01, 0xFC, 0x31, 0x00, 0x02, 0xFF, 0x40,
  0x00, 0x03, 0xFF, 0x13, 0x00, 0x03, 0xFF, 0x09, 0x00, 0x06, 0xFF, 0x0C, 0x00, 0x07, 0xFF,
  0x09, 0x00, 0x02, 0xFF, 0x14, 0x00, 0x01, 0xD8, 0x01, 0xFF, 0x01, 0xE9, 0x1B, 0x00, 0x01,
  0xFE, 0x02, 0xFF, 0x01, 0xFD, 0x0D, 0x00, 0x01, 0xFE, 0x02, 0xFF, 0x01, 0xFD, 0xEB, 0x00,
  0x01, 0xF5, 0x02, 0xFF, 0x0E, 0x00, 0x01, 0xF5, 0x02, 0xFF, 0xEC, 0x00, 0x01, 0xD8, 0x01,
  0xFF, 0x0F, 0x00, 0x01, 0xD8, 0x01, 0xFF, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00,
  0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0x80, 0x00, 0x02, 0xFF, 0x0E, 0x00, 0x03,
  0xFF, 0x0E, 0x00, 0x01, 0xD8, 0x02, 0xFF, 0x20, 0x00, 0x01, 0xFF, 0x01, 0xF0, 0x40, 0x00,
  0x04, 0xFF, 0x53, 0x00, 0x01, 0xFF, 0x01, 0xFD, 0x01, 0xFB, 0x0D, 0x00, 0x01, 0xF5, 0x01,
  0xFD, 0x01, 0xE9, 0x01, 0x00, 0x01, 0xD8, 0x01, 0xF9, 0x01, 0xFC, 0x0A, 0x00, 0x04, 0xFF,
  0x01, 0xFD, 0x01, 0xE5, 0x0A, 0x00, 0x01, 0xD8, 0x01, 0xFE, 0x03, 0xFF, 0x01, 0xFE, 0x01,
  0xFF, 0x0B, 0x00, 0x04, 0xFF, 0x01, 0xFD, 0x01, 0xFF, 0x09, 0x00, 0x01, 0xF4, 0x08, 0xFF,
  0x01, 0xFB, 0x0B, 0x00, 0x01, 0xF4, 0x01, 0xFE, 0x01, 0xFF, 0x0A, 0x00, 0x01, 0xD8, 0x01,
  0xF9, 0x06, 0xFF, 0x01, 0xFC, 0x0A, 0x00, 0x01, 0xF9, 0x01, 0xFE, 0x01, 0xFD, 0x01, 0x00,
  0x01, 0xD8, 0x01, 0xF9, 0x01, 0xFC, 0x08, 0x00, 0x01, 0xD8, 0x01, 0xF9, 0x06, 0xFF, 0x01,
  0xFC, 0x08, 0x00, 0x01, 0xD8, 0x01, 0xF8, 0x04, 0xFF, 0x01, 0xFE, 0x01, 0xFF, 0x0D, 0x00,
  0x01, 0xFF, 0x01, 0xFB, 0x01, 0xFD, 0x01, 0xE9, 0x40, 0x00, 0x01, 0xF6, 0x01, 0xFF, 0x01,
  0xFB, 0x0D, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x01, 0x00, 0x01, 0xD8, 0x02, 0xFB,
  0x09, 0x00, 0x01, 0xFD, 0x03, 0xFF, 0x01, 0xFD, 0x01, 0xFF, 0x01, 0xFB, 0x0A, 0x00, 0x01,
  0xF4, 0x01, 0xFF, 0x01, 0xFE, 0x01, 0xFF, 0x01, 0xFD, 0x01, 0xFF, 0x01, 0xFB, 0x0A, 0x00,
  0x01, 0xF9, 0x05, 0xFF, 0x01, 0xFD, 0x01, 0xE9, 0x08, 0x00, 0x01, 0xF7, 0x01, 0xFE, 0x08,
  0xFF, 0x0A, 0x00, 0x01, 0xFC, 0x01, 0xFF, 0x01, 0xFB, 0x0B, 0x00, 0x01, 0xD8, 0x01, 0xFB,
  0x06, 0xFF, 0x01, 0xFC, 0x0A, 0x00, 0x01, 0xF6, 0x01, 0xFD, 0x01, 0xE9, 0x01, 0x00, 0x01,
  0xD8, 0x02, 0xFB, 0x08, 0x00, 0x01, 0xD8, 0x01, 0xF8, 0x06, 0xFF, 0x01, 0xFB, 0x08, 0x00,
  0x01, 0xD8, 0x01, 0xFB, 0x05, 0xFF, 0x01, 0xFE, 0x01, 0xFD, 0x0B, 0x00, 0x03, 0xFF, 0x01,
  0xFD, 0x01, 0xE9, 0x40, 0x00, 0x01, 0xFD, 0x01, 0xFF, 0x01, 0xFB, 0x0D, 0x00, 0x01, 0xF5,
  0x01, 0xFD, 0x01, 0xE9, 0x01, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x09, 0x00, 0x01, 0xF5, 0x01,
  0xFF, 0x01, 0xFE, 0x01, 0x00, 0x01, 0xC5, 0x01, 0xF8, 0x02, 0xFF, 0x08, 0x00, 0x01, 0xF9,
  0x01, 0xFF, 0x01, 0xFC, 0x01, 0xE9, 0x02, 0x00, 0x01, 0xF5, 0x01, 0xFF, 0x01, 0xFE, 0x08,
  0x00, 0x01, 0xD8, 0x01, 0xF9, 0x01, 0xFE, 0x01, 0xFF, 0x02, 0x00, 0x01, 0xFC, 0x01, 0xFF,
  0x01, 0xFB, 0x0F, 0x00, 0x01, 0xF4, 0x01, 0xFD, 0x01, 0xE5, 0x0A, 0x00, 0x01, 0xF6, 0x01,
  0xFF, 0x01, 0xFB, 0x0B, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x10, 0x00, 0x01, 0xF5, 0x01, 0xFB,
  0x02, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x0D, 0x00, 0x01, 0xEF, 0x01, 0xFD, 0x01, 0xFE, 0x01,
  0xFF, 0x0E, 0x00, 0x01, 0xFA, 0x01, 0xFF, 0x01, 0xFB, 0x09, 0x00, 0x01, 0xC5, 0x01, 0xFC,
  0x01, 0xFF, 0x01, 0xFE, 0x01, 0xFF, 0x01, 0xFD, 0x01, 0xE9, 0x40, 0x00, 0x01, 0xFD, 0x01,
  0xFF, 0x01, 0xFB, 0x0D, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x01, 0x00, 0x01, 0xD8,
  0x02, 0xFB, 0x08, 0x00, 0x01, 0xD8, 0x01, 0xF9, 0x01, 0xFB, 0x03, 0x00, 0x01, 0xF5, 0x01,
  0xFF, 0x01, 0xFC, 0x08, 0x00, 0x01, 0xFE, 0x01, 0xFF, 0x01, 0xFD, 0x03, 0x00, 0x01, 0xF9,
  0x01, 0xFF, 0x01, 0xFB, 0x08, 0x00, 0x01, 0xFD, 0x01, 0xFF, 0x01, 0xFC, 0x03, 0x00, 0x01,
  0xB7, 0x01, 0xFD, 0x01, 0xFB, 0x0E, 0x00, 0x01, 0xFB, 0x01, 0xFF, 0x01, 0xFB, 0x0A, 0x00,
  0x01, 0xF6, 0x01, 0xFF, 0x01, 0xFC, 0x0C, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x0F, 0x00, 0x01,
  0xD8, 0x02, 0xFB, 0x02, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x0D, 0x00, 0x01, 0xF5, 0x01, 0xFF,
  0x01, 0xFE, 0x0F, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x08, 0x00, 0x01, 0xD8, 0x01, 0xF9, 0x01,
  0xFF, 0x01, 0xFD, 0x01, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x40, 0x00, 0x01, 0xFD,
  0x01, 0xFF, 0x01, 0xFB, 0x0D, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x01, 0x00, 0x01,
  0xD8, 0x02, 0xFB, 0x08, 0x00, 0x01, 0xD8, 0x01, 0xFB, 0x01, 0xFC, 0x02, 0x00, 0x01, 0xF9,
  0x02, 0xFF, 0x01, 0xFB, 0x08, 0x00, 0x01, 0xF5, 0x01, 0xFF, 0x01, 0xFE, 0x03, 0x00, 0x01,
  0xBB, 0x01, 0xFC, 0x01, 0xFB, 0x08, 0x00, 0x01, 0xF6, 0x01, 0xFF, 0x01, 0xFB, 0x03, 0x00,
  0x01, 0xD8, 0x01, 0xF9, 0x01, 0xFB, 0x0E, 0x00, 0x01, 0xF5, 0x01, 0xFF, 0x01, 0xFD, 0x0A,
  0x00, 0x01, 0xF5, 0x01, 0xFF, 0x01, 0xF4, 0x0C, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x0F, 0x00,
  0x02, 0xFF, 0x01, 0xFB, 0x02, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x0C, 0x00, 0x01, 0xF9, 0x01,
  0xFF, 0x01, 0xFB, 0x10, 0x00, 0x01, 0xB5, 0x01, 0xFD, 0x01, 0xFB, 0x09, 0x00, 0x02, 0xFF,
  0x02, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x0A, 0x00, 0x01, 0xFC, 0x07, 0xFF, 0x08,
  0x00, 0x01, 0xFF, 0x01, 0xFE, 0x01, 0xE5, 0x04, 0x00, 0x01, 0xFD, 0x01, 0xFE, 0x01, 0xFD,
  0x07, 0x00, 0x01, 0xFB, 0x02, 0xFF, 0x04, 0x00, 0x01, 0xFC, 0x01, 0xFF, 0x01, 0xFE, 0x0B,
  0x00, 0x01, 0xFD, 0x01, 0xFF, 0x01, 0xFB, 0x0D, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9,
  0x01, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x08, 0x00, 0x01, 0xD8, 0x01, 0xFB, 0x01, 0xFC, 0x02,
  0x00, 0x01, 0xF8, 0x02, 0xFF, 0x01, 0xFB, 0x08, 0x00, 0x01, 0xF5, 0x02, 0xFF, 0x03, 0x00,
  0x01, 0xD8, 0x01, 0xF9, 0x01, 0xFB, 0x08, 0x00, 0x01, 0xEF, 0x01, 0xFD, 0x01, 0xFB, 0x03,
  0x00, 0x01, 0xEA, 0x01, 0xFF, 0x01, 0xFB, 0x0E, 0x00, 0x01, 0xF6, 0x01, 0xFD, 0x01, 0xF0,
  0x09, 0x00, 0x01, 0xFD, 0x01, 0xFF, 0x01, 0xFD, 0x03, 0xFF, 0x0A, 0x00, 0x01, 0xD8, 0x01,
  0xFB, 0x01, 0xFC, 0x01, 0x00, 0x03, 0xFF, 0x0B, 0x00, 0x01, 0xFD, 0x01, 0xFF, 0x01, 0xFB,
  0x02, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x0B, 0x00, 0x01, 0xFB, 0x01, 0xFD, 0x01, 0xFC, 0x11,
  0x00, 0x01, 0xF8, 0x01, 0xFF, 0x01, 0xFB, 0x0D, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9,
  0x0A, 0x00, 0x01, 0xF3, 0x06, 0xFF, 0x01, 0xFD, 0x08, 0x00, 0x01, 0xF6, 0x01, 0xFF, 0x01,
  0xFB, 0x04, 0x00, 0x01, 0xF5, 0x01, 0xFE, 0x01, 0xE5, 0x07, 0x00, 0x01, 0xF9, 0x01, 0xFF,
  0x01, 0xFC, 0x03, 0x00, 0x01, 0xF9, 0x01, 0xFF, 0x01, 0xFD, 0x01, 0xE5, 0x0B, 0x00, 0x01,
  0xFD, 0x01, 0xFF, 0x01, 0xFB, 0x0D, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x01, 0x00,
  0x01, 0xD8, 0x02, 0xFB, 0x08, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x01, 0x00, 0x01, 0xEA, 0x02,
  0xFF, 0x01, 0xF9, 0x01, 0xFC, 0x08, 0x00, 0x01, 0xF9, 0x02, 0xFF, 0x03, 0x00, 0x02, 0xFF,
  0x01, 0xFB, 0x09, 0x00, 0x01, 0xF9, 0x01, 0xFE, 0x01, 0xFF, 0x02, 0x00, 0x01, 0xF9, 0x01,
  0xFF, 0x01, 0xFD, 0x0D, 0x00, 0x01, 0xF9, 0x01, 0xFF, 0x01, 0xFC, 0x0A, 0x00, 0x01, 0xF5,
  0x05, 0xFF, 0x01, 0xFD, 0x09, 0x00, 0x01, 0xD8, 0x01, 0xF9, 0x01, 0xFF, 0x01, 0xFC, 0x03,
  0xFF, 0x01, 0xFD, 0x0A, 0x00, 0x01, 0xF9, 0x02, 0xFF, 0x02, 0x00, 0x01, 0xD8, 0x02, 0xFB,
  0x0B, 0x00, 0x01, 0xF5, 0x01, 0xFF, 0x01, 0xFC, 0x02, 0xFF, 0x0E, 0x00, 0x01, 0xB5, 0x01,
  0xFD, 0x01, 0xFE, 0x01, 0xE4, 0x0D, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x0A, 0x00,
  0x05, 0xFF, 0x01, 0xFC, 0x01, 0xFD, 0x01, 0xE9, 0x08, 0x00, 0x01, 0xF9, 0x01, 0xFF, 0x01,
  0xFB, 0x03, 0x00, 0x01, 0xBB, 0x01, 0xFC, 0x01, 0xFB, 0x09, 0x00, 0x01, 0xF7, 0x01, 0xFF,
  0x01, 0xFC, 0x01, 0x00, 0x01, 0xD8, 0x01, 0xF9, 0x01, 0xFF, 0x01, 0xFE, 0x0C, 0x00, 0x01,
  0xFD, 0x01, 0xFF, 0x01, 0xFB, 0x0D, 0x00, 0x02, 0xFD, 0x01, 0xE9, 0x01, 0x00, 0x01, 0xD8,
  0x01, 0xFA, 0x01, 0xFE, 0x08, 0x00, 0x01, 0xF9, 0x01, 0xFF, 0x01, 0xFB, 0x01, 0x00, 0x01,
  0xF6, 0x01, 0xFD, 0x01, 0xFF, 0x01, 0xF8, 0x01, 0xFB, 0x08, 0x00, 0x01, 0xF9, 0x01, 0xFF,
  0x01, 0xFB, 0x03, 0x00, 0x01, 0xF6, 0x01, 0xFF, 0x01, 0xFB, 0x09, 0x00, 0x01, 0xFC, 0x03,
  0xFF, 0x01, 0xFD, 0x01, 0xFF, 0x01, 0xFC, 0x0E, 0x00, 0x01, 0xF5, 0x01, 0xFF, 0x01, 0xFB,
  0x0A, 0x00, 0x01, 0xF6, 0x01, 0xFF, 0x01, 0xFE, 0x04, 0xFF, 0x01, 0xFD, 0x08, 0x00, 0x01,
  0xC5, 0x01, 0xFC, 0x01, 0xFF, 0x01, 0xFD, 0x04, 0xFF, 0x01, 0xFC, 0x09, 0x00, 0x01, 0xF6,
  0x02, 0xFF, 0x02, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x0B, 0x00, 0x01, 0xF5, 0x03, 0xFF, 0x01,
  0xFD, 0x01, 0xE4, 0x0D, 0x00, 0x01, 0xF5, 0x01, 0xFF, 0x01, 0xFB, 0x0E, 0x00, 0x01, 0xF5,
  0x01, 0xFD, 0x01, 0xE9, 0x0E, 0x00, 0x01, 0xF5, 0x01, 0xFF, 0x01, 0xFC, 0x09, 0x00, 0x01,
  0xC5, 0x02, 0xFB, 0x03, 0x00, 0x01, 0xF9, 0x01, 0xFF, 0x01, 0xFB, 0x09, 0x00, 0x01, 0xEF,
  0x01, 0xFF, 0x01, 0xFE, 0x01, 0xE9, 0x01, 0xF5, 0x01, 0xFF, 0x01, 0xFB, 0x0D, 0x00, 0x01,
  0xC5, 0x01, 0xFB, 0x01, 0xFC, 0x1C, 0x00, 0x01, 0xF6, 0x01, 0xFF, 0x01, 0xFA, 0x01, 0xB7,
  0x01, 0xFF, 0x01, 0xFA, 0x01, 0x00, 0x01, 0xF9, 0x01, 0xFB, 0x08, 0x00, 0x01, 0xEA, 0x01,
  0xFF, 0x01, 0xFD, 0x01, 0xFF, 0x01, 0x00, 0x01, 0xFF, 0x01, 0xF8, 0x01, 0xFF, 0x01, 0xFD,
  0x09, 0x00, 0x01, 0xEA, 0x05, 0xFF, 0x01, 0xFB, 0x0E, 0x00, 0x01, 0xF8, 0x01, 0xFC, 0x0A,
  0x00, 0x01, 0xD8, 0x01, 0xF9, 0x01, 0xFE, 0x01, 0xFF, 0x02, 0x00, 0x01, 0xF9, 0x01, 0xFF,
  0x01, 0xFB, 0x09, 0x00, 0x01, 0xFF, 0x01, 0xFE, 0x01, 0xE9, 0x02, 0x00, 0x01, 0xF9, 0x01,
  0xFF, 0x01, 0xFB, 0x09, 0x00, 0x01, 0xF6, 0x01, 0xFD, 0x01, 0xE9, 0x02, 0x00, 0x01, 0xD8,
  0x02, 0xFB, 0x0B, 0x00, 0x03, 0xFF, 0x01, 0xFA, 0x01, 0xFF, 0x01, 0xFB, 0x0C, 0x00, 0x01,
  0xFD, 0x01, 0xFF, 0x01, 0xFD, 0x01, 0xF0, 0x0E, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9,
  0x0D, 0x00, 0x01, 0xB5, 0x01, 0xFD, 0x01, 0xFB, 0x0B, 0x00, 0x01, 0xF6, 0x01, 0xFE, 0x01,
  0xFD, 0x02, 0x00, 0x01, 0xF6, 0x01, 0xFF, 0x01, 0xFD, 0x0A, 0x00, 0x01, 0xF5, 0x03, 0xFF,
  0x01, 0xFD, 0x01, 0xE9, 0x0D, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x1C, 0x00, 0x01, 0xEF, 0x01,
  0xFD, 0x01, 0xFF, 0x01, 0xFB, 0x01, 0xFE, 0x01, 0xE4, 0x01, 0xD8, 0x02, 0xFB, 0x09, 0x00,
  0x01, 0xF7, 0x06, 0xFF, 0x01, 0xFC, 0x08, 0x00, 0x01, 0xD8, 0x01, 0xF7, 0x04, 0xFF, 0x01,
  0xF9, 0x01, 0xFF, 0x01, 0xFC, 0x0C, 0x00, 0x01, 0xF3, 0x01, 0xFF, 0x01, 0xFB, 0x0A, 0x00,
  0x01, 0xD8, 0x01, 0xF9, 0x01, 0xFB, 0x04, 0x00, 0x01, 0xF7, 0x01, 0xFD, 0x01, 0xE9, 0x0D,
  0x00, 0x01, 0xD8, 0x01, 0xF9, 0x01, 0xFB, 0x09, 0x00, 0x01, 0xF5, 0x01, 0xFB, 0x04, 0x00,
  0x02, 0xFB, 0x0E, 0x00, 0x01, 0xB7, 0x01, 0xFD, 0x01, 0xFB, 0x0C, 0x00, 0x01, 0xF5, 0x01,
  0xFF, 0x01, 0xFC, 0x0F, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x0D, 0x00, 0x01, 0xF5,
  0x02, 0xFF, 0x0B, 0x00, 0x01, 0xF9, 0x01, 0xFF, 0x01, 0xFB, 0x02, 0x00, 0x01, 0xF7, 0x01,
  0xFE, 0x01, 0xE4, 0x0B, 0x00, 0x01, 0xF8, 0x02, 0xFF, 0x01, 0xFE, 0x0E, 0x00, 0x01, 0xD8,
  0x01, 0xF8, 0x01, 0xFC, 0x1C, 0x00, 0x01, 0xD8, 0x01, 0xF9, 0x01, 0xFF, 0x01, 0xFC, 0x01,
  0xFB, 0x01, 0x00, 0x01, 0xC5, 0x02, 0xFB, 0x09, 0x00, 0x01, 0xD8, 0x05, 0xFF, 0x01, 0xFC,
  0x09, 0x00, 0x01, 0xF6, 0x01, 0xFF, 0x01, 0xFB, 0x03, 0x00, 0x01, 0xEA, 0x01, 0xFF, 0x01,
  0xFB, 0x0C, 0x00, 0x01, 0xF5, 0x02, 0xFF, 0x0A, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x04, 0x00,
  0x01, 0xF4, 0x01, 0xFD, 0x01, 0xE9, 0x0E, 0x00, 0x01, 0xF4, 0x01, 0xFD, 0x01, 0xE9, 0x07,
  0x00, 0x01, 0xC5, 0x01, 0xFB, 0x05, 0xFF, 0x01, 0xFD, 0x02, 0xFF, 0x01, 0xF0, 0x0D, 0x00,
  0x01, 0xF6, 0x01, 0xFD, 0x01, 0xE9, 0x0A, 0x00, 0x01, 0xFE, 0x01, 0xFF, 0x01, 0xFB, 0x10,
  0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x0C, 0x00, 0x01, 0xF6, 0x01, 0xFF, 0x01, 0xFB,
  0x0C, 0x00, 0x01, 0xEF, 0x01, 0xFF, 0x01, 0xFB, 0x01, 0x00, 0x01, 0xB7, 0x01, 0xFC, 0x01,
  0xFB, 0x0C, 0x00, 0x01, 0xF5, 0x01, 0xFF, 0x01, 0xFD, 0x01, 0xE5, 0x2D, 0x00, 0x01, 0xD8,
  0x01, 0xF9, 0x01, 0xFF, 0x01, 0xFE, 0x01, 0xFF, 0x01, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x0D,
  0x00, 0x01, 0xFE, 0x01, 0xFF, 0x01, 0xFC, 0x09, 0x00, 0x01, 0xF5, 0x01, 0xFF, 0x01, 0xFD,
  0x04, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xF0, 0x0A, 0x00, 0x01, 0xC5, 0x02, 0xFB, 0x0B,
  0x00, 0x01, 0xD8, 0x02, 0xFB, 0x04, 0x00, 0x01, 0xF6, 0x01, 0xFD, 0x01, 0xE9, 0x0E, 0x00,
  0x01, 0xF4, 0x01, 0xFD, 0x01, 0xE9, 0x07, 0x00, 0x01, 0xC5, 0x01, 0xFC, 0x08, 0xFF, 0x01,
  0xE9, 0x0D, 0x00, 0x01, 0xF4, 0x01, 0xFD, 0x01, 0xE9, 0x0A, 0x00, 0x01, 0xF7, 0x02, 0xFF,
  0x10, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x0C, 0x00, 0x01, 0xF6, 0x01, 0xFE, 0x01,
  0xFD, 0x0D, 0x00, 0x01, 0xF5, 0x01, 0xFE, 0x01, 0xE5, 0x01, 0xEF, 0x01, 0xFF, 0x01, 0xFB,
  0x0B, 0x00, 0x01, 0xEF, 0x01, 0xFD, 0x02, 0xFF, 0x01, 0xFB, 0x2D, 0x00, 0x01, 0xD8, 0x01,
  0xFB, 0x01, 0xFF, 0x01, 0xFB, 0x02, 0x00, 0x01, 0xF9, 0x01, 0xFF, 0x01, 0xFB, 0x0D, 0x00,
  0x01, 0xF5, 0x02, 0xFF, 0x09, 0x00, 0x01, 0xF5, 0x01, 0xFF, 0x01, 0xFE, 0x04, 0x00, 0x01,
  0xF4, 0x01, 0xFD, 0x01, 0xE9, 0x0A, 0x00, 0x01, 0xF9, 0x01, 0xFF, 0x01, 0xFC, 0x0B, 0x00,
  0x01, 0xD8, 0x02, 0xFB, 0x04, 0x00, 0x01, 0xF4, 0x01, 0xFD, 0x01, 0xE9, 0x0E, 0x00, 0x01,
  0xF6, 0x01, 0xFD, 0x01, 0xE9, 0x08, 0x00, 0x06, 0xFF, 0x01, 0xFC, 0x01, 0xFE, 0x01, 0xFF,
  0x0E, 0x00, 0x01, 0xF6, 0x01, 0xFD, 0x01, 0xE9, 0x09, 0x00, 0x01, 0xF5, 0x01, 0xFF, 0x01,
  0xFB, 0x11, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x0B, 0x00, 0x01, 0xF9, 0x01, 0xFF,
  0x01, 0xFC, 0x0E, 0x00, 0x01, 0xF5, 0x02, 0xFF, 0x01, 0xFC, 0x01, 0xFF, 0x01, 0xFB, 0x0B,
  0x00, 0x01, 0xF6, 0x02, 0xFF, 0x01, 0xF7, 0x01, 0xFF, 0x01, 0xFD, 0x0D, 0x00, 0x03, 0xFF,
  0x01, 0xF0, 0x1B, 0x00, 0x01, 0xD8, 0x01, 0xF9, 0x01, 0xFF, 0x01, 0xFC, 0x02, 0x00, 0x01,
  0xF7, 0x01, 0xFF, 0x01, 0xFB, 0x0C, 0x00, 0x01, 0xF9, 0x01, 0xFF, 0x01, 0xFB, 0x0A, 0x00,
  0x01, 0xF9, 0x01, 0xFF, 0x01, 0xFB, 0x04, 0x00, 0x01, 0xF7, 0x01, 0xFC, 0x01, 0xF0, 0x0A,
  0x00, 0x01, 0xF6, 0x01, 0xFE, 0x01, 0xFD, 0x0B, 0x00, 0x01, 0xC5, 0x02, 0xFB, 0x04, 0x00,
  0x01, 0xF9, 0x01, 0xFC, 0x0E, 0x00, 0x01, 0xC5, 0x02, 0xFB, 0x0F, 0x00, 0x02, 0xFB, 0x0E,
  0x00, 0x01, 0xD8, 0x02, 0xFB, 0x09, 0x00, 0x01, 0xC5, 0x01, 0xFB, 0x02, 0xFF, 0x11, 0x00,
  0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x0A, 0x00, 0x01, 0xC5, 0x01, 0xF9, 0x01, 0xFC, 0x01,
  0xF0, 0x0E, 0x00, 0x01, 0xC5, 0x01, 0xFB, 0x02, 0xFF, 0x01, 0xFC, 0x01, 0xF0, 0x0A, 0x00,
  0x01, 0xF9, 0x01, 0xFF, 0x01, 0xFB, 0x01, 0x00, 0x01, 0xF3, 0x01, 0xFF, 0x01, 0xFB, 0x0C,
  0x00, 0x01, 0xD8, 0x01, 0xF9, 0x02, 0xFF, 0x01, 0xFB, 0x1C, 0x00, 0x01, 0xF5, 0x01, 0xFF,
  0x01, 0xFC, 0x01, 0x00, 0x01, 0xD8, 0x01, 0xF7, 0x02, 0xFF, 0x0C, 0x00, 0x01, 0xF5, 0x01,
  0xFF, 0x01, 0xFD, 0x0A, 0x00, 0x01, 0xEF, 0x01, 0xFF, 0x02, 0xFD, 0x02, 0x00, 0x01, 0xFB,
  0x01, 0xFF, 0x01, 0xFB, 0x0A, 0x00, 0x01, 0xB5, 0x01, 0xFD, 0x01, 0xFB, 0x0D, 0x00, 0x01,
  0xF5, 0x02, 0xFF, 0x02, 0x00, 0x01, 0xFD, 0x01, 0xFF, 0x01, 0xFB, 0x09, 0x00, 0x01, 0xFF,
  0x04, 0x00, 0x01, 0xFB, 0x01, 0xFF, 0x01, 0xFC, 0x0E, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x09,
  0x00, 0x01, 0xFF, 0x04, 0x00, 0x01, 0xFB, 0x01, 0xFF, 0x01, 0xFB, 0x09, 0x00, 0x01, 0xF5,
  0x01, 0xFF, 0x01, 0xFC, 0x12, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x0A, 0x00, 0x01,
  0xF8, 0x01, 0xFF, 0x01, 0xFC, 0x10, 0x00, 0x01, 0xF8, 0x02, 0xFF, 0x01, 0xFB, 0x0A, 0x00,
  0x01, 0xC5, 0x01, 0xF9, 0x01, 0xFF, 0x01, 0xFD, 0x02, 0x00, 0x01, 0xF6, 0x01, 0xFF, 0x01,
  0xFB, 0x0B, 0x00, 0x01, 0xC5, 0x01, 0xFB, 0x02, 0xFF, 0x01, 0xFB, 0x1C, 0x00, 0x01, 0xF6,
  0x03, 0xFF, 0x01, 0xFC, 0x01, 0xFF, 0x01, 0xFB, 0x0C, 0x00, 0x01, 0xF7, 0x01, 0xFF, 0x01,
  0xFB, 0x0C, 0x00, 0x01, 0xF6, 0x03, 0xFF, 0x01, 0xFD, 0x03, 0xFF, 0x0A, 0x00, 0x01, 0xF5,
  0x01, 0xFF, 0x01, 0xFC, 0x0D, 0x00, 0x01, 0xFE, 0x07, 0xFF, 0x08, 0x00, 0x01, 0xD8, 0x01,
  0xFB, 0x03, 0xFF, 0x01, 0xFD, 0x03, 0xFF, 0x0E, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x08, 0x00,
  0x01, 0xD8, 0x01, 0xFB, 0x03, 0xFF, 0x01, 0xFD, 0x02, 0xFF, 0x01, 0xFC, 0x08, 0x00, 0x01,
  0xD8, 0x01, 0xFB, 0x06, 0xFF, 0x02, 0xFE, 0x0C, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9,
  0x09, 0x00, 0x01, 0xD8, 0x01, 0xFB, 0x01, 0xFF, 0x01, 0xFE, 0x03, 0xFF, 0x01, 0xFD, 0x01,
  0xFB, 0x0C, 0x00, 0x01, 0xF9, 0x01, 0xFF, 0x01, 0xFD, 0x0A, 0x00, 0x01, 0xF7, 0x01, 0xFF,
  0x01, 0xFB, 0x03, 0x00, 0x01, 0xFD, 0x01, 0xFF, 0x01, 0xFE, 0x01, 0xFF, 0x0B, 0x00, 0x01,
  0xF8, 0x03, 0xFF, 0x1D, 0x00, 0x04, 0xFF, 0x01, 0xFD, 0x01, 0xE5, 0x0C, 0x00, 0x01, 0xF9,
  0x01, 0xFF, 0x01, 0xFD, 0x0D, 0x00, 0x04, 0xFF, 0x01, 0xFD, 0x01, 0xFF, 0x0B, 0x00, 0x01,
  0xF6, 0x01, 0xFD, 0x01, 0xE5, 0x0E, 0x00, 0x01, 0xFF, 0x01, 0xFD, 0x02, 0xFF, 0x01, 0xFE,
  0x01, 0xFF, 0x09, 0x00, 0x01, 0xD8, 0x01, 0xF8, 0x04, 0xFF, 0x01, 0xFD, 0x01, 0xFF, 0x0F,
  0x00, 0x01, 0xD8, 0x01, 0xF9, 0x01, 0xFC, 0x08, 0x00, 0x01, 0xD8, 0x01, 0xF8, 0x04, 0xFF,
  0x01, 0xFD, 0x01, 0xFF, 0x09, 0x00, 0x01, 0xD8, 0x01, 0xF9, 0x07, 0xFF, 0x01, 0xFE, 0x0C,
  0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x09, 0x00, 0x01, 0xD8, 0x01, 0xF9, 0x06, 0xFF,
  0x01, 0xFB, 0x0B, 0x00, 0x01, 0xD8, 0x01, 0xF8, 0x01, 0xFD, 0x01, 0xF0, 0x09, 0x00, 0x01,
  0xEF, 0x01, 0xFD, 0x01, 0xFF, 0x01, 0xFC, 0x04, 0x00, 0x01, 0xF5, 0x01, 0xFF, 0x01, 0xFB,
  0x0C, 0x00, 0x02, 0xFF, 0x20, 0x00, 0x02, 0xFF, 0x0F, 0x00, 0x01, 0xFF, 0x0F, 0x00, 0x03,
  0xFF, 0x20, 0x00, 0x02, 0xFF, 0x0D, 0x00, 0x04, 0xFF, 0x1E, 0x00, 0x04, 0xFF, 0x41, 0x00,
  0x01, 0xFB, 0x01, 0xFF, 0x01, 0xFB, 0xFA, 0x00, 0x01, 0xD8, 0x01, 0xFD, 0x01, 0xFC, 0x01,
  0xFF, 0x01, 0xFE, 0x01, 0xFD, 0xFA, 0x00, 0x01, 0xD8, 0x01, 0xFC, 0x01, 0xFF, 0x01, 0xFE,
  0x01, 0xFF, 0xFC, 0x00, 0x02, 0xFF, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF,
  0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0x0B, 0x00, 0x02, 0xFF, 0x0E, 0x00,
  0x01, 0xFF, 0xCB, 0x00, 0x01, 0xD8, 0x01, 0xF9, 0x01, 0xFC, 0x0B, 0x00, 0x01, 0xD8, 0x01,
  0xF9, 0x01, 0xFC, 0x12, 0x00, 0x01, 0xF7, 0x01, 0xFF, 0x01, 0xFE, 0x01, 0xFF, 0x0C, 0x00,
  0x01, 0xF6, 0x01, 0xFF, 0x01, 0xFC, 0x41, 0x00, 0x02, 0xFF, 0x87, 0x00, 0x01, 0xD8, 0x02,
  0xFB, 0x0B, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x12, 0x00, 0x01, 0xF5, 0x02, 0xFF, 0x01, 0xFD,
  0x0B, 0x00, 0x01, 0xC5, 0x01, 0xFC, 0x01, 0xFF, 0x01, 0xFA, 0x41, 0x00, 0x01, 0xF5, 0x01,
  0xFE, 0x01, 0xE9, 0x86, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x0B, 0x00, 0x01, 0xD8, 0x02, 0xFB,
  0x12, 0x00, 0x01, 0xFF, 0x01, 0xFD, 0x01, 0xFC, 0x01, 0xE5, 0x0C, 0x00, 0x01, 0xFA, 0x01,
  0xFF, 0x01, 0xFE, 0x41, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x87, 0x00, 0x01, 0xD8, 0x02, 0xFB,
  0x0B, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x30, 0x00, 0x01, 0xFA, 0x01, 0xFE, 0x07, 0x00, 0x03,
  0xFF, 0x06, 0x00, 0x01, 0xFF, 0x01, 0xFE, 0x01, 0xE5, 0x04, 0x00, 0x01, 0xFD, 0x01, 0xFE,
  0x01, 0xFD, 0x07, 0x00, 0x01, 0xD8, 0x01, 0xFB, 0x01, 0xFE, 0x03, 0x00, 0x01, 0xD8, 0x01,
  0xFB, 0x01, 0xFE, 0x07, 0x00, 0x01, 0xFE, 0x08, 0xFF, 0x01, 0xFE, 0x0A, 0x00, 0x06, 0xFF,
  0x01, 0xFE, 0x08, 0x00, 0x01, 0xD8, 0x01, 0xFB, 0x01, 0xFD, 0x01, 0x00, 0x04, 0xFF, 0x01,
  0xFE, 0x0A, 0x00, 0x03, 0xFF, 0x01, 0xFD, 0x01, 0xFF, 0x01, 0xFC, 0x01, 0xFE, 0x08, 0x00,
  0x01, 0xD8, 0x01, 0xFB, 0x02, 0xFF, 0x01, 0xFD, 0x01, 0xFF, 0x01, 0xFE, 0x01, 0xFF, 0x0B,
  0x00, 0x01, 0xFF, 0x01, 0xFE, 0x03, 0xFF, 0x01, 0xF0, 0x09, 0x00, 0x01, 0xD8, 0x01, 0xFB,
  0x05, 0xFF, 0x01, 0xE5, 0x08, 0x00, 0x01, 0xFE, 0x06, 0xFF, 0x01, 0xFD, 0x01, 0xFF, 0x01,
  0xFE, 0x01, 0xE9, 0x0A, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x0B, 0x00, 0x01, 0xD8, 0x02, 0xFB,
  0x03, 0x00, 0x01, 0xFB, 0x03, 0xFF, 0x09, 0x00, 0x01, 0xFE, 0x03, 0xFF, 0x01, 0xFE, 0x01,
  0xF0, 0x09, 0x00, 0x01, 0xD8, 0x01, 0xFE, 0x03, 0xFF, 0x01, 0xFE, 0x0B, 0x00, 0x01, 0xF6,
  0x01, 0xFD, 0x01, 0xE9, 0x06, 0x00, 0x01, 0xF5, 0x02, 0xFF, 0x06, 0x00, 0x01, 0xF8, 0x01,
  0xFF, 0x01, 0xFD, 0x04, 0x00, 0x01, 0xF4, 0x01, 0xFE, 0x01, 0xE4, 0x07, 0x00, 0x01, 0xD8,
  0x02, 0xFB, 0x03, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x07, 0x00, 0x01, 0xF3, 0x08, 0xFF, 0x01,
  0xFB, 0x09, 0x00, 0x01, 0xF6, 0x06, 0xFF, 0x01, 0xFA, 0x08, 0x00, 0x01, 0xD8, 0x01, 0xFB,
  0x01, 0xFF, 0x01, 0xFB, 0x04, 0xFF, 0x01, 0xFB, 0x09, 0x00, 0x01, 0xF5, 0x06, 0xFF, 0x01,
  0xFB, 0x08, 0x00, 0x01, 0xD8, 0x01, 0xFB, 0x05, 0xFF, 0x01, 0xFD, 0x01, 0xE9, 0x09, 0x00,
  0x01, 0xF9, 0x05, 0xFF, 0x01, 0xFB, 0x09, 0x00, 0x01, 0xD8, 0x01, 0xFB, 0x05, 0xFF, 0x01,
  0xFC, 0x08, 0x00, 0x01, 0xF5, 0x09, 0xFF, 0x01, 0xFB, 0x0A, 0x00, 0x01, 0xD8, 0x02, 0xFB,
  0x0B, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x02, 0x00, 0x01, 0xBB, 0x01, 0xF9, 0x01, 0xFF, 0x01,
  0xFD, 0x0A, 0x00, 0x01, 0xF5, 0x03, 0xFF, 0x01, 0xFD, 0x01, 0xE9, 0x09, 0x00, 0x01, 0xC5,
  0x01, 0xFC, 0x03, 0xFF, 0x01, 0xFB, 0x0B, 0x00, 0x01, 0xF4, 0x01, 0xFD, 0x01, 0xE9, 0x06,
  0x00, 0x01, 0xF5, 0x02, 0xFF, 0x06, 0x00, 0x01, 0xFE, 0x01, 0xFF, 0x01, 0xFC, 0x03, 0x00,
  0x01, 0xD8, 0x01, 0xF9, 0x01, 0xFB, 0x08, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x03, 0x00, 0x01,
  0xD8, 0x02, 0xFB, 0x07, 0x00, 0x03, 0xFF, 0x01, 0xFA, 0x01, 0xFE, 0x05, 0xFF, 0x08, 0x00,
  0x01, 0xF9, 0x01, 0xFF, 0x01, 0xFD, 0x01, 0xFF, 0x02, 0x00, 0x03, 0xFF, 0x08, 0x00, 0x01,
  0xD8, 0x01, 0xF9, 0x04, 0xFF, 0x01, 0x00, 0x01, 0xFF, 0x09, 0x00, 0x01, 0xC5, 0x01, 0xFB,
  0x02, 0xFF, 0x01, 0x00, 0x03, 0xFF, 0x01, 0xFB, 0x08, 0x00, 0x01, 0xD8, 0x01, 0xF9, 0x01,
  0xFF, 0x01, 0xFC, 0x01, 0xF0, 0x01, 0xFF, 0x01, 0xF8, 0x01, 0xFF, 0x01, 0xFB, 0x08, 0x00,
  0x01, 0xD8, 0x01, 0xF9, 0x02, 0xFF, 0x01, 0x00, 0x01, 0xFF, 0x01, 0xFA, 0x01, 0xFF, 0x01,
  0xFC, 0x08, 0x00, 0x01, 0xD8, 0x01, 0xF9, 0x02, 0xFF, 0x01, 0x00, 0x01, 0xFF, 0x01, 0xFA,
  0x01, 0xFF, 0x01, 0xFD, 0x07, 0x00, 0x01, 0xF5, 0x01, 0xFF, 0x01, 0xFC, 0x01, 0x00, 0x01,
  0xFC, 0x01, 0xFF, 0x01, 0xFD, 0x01, 0xFF, 0x01, 0xB7, 0x01, 0xF9, 0x01, 0xFD, 0x01, 0xE9,
  0x09, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x0B, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x01, 0x00, 0x01,
  0xC5, 0x01, 0xF7, 0x01, 0xFF, 0x01, 0xFB, 0x0B, 0x00, 0x03, 0xFF, 0x01, 0xFB, 0x01, 0xFD,
  0x01, 0xE9, 0x0A, 0x00, 0x03, 0xFF, 0x02, 0xFB, 0x0B, 0x00, 0x01, 0xF4, 0x01, 0xFD, 0x01,
  0xE9, 0x01, 0x00, 0x03, 0xFF, 0x02, 0x00, 0x01, 0xF5, 0x02, 0xFF, 0x06, 0x00, 0x01, 0xEF,
  0x01, 0xFD, 0x01, 0xFB, 0x03, 0x00, 0x01, 0xF9, 0x01, 0xFF, 0x01, 0xFB, 0x08, 0x00, 0x01,
  0xD8, 0x02, 0xFB, 0x03, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x0A, 0x00, 0x01, 0xF5, 0x01, 0xFD,
  0x01, 0xF0, 0x0C, 0x00, 0x01, 0xFD, 0x01, 0xFF, 0x01, 0xFA, 0x0E, 0x00, 0x01, 0xD8, 0x01,
  0xF9, 0x01, 0xFF, 0x01, 0xFC, 0x0D, 0x00, 0x01, 0xF6, 0x01, 0xFF, 0x01, 0xFB, 0x03, 0x00,
  0x01, 0xF9, 0x01, 0xFF, 0x01, 0xFB, 0x08, 0x00, 0x01, 0xD8, 0x01, 0xF9, 0x01, 0xFD, 0x01,
  0xE9, 0x02, 0x00, 0x01, 0xEF, 0x01, 0xFF, 0x01, 0xFB, 0x08, 0x00, 0x01, 0xFD, 0x01, 0xFF,
  0x01, 0xFB, 0x03, 0x00, 0x01, 0xB5, 0x01, 0xFD, 0x01, 0xFB, 0x08, 0x00, 0x01, 0xD8, 0x01,
  0xF9, 0x01, 0xFB, 0x03, 0x00, 0x01, 0xF6, 0x01, 0xFF, 0x01, 0xFB, 0x07, 0x00, 0x01, 0xF5,
  0x01, 0xFE, 0x01, 0xE4, 0x01, 0x00, 0x01, 0xB7, 0x02, 0xFC, 0x02, 0x00, 0x01, 0xF5, 0x01,
  0xFD, 0x01, 0xE9, 0x09, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x0B, 0x00, 0x01, 0xD8, 0x01, 0xFB,
  0x01, 0xFA, 0x01, 0x00, 0x01, 0xF8, 0x01, 0xFF, 0x01, 0xFC, 0x0F, 0x00, 0x01, 0xF5, 0x01,
  0xFD, 0x01, 0xE9, 0x0C, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x0B, 0x00, 0x01, 0xF4, 0x01, 0xFD,
  0x01, 0xE9, 0x01, 0x00, 0x01, 0xF7, 0x01, 0xFF, 0x01, 0xFC, 0x02, 0x00, 0x01, 0xF5, 0x01,
  0xFF, 0x01, 0xFB, 0x07, 0x00, 0x01, 0xF7, 0x01, 0xFC, 0x01, 0xF0, 0x02, 0x00, 0x01, 0xF5,
  0x01, 0xFF, 0x01, 0xFC, 0x08, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x03, 0x00, 0x01, 0xD8, 0x02,
  0xFB, 0x0A, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x0C, 0x00, 0x01, 0xFD, 0x01, 0xFF,
  0x01, 0xFD, 0x02, 0xFF, 0x0C, 0x00, 0x01, 0xD8, 0x01, 0xF9, 0x01, 0xFC, 0x0E, 0x00, 0x01,
  0xF9, 0x01, 0xFF, 0x01, 0xFD, 0x03, 0x00, 0x01, 0xF9, 0x01, 0xFF, 0x01, 0xFB, 0x08, 0x00,
  0x01, 0xD8, 0x01, 0xF9, 0x01, 0xFB, 0x04, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x07,
  0x00, 0x01, 0xF5, 0x01, 0xFF, 0x01, 0xFC, 0x04, 0x00, 0x01, 0xF6, 0x01, 0xFD, 0x01, 0xE9,
  0x07, 0x00, 0x01, 0xD8, 0x01, 0xFB, 0x01, 0xFC, 0x03, 0x00, 0x01, 0xC5, 0x02, 0xFB, 0x07,
  0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x01, 0x00, 0x01, 0xD8, 0x01, 0xFB, 0x01, 0xFC,
  0x02, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x09, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x0B,
  0x00, 0x01, 0xD8, 0x01, 0xFB, 0x01, 0xFF, 0x01, 0xFC, 0x01, 0xFF, 0x01, 0xFB, 0x10, 0x00,
  0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x0C, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x0B, 0x00, 0x01,
  0xF5, 0x01, 0xFE, 0x01, 0xE4, 0x01, 0x00, 0x01, 0xF4, 0x01, 0xFF, 0x01, 0xFE, 0x01, 0xF9,
  0x01, 0x00, 0x01, 0xF8, 0x01, 0xFD, 0x01, 0xE9, 0x07, 0x00, 0x01, 0xF5, 0x01, 0xFF, 0x01,
  0xFC, 0x02, 0x00, 0x01, 0xF5, 0x02, 0xFF, 0x08, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x03, 0x00,
  0x01, 0xD8, 0x02, 0xFB, 0x0A, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x0D, 0x00, 0x01,
  0xF6, 0x03, 0xFF, 0x01, 0xFE, 0x02, 0xFF, 0x09, 0x00, 0x01, 0xD8, 0x01, 0xF9, 0x01, 0xFB,
  0x0E, 0x00, 0x01, 0xF5, 0x01, 0xFF, 0x01, 0xFB, 0x03, 0x00, 0x01, 0xF6, 0x01, 0xFF, 0x01,
  0xFB, 0x08, 0x00, 0x01, 0xD8, 0x01, 0xF9, 0x01, 0xFB, 0x04, 0x00, 0x01, 0xF4, 0x01, 0xFD,
  0x01, 0xE9, 0x07, 0x00, 0x01, 0xF5, 0x01, 0xFF, 0x01, 0xFB, 0x04, 0x00, 0x01, 0xF4, 0x01,
  0xFD, 0x01, 0xE9, 0x07, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x03, 0x00, 0x01, 0xD8, 0x02, 0xFB,
  0x07, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x01, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x02,
  0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x09, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x0B, 0x00,
  0x01, 0xD8, 0x01, 0xF9, 0x03, 0xFF, 0x01, 0xFB, 0x10, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01,
  0xE9, 0x0C, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x0B, 0x00, 0x01, 0xF5, 0x01, 0xFF, 0x01, 0xFB,
  0x01, 0x00, 0x01, 0xF5, 0x02, 0xFF, 0x01, 0xFD, 0x01, 0x00, 0x01, 0xF6, 0x01, 0xFD, 0x01,
  0xE9, 0x07, 0x00, 0x01, 0xF4, 0x01, 0xFF, 0x01, 0xFB, 0x02, 0x00, 0x01, 0xF8, 0x01, 0xFC,
  0x09, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x03, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x0A, 0x00, 0x01,
  0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x0E, 0x00, 0x07, 0xFF, 0x08, 0x00, 0x01, 0xD8, 0x01, 0xFB,
  0x01, 0xFC, 0x0E, 0x00, 0x01, 0xF5, 0x02, 0xFF, 0x03, 0x00, 0x01, 0xC5, 0x02, 0xFB, 0x08,
  0x00, 0x01, 0xD8, 0x02, 0xFB, 0x04, 0x00, 0x01, 0xF4, 0x01, 0xFD, 0x01, 0xE9, 0x07, 0x00,
  0x01, 0xF5, 0x02, 0xFF, 0x04, 0x00, 0x01, 0xF4, 0x01, 0xFD, 0x01, 0xE9, 0x07, 0x00, 0x01,
  0xD8, 0x02, 0xFB, 0x03, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x07, 0x00, 0x01, 0xF5, 0x01, 0xFD,
  0x01, 0xE9, 0x01, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x02, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01,
  0xE9, 0x09, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x0B, 0x00, 0x01, 0xD8, 0x01, 0xFB, 0x03, 0xFF,
  0x01, 0xFE, 0x01, 0xF9, 0x0F, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x0C, 0x00, 0x01,
  0xD8, 0x02, 0xFB, 0x0B, 0x00, 0x01, 0xF6, 0x01, 0xFF, 0x01, 0xF9, 0x01, 0xB7, 0x02, 0xFF,
  0x01, 0xF6, 0x01, 0xFB, 0x01, 0x00, 0x01, 0xF7, 0x01, 0xFB, 0x08, 0x00, 0x01, 0xB5, 0x01,
  0xFD, 0x01, 0xFB, 0x01, 0x00, 0x01, 0xEF, 0x01, 0xFF, 0x01, 0xFB, 0x09, 0x00, 0x01, 0xD8,
  0x02, 0xFB, 0x03, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x0A, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01,
  0xE9, 0x11, 0x00, 0x01, 0xFF, 0x01, 0xFC, 0x01, 0xFF, 0x01, 0xFB, 0x08, 0x00, 0x01, 0xD8,
  0x02, 0xFB, 0x0E, 0x00, 0x01, 0xF5, 0x02, 0xFF, 0x03, 0x00, 0x01, 0xEF, 0x01, 0xFF, 0x01,
  0xFB, 0x08, 0x00, 0x01, 0xD8, 0x01, 0xF9, 0x01, 0xFB, 0x04, 0x00, 0x01, 0xF4, 0x01, 0xFD,
  0x01, 0xE9, 0x07, 0x00, 0x01, 0xF5, 0x01, 0xFF, 0x01, 0xFB, 0x04, 0x00, 0x01, 0xF4, 0x01,
  0xFD, 0x01, 0xE9, 0x07, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x03, 0x00, 0x01, 0xD8, 0x02, 0xFB,
  0x07, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x01, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x02,
  0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x09, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x0B, 0x00,
  0x01, 0xD8, 0x01, 0xFB, 0x01, 0xFC, 0x01, 0x00, 0x01, 0xF4, 0x01, 0xFF, 0x01, 0xFB, 0x0F,
  0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x0C, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x0B, 0x00,
  0x01, 0xB5, 0x01, 0xFD, 0x01, 0xFC, 0x03, 0xFF, 0x01, 0xF2, 0x01, 0xFB, 0x01, 0xFF, 0x01,
  0xFB, 0x01, 0xFC, 0x09, 0x00, 0x01, 0xF7, 0x01, 0xFE, 0x01, 0xF0, 0x01, 0xF2, 0x01, 0xFF,
  0x01, 0xFB, 0x09, 0x00, 0x01, 0xD8, 0x01, 0xFB, 0x01, 0xFC, 0x03, 0x00, 0x01, 0xD8, 0x02,
  0xFB, 0x0A, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x13, 0x00, 0x01, 0xF5, 0x01, 0xFD,
  0x01, 0xF0, 0x07, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x0E, 0x00, 0x01, 0xF5, 0x01, 0xFF, 0x01,
  0xFB, 0x03, 0x00, 0x01, 0xEF, 0x01, 0xFF, 0x01, 0xFB, 0x08, 0x00, 0x01, 0xD8, 0x01, 0xF9,
  0x01, 0xFB, 0x04, 0x00, 0x01, 0xF4, 0x01, 0xFD, 0x01, 0xE9, 0x07, 0x00, 0x01, 0xF5, 0x01,
  0xFF, 0x01, 0xFD, 0x04, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x07, 0x00, 0x01, 0xD8,
  0x02, 0xFB, 0x03, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x07, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01,
  0xE9, 0x01, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x02, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9,
  0x09, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x0B, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x02, 0x00, 0x01,
  0xF6, 0x01, 0xFF, 0x01, 0xFE, 0x0E, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x0C, 0x00,
  0x01, 0xD8, 0x02, 0xFB, 0x0C, 0x00, 0x01, 0xF8, 0x01, 0xFE, 0x01, 0xFF, 0x01, 0xFB, 0x01,
  0x00, 0x01, 0xF6, 0x01, 0xFE, 0x02, 0xFF, 0x01, 0xFD, 0x09, 0x00, 0x01, 0xF9, 0x02, 0xFF,
  0x01, 0xF8, 0x01, 0xFD, 0x01, 0xF0, 0x09, 0x00, 0x01, 0xC5, 0x01, 0xFB, 0x01, 0xFC, 0x03,
  0x00, 0x01, 0xF9, 0x01, 0xFF, 0x01, 0xFB, 0x0A, 0x00, 0x01, 0xF5, 0x01, 0xFF, 0x01, 0xF9,
  0x13, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x07, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x0E,
  0x00, 0x01, 0xF9, 0x01, 0xFF, 0x01, 0xFC, 0x03, 0x00, 0x01, 0xF7, 0x01, 0xFF, 0x01, 0xFB,
  0x08, 0x00, 0x01, 0xD8, 0x01, 0xF9, 0x01, 0xFB, 0x03, 0x00, 0x01, 0xBB, 0x01, 0xFC, 0x01,
  0xFB, 0x08, 0x00, 0x01, 0xFC, 0x01, 0xFF, 0x01, 0xFB, 0x03, 0x00, 0x01, 0xC5, 0x01, 0xFC,
  0x01, 0xFB, 0x08, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x03, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x07,
  0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x01, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x02, 0x00,
  0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x09, 0x00, 0x01, 0xD8, 0x01, 0xFB, 0x01, 0xFC, 0x0B,
  0x00, 0x01, 0xD8, 0x02, 0xFB, 0x02, 0x00, 0x01, 0xF6, 0x01, 0xFF, 0x01, 0xFD, 0x01, 0xE9,
  0x0D, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x0C, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x0C,
  0x00, 0x01, 0xF5, 0x02, 0xFF, 0x01, 0xFB, 0x01, 0x00, 0x01, 0xB7, 0x01, 0xFC, 0x02, 0xFF,
  0x01, 0xFE, 0x09, 0x00, 0x01, 0xB5, 0x01, 0xFD, 0x02, 0xFF, 0x01, 0xFB, 0x0A, 0x00, 0x01,
  0xD8, 0x01, 0xF9, 0x01, 0xFE, 0x01, 0xFF, 0x02, 0x00, 0x01, 0xF9, 0x01, 0xFF, 0x01, 0xFB,
  0x0A, 0x00, 0x01, 0xF9, 0x01, 0xFF, 0x01, 0xFC, 0x12, 0x00, 0x01, 0xFD, 0x01, 0xFF, 0x01,
  0xFB, 0x08, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x0E, 0x00, 0x01, 0xB5, 0x01, 0xFD, 0x01, 0xFE,
  0x01, 0xFF, 0x01, 0x00, 0x01, 0xBB, 0x01, 0xF9, 0x01, 0xFF, 0x01, 0xFB, 0x08, 0x00, 0x01,
  0xD8, 0x01, 0xF9, 0x01, 0xFF, 0x01, 0xFD, 0x02, 0x00, 0x01, 0xF7, 0x01, 0xFF, 0x01, 0xFC,
  0x08, 0x00, 0x01, 0xB7, 0x01, 0xFD, 0x01, 0xFE, 0x01, 0xFF, 0x02, 0x00, 0x01, 0xF9, 0x01,
  0xFF, 0x01, 0xFB, 0x08, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x03, 0x00, 0x01, 0xD8, 0x02, 0xFB,
  0x07, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x01, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x02,
  0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x09, 0x00, 0x01, 0xC5, 0x02, 0xFB, 0x0B, 0x00,
  0x01, 0xD8, 0x02, 0xFB, 0x03, 0x00, 0x01, 0xF4, 0x01, 0xFF, 0x01, 0xFC, 0x0D, 0x00, 0x01,
  0xF9, 0x01, 0xFD, 0x01, 0xE9, 0x0C, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x0C, 0x00, 0x01, 0xF5,
  0x02, 0xFF, 0x01, 0xFB, 0x02, 0x00, 0x01, 0xF5, 0x01, 0xFF, 0x01, 0xFD, 0x01, 0xE9, 0x0A,
  0x00, 0x01, 0xF5, 0x02, 0xFF, 0x01, 0xFE, 0x0B, 0x00, 0x01, 0xF6, 0x03, 0xFF, 0x01, 0xFB,
  0x02, 0xFF, 0x01, 0xFB, 0x0A, 0x00, 0x01, 0xB7, 0x01, 0xFC, 0x01, 0xFF, 0x01, 0xFE, 0x02,
  0xFF, 0x01, 0xFE, 0x08, 0x00, 0x01, 0xD8, 0x01, 0xF8, 0x06, 0xFF, 0x01, 0xFE, 0x08, 0x00,
  0x01, 0xD8, 0x02, 0xFB, 0x0F, 0x00, 0x01, 0xF4, 0x03, 0xFF, 0x01, 0xFD, 0x02, 0xFF, 0x01,
  0xFB, 0x08, 0x00, 0x01, 0xD8, 0x01, 0xF9, 0x06, 0xFF, 0x01, 0xF9, 0x09, 0x00, 0x01, 0xF8,
  0x03, 0xFF, 0x01, 0xFD, 0x01, 0xFF, 0x01, 0xFE, 0x01, 0xFD, 0x08, 0x00, 0x01, 0xD8, 0x02,
  0xFB, 0x03, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x07, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9,
  0x01, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x02, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x0A,
  0x00, 0x01, 0xF5, 0x03, 0xFF, 0x01, 0xFE, 0x08, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x03, 0x00,
  0x01, 0xB7, 0x01, 0xFC, 0x02, 0xFF, 0x0C, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x0C,
  0x00, 0x01, 0xD8, 0x02, 0xFB, 0x0C, 0x00, 0x01, 0xF9, 0x01, 0xFF, 0x01, 0xFD, 0x01, 0xE5,
  0x02, 0x00, 0x01, 0xF8, 0x01, 0xFF, 0x01, 0xFC, 0x0B, 0x00, 0x01, 0xF6, 0x01, 0xFF, 0x01,
  0xFB, 0x0D, 0x00, 0x01, 0xFC, 0x02, 0xFF, 0x01, 0xFD, 0x01, 0xFF, 0x01, 0xF9, 0x01, 0xFC,
  0x0B, 0x00, 0x01, 0xFF, 0x01, 0xFA, 0x03, 0xFF, 0x01, 0xFB, 0x08, 0x00, 0x01, 0xD8, 0x01,
  0xF9, 0x04, 0xFF, 0x01, 0xFE, 0x01, 0xFF, 0x09, 0x00, 0x01, 0xD8, 0x01, 0xF9, 0x01, 0xFC,
  0x10, 0x00, 0x01, 0xFD, 0x02, 0xFF, 0x01, 0xFD, 0x01, 0xFF, 0x01, 0xF9, 0x01, 0xFB, 0x08,
  0x00, 0x01, 0xD8, 0x01, 0xFB, 0x04, 0xFF, 0x01, 0xFE, 0x01, 0xFF, 0x0B, 0x00, 0x04, 0xFF,
  0x01, 0xFD, 0x01, 0xFF, 0x09, 0x00, 0x01, 0xD8, 0x01, 0xF9, 0x01, 0xFC, 0x03, 0x00, 0x01,
  0xD8, 0x01, 0xF9, 0x01, 0xFC, 0x07, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x01, 0x00,
  0x01, 0xD8, 0x01, 0xF9, 0x01, 0xFC, 0x02, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x0A,
  0x00, 0x01, 0xFF, 0x01, 0xF9, 0x02, 0xFF, 0x01, 0xFB, 0x08, 0x00, 0x01, 0xD8, 0x01, 0xF9,
  0x01, 0xFC, 0x04, 0x00, 0x01, 0xF9, 0x01, 0xFF, 0x01, 0xFB, 0x0C, 0x00, 0x01, 0xF5, 0x01,
  0xFD, 0x01, 0xE9, 0x0C, 0x00, 0x01, 0xD8, 0x01, 0xF9, 0x01, 0xFC, 0x31, 0x00, 0x02, 0xFF,
  0x11, 0x00, 0x03, 0xFF, 0x0B, 0x00, 0x04, 0xFF, 0x1F, 0x00, 0x02, 0xFF, 0x02, 0x00, 0x02,
  0xFB, 0x08, 0x00, 0x01, 0xD8, 0x01, 0xFB, 0x01, 0xFA, 0x01, 0x00, 0x02, 0xFF, 0x0F, 0x00,
  0x02, 0xFF, 0x33, 0x00, 0x03, 0xFF, 0x1D, 0x00, 0x01, 0xFC, 0x01, 0xFF, 0x01, 0xFB, 0x88,
  0x00, 0x01, 0xD8, 0x02, 0xFB, 0x08, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x62, 0x00, 0x01, 0xD8,
  0x01, 0xFB, 0x06, 0xFF, 0x88, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x08, 0x00, 0x01, 0xD8, 0x02,
  0xFB, 0x62, 0x00, 0x01, 0xD8, 0x01, 0xFB, 0x03, 0xFF, 0x01, 0xFE, 0x01, 0xFF, 0x89, 0x00,
  0x01, 0xC5, 0x01, 0xFC, 0x01, 0xFB, 0x08, 0x00, 0x01, 0xC5, 0x01, 0xFC, 0x01, 0xFB, 0x64,
  0x00, 0x03, 0xFF, 0x8C, 0x00, 0x02, 0xFF, 0x09, 0x00, 0x02, 0xFF, 0xFF, 0x00, 0xFF, 0x00,
  0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xB4, 0x00, 0x03, 0xFF, 0xD6,
  0x00, 0x01, 0xD8, 0x01, 0xF9, 0x01, 0xFC, 0x22, 0x00, 0x05, 0xFF, 0x01, 0xFB, 0x1F, 0x00,
  0x01, 0xD8, 0x01, 0xF9, 0x01, 0xFC, 0x19, 0x00, 0x01, 0xD8, 0x01, 0xF9, 0x01, 0xFC, 0x97,
  0x00, 0x01, 0xD8, 0x02, 0xFB, 0x21, 0x00, 0x05, 0xFF, 0x01, 0xFD, 0x01, 0xFC, 0x1F, 0x00,
  0x01, 0xD8, 0x02, 0xFB, 0x19, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x97, 0x00, 0x01, 0xD8, 0x02,
  0xFB, 0x21, 0x00, 0x01, 0xF5, 0x01, 0xFF, 0x01, 0xFC, 0x23, 0x00, 0x01, 0xD8, 0x02, 0xFB,
  0x19, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x97, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x21, 0x00, 0x01,
  0xF5, 0x01, 0xFE, 0x01, 0xFF, 0x23, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x19, 0x00, 0x01, 0xD8,
  0x02, 0xFB, 0x97, 0x00, 0x01, 0xD8, 0x01, 0xFB, 0x05, 0xFF, 0x01, 0xE5, 0x0B, 0x00, 0x01,
  0xFF, 0x01, 0xFD, 0x01, 0xFF, 0x01, 0xFD, 0x01, 0xFF, 0x01, 0xFC, 0x01, 0xFE, 0x0A, 0x00,
  0x01, 0xF5, 0x01, 0xFD, 0x01, 0xF0, 0x0E, 0x00, 0x06, 0xFF, 0x0B, 0x00, 0x03, 0xFF, 0x01,
  0xFE, 0x01, 0xFF, 0x01, 0xF8, 0x01, 0xFB, 0x0A, 0x00, 0x07, 0xFF, 0x08, 0x00, 0x01, 0xD8,
  0x01, 0xFB, 0x01, 0xFE, 0x01, 0xFF, 0x01, 0xFD, 0x01, 0xFF, 0x01, 0xFE, 0x01, 0xFF, 0x0A,
  0x00, 0x07, 0xFF, 0x81, 0x00, 0x01, 0xD8, 0x01, 0xF9, 0x05, 0xFF, 0x01, 0xFC, 0x0A, 0x00,
  0x01, 0xF8, 0x06, 0xFF, 0x01, 0xFB, 0x07, 0x00, 0x03, 0xFF, 0x01, 0xFA, 0x01, 0xFE, 0x05,
  0xFF, 0x09, 0x00, 0x01, 0xF9, 0x05, 0xFF, 0x01, 0xFD, 0x01, 0xE5, 0x09, 0x00, 0x01, 0xF5,
  0x06, 0xFF, 0x01, 0xFB, 0x09, 0x00, 0x01, 0xFE, 0x06, 0xFF, 0x01, 0xFD, 0x08, 0x00, 0x01,
  0xD8, 0x01, 0xF9, 0x05, 0xFF, 0x01, 0xFD, 0x01, 0xE9, 0x09, 0x00, 0x01, 0xF6, 0x07, 0xFF,
  0x80, 0x00, 0x01, 0xD8, 0x01, 0xF9, 0x02, 0xFF, 0x01, 0x00, 0x01, 0xFF, 0x01, 0xFA, 0x01,
  0xFF, 0x01, 0xFD, 0x08, 0x00, 0x01, 0xC5, 0x01, 0xFB, 0x02, 0xFF, 0x01, 0x00, 0x01, 0xFF,
  0x01, 0xFC, 0x01, 0xFF, 0x01, 0xFB, 0x07, 0x00, 0x01, 0xF3, 0x08, 0xFF, 0x01, 0xFB, 0x08,
  0x00, 0x01, 0xBB, 0x01, 0xFB, 0x01, 0xFE, 0x01, 0xFF, 0x01, 0x00, 0x01, 0xFF, 0x01, 0xFB,
  0x01, 0xFF, 0x01, 0xFB, 0x08, 0x00, 0x01, 0xC5, 0x01, 0xFB, 0x02, 0xFF, 0x01, 0x00, 0x03,
  0xFF, 0x01, 0xFB, 0x08, 0x00, 0x01, 0xD8, 0x01, 0xF8, 0x02, 0xFF, 0x03, 0x00, 0x01, 0xFF,
  0x09, 0x00, 0x01, 0xD8, 0x01, 0xF9, 0x01, 0xFF, 0x01, 0xFC, 0x02, 0xFF, 0x01, 0xF8, 0x01,
  0xFF, 0x01, 0xFB, 0x0A, 0x00, 0x02, 0xFF, 0x02, 0x00, 0x01, 0xFC, 0x01, 0xFF, 0x01, 0xFB,
  0x80, 0x00, 0x01, 0xD8, 0x01, 0xF9, 0x01, 0xFB, 0x03, 0x00, 0x01, 0xF6, 0x01, 0xFF, 0x01,
  0xFB, 0x08, 0x00, 0x01, 0xFD, 0x01, 0xFF, 0x01, 0xFB, 0x03, 0x00, 0x01, 0xF5, 0x01, 0xFF,
  0x01, 0xFB, 0x07, 0x00, 0x01, 0xFE, 0x08, 0xFF, 0x01, 0xFE, 0x08, 0x00, 0x01, 0xF6, 0x01,
  0xFF, 0x01, 0xFB, 0x03, 0x00, 0x01, 0xBB, 0x01, 0xFC, 0x01, 0xFB, 0x08, 0x00, 0x01, 0xF6,
  0x01, 0xFF, 0x01, 0xFB, 0x03, 0x00, 0x01, 0xF9, 0x01, 0xFF, 0x01, 0xFB, 0x08, 0x00, 0x01,
  0xFD, 0x01, 0xFF, 0x01, 0xFB, 0x0E, 0x00, 0x01, 0xD8, 0x01, 0xF9, 0x01, 0xFD, 0x01, 0xE9,
  0x02, 0x00, 0x01, 0xEF, 0x01, 0xFF, 0x01, 0xFB, 0x0E, 0x00, 0x01, 0xEF, 0x01, 0xFF, 0x01,
  0xFB, 0x80, 0x00, 0x01, 0xD8, 0x01, 0xFB, 0x01, 0xFC, 0x03, 0x00, 0x01, 0xC5, 0x02, 0xFB,
  0x08, 0x00, 0x01, 0xF5, 0x02, 0xFF, 0x03, 0x00, 0x01, 0xFD, 0x01, 0xFF, 0x01, 0xFB, 0x0A,
  0x00, 0x01, 0xF5, 0x01, 0xFD, 0x0D, 0x00, 0x01, 0xF9, 0x01, 0xFF, 0x01, 0xFE, 0x01, 0x00,
  0x02, 0xFF, 0x01, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x07, 0x00, 0x01, 0xF9, 0x01,
  0xFF, 0x01, 0xFD, 0x03, 0x00, 0x01, 0xF9, 0x01, 0xFF, 0x01, 0xFB, 0x08, 0x00, 0x01, 0xF9,
  0x01, 0xFF, 0x01, 0xFE, 0x0E, 0x00, 0x01, 0xD8, 0x01, 0xF9, 0x01, 0xFB, 0x04, 0x00, 0x01,
  0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x0D, 0x00, 0x01, 0xD8, 0x01, 0xF9, 0x01, 0xFB, 0x80, 0x00,
  0x01, 0xD8, 0x02, 0xFB, 0x03, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x08, 0x00, 0x01, 0xF5, 0x01,
  0xFF, 0x01, 0xFD, 0x03, 0x00, 0x01, 0xEF, 0x01, 0xFD, 0x01, 0xFB, 0x0A, 0x00, 0x01, 0xF5,
  0x01, 0xFD, 0x01, 0xE9, 0x0C, 0x00, 0x01, 0xF5, 0x07, 0xFF, 0x01, 0xFD, 0x01, 0xE9, 0x07,
  0x00, 0x01, 0xF5, 0x01, 0xFF, 0x01, 0xFB, 0x03, 0x00, 0x01, 0xF6, 0x01, 0xFF, 0x01, 0xFB,
  0x08, 0x00, 0x01, 0xF9, 0x01, 0xFF, 0x01, 0xFB, 0x0E, 0x00, 0x01, 0xD8, 0x01, 0xF9, 0x01,
  0xFB, 0x04, 0x00, 0x01, 0xF4, 0x01, 0xFD, 0x01, 0xE9, 0x09, 0x00, 0x06, 0xFF, 0x01, 0xFB,
  0x80, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x03, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x08, 0x00, 0x01,
  0xF9, 0x02, 0xFF, 0x03, 0x00, 0x01, 0xF9, 0x01, 0xFF, 0x01, 0xFB, 0x0A, 0x00, 0x01, 0xF5,
  0x01, 0xFD, 0x01, 0xE9, 0x0C, 0x00, 0x01, 0xF5, 0x07, 0xFF, 0x01, 0xFC, 0x08, 0x00, 0x01,
  0xF5, 0x02, 0xFF, 0x03, 0x00, 0x01, 0xC5, 0x02, 0xFB, 0x08, 0x00, 0x01, 0xFE, 0x02, 0xFF,
  0x0E, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x04, 0x00, 0x01, 0xF4, 0x01, 0xFD, 0x01, 0xE9, 0x08,
  0x00, 0x01, 0xF7, 0x06, 0xFF, 0x01, 0xFB, 0x80, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x03, 0x00,
  0x01, 0xD8, 0x02, 0xFB, 0x08, 0x00, 0x01, 0xF9, 0x01, 0xFF, 0x01, 0xFE, 0x03, 0x00, 0x01,
  0xF6, 0x01, 0xFF, 0x01, 0xFB, 0x0A, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x0C, 0x00,
  0x01, 0xF5, 0x01, 0xFF, 0x01, 0xFB, 0x0E, 0x00, 0x01, 0xF5, 0x02, 0xFF, 0x03, 0x00, 0x01,
  0xEF, 0x01, 0xFF, 0x01, 0xFB, 0x08, 0x00, 0x01, 0xF5, 0x01, 0xFF, 0x01, 0xFB, 0x0E, 0x00,
  0x01, 0xD8, 0x01, 0xF9, 0x01, 0xFB, 0x04, 0x00, 0x01, 0xF4, 0x01, 0xFD, 0x01, 0xE9, 0x07,
  0x00, 0x01, 0xFD, 0x01, 0xFF, 0x01, 0xFD, 0x01, 0xFF, 0x02, 0x00, 0x01, 0xC5, 0x02, 0xFB,
  0x80, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x03, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x08, 0x00, 0x01,
  0xF9, 0x01, 0xFF, 0x01, 0xFB, 0x03, 0x00, 0x01, 0xF7, 0x01, 0xFF, 0x01, 0xFB, 0x0A, 0x00,
  0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x0C, 0x00, 0x01, 0xF5, 0x01, 0xFF, 0x01, 0xFD, 0x0E,
  0x00, 0x01, 0xF5, 0x01, 0xFF, 0x01, 0xFB, 0x03, 0x00, 0x01, 0xEF, 0x01, 0xFF, 0x01, 0xFB,
  0x08, 0x00, 0x01, 0xF9, 0x01, 0xFF, 0x01, 0xFD, 0x0E, 0x00, 0x01, 0xD8, 0x01, 0xF9, 0x01,
  0xFB, 0x04, 0x00, 0x01, 0xF4, 0x01, 0xFD, 0x01, 0xE9, 0x07, 0x00, 0x01, 0xF5, 0x01, 0xFF,
  0x01, 0xFA, 0x03, 0x00, 0x01, 0xFD, 0x01, 0xFF, 0x01, 0xFB, 0x80, 0x00, 0x01, 0xD8, 0x02,
  0xFB, 0x03, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x09, 0x00, 0x01, 0xF7, 0x01, 0xFF, 0x01, 0xFE,
  0x04, 0xFF, 0x01, 0xFB, 0x0A, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x0C, 0x00, 0x01,
  0xF9, 0x01, 0xFF, 0x01, 0xFB, 0x0E, 0x00, 0x01, 0xF9, 0x01, 0xFF, 0x01, 0xFC, 0x03, 0x00,
  0x01, 0xF7, 0x01, 0xFF, 0x01, 0xFB, 0x08, 0x00, 0x01, 0xF9, 0x01, 0xFF, 0x01, 0xFB, 0x0E,
  0x00, 0x01, 0xD8, 0x01, 0xF9, 0x01, 0xFB, 0x03, 0x00, 0x01, 0xBB, 0x01, 0xFC, 0x01, 0xFB,
  0x08, 0x00, 0x01, 0xF5, 0x01, 0xFF, 0x01, 0xFD, 0x03, 0x00, 0x01, 0xF4, 0x01, 0xFF, 0x01,
  0xFB, 0x80, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x03, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x09, 0x00,
  0x06, 0xFF, 0x01, 0xFD, 0x01, 0xFB, 0x0A, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x0C,
  0x00, 0x01, 0xB5, 0x01, 0xFD, 0x02, 0xFF, 0x0D, 0x00, 0x01, 0xB5, 0x01, 0xFD, 0x01, 0xFE,
  0x01, 0xFF, 0x01, 0x00, 0x01, 0xBB, 0x01, 0xF9, 0x01, 0xFF, 0x01, 0xFB, 0x08, 0x00, 0x01,
  0xB7, 0x01, 0xFC, 0x01, 0xFE, 0x01, 0xFF, 0x0D, 0x00, 0x01, 0xD8, 0x01, 0xF9, 0x01, 0xFF,
  0x01, 0xFD, 0x02, 0x00, 0x01, 0xF7, 0x01, 0xFF, 0x01, 0xFC, 0x08, 0x00, 0x01, 0xF7, 0x01,
  0xFF, 0x01, 0xFC, 0x02, 0x00, 0x01, 0xFF, 0x01, 0xF9, 0x01, 0xFF, 0x01, 0xFB, 0x80, 0x00,
  0x01, 0xD8, 0x02, 0xFB, 0x03, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x0A, 0x00, 0x06, 0xFF, 0x01,
  0xFB, 0x0A, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x0D, 0x00, 0x01, 0xF6, 0x06, 0xFF,
  0x01, 0xFB, 0x09, 0x00, 0x01, 0xF4, 0x03, 0xFF, 0x01, 0xFD, 0x02, 0xFF, 0x01, 0xFB, 0x09,
  0x00, 0x01, 0xF9, 0x05, 0xFF, 0x01, 0xFD, 0x01, 0xFC, 0x08, 0x00, 0x01, 0xD8, 0x01, 0xF9,
  0x06, 0xFF, 0x01, 0xF9, 0x08, 0x00, 0x01, 0xD8, 0x01, 0xF8, 0x01, 0xFF, 0x01, 0xFE, 0x04,
  0xFF, 0x01, 0xFB, 0x80, 0x00, 0x01, 0xD8, 0x01, 0xF9, 0x01, 0xFC, 0x03, 0x00, 0x01, 0xD8,
  0x01, 0xF9, 0x01, 0xFC, 0x0E, 0x00, 0x01, 0xEF, 0x01, 0xFF, 0x01, 0xFB, 0x0A, 0x00, 0x01,
  0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x0E, 0x00, 0x01, 0xFF, 0x01, 0xFD, 0x04, 0xFF, 0x01, 0xFC,
  0x0A, 0x00, 0x01, 0xFD, 0x02, 0xFF, 0x01, 0xFD, 0x01, 0xFF, 0x01, 0xF9, 0x01, 0xFC, 0x0A,
  0x00, 0x01, 0xFF, 0x01, 0xFD, 0x04, 0xFF, 0x01, 0xFB, 0x08, 0x00, 0x01, 0xD8, 0x01, 0xF9,
  0x04, 0xFF, 0x01, 0xFE, 0x01, 0xFF, 0x0A, 0x00, 0x01, 0xFF, 0x01, 0xFA, 0x02, 0xFF, 0x01,
  0xFC, 0x01, 0xFF, 0x01, 0xF8, 0x01, 0xFC, 0x96, 0x00, 0x01, 0xBB, 0x01, 0xF8, 0x02, 0xFF,
  0x1D, 0x00, 0x04, 0xFF, 0x0C, 0x00, 0x02, 0xFF, 0x10, 0x00, 0x03, 0xFF, 0x0E, 0x00, 0x02,
  0xFF, 0x0E, 0x00, 0x02, 0xFF, 0x96, 0x00, 0x01, 0xF9, 0x03, 0xFF, 0x01, 0xFD, 0x01, 0xFF,
  0x01, 0xFC, 0xF9, 0x00, 0x01, 0xF5, 0x04, 0xFF, 0x01, 0xFE, 0xFB, 0x00, 0x04, 0xFF, 0xFF,
  0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00,
  0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF,
  0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00,
  0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF,
  0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00,
  0xFF, 0x00, 0x8B, 0x00, 0x04, 0xFF, 0x1D, 0x00, 0x03, 0xFF, 0x1F, 0x00, 0x03, 0xFF, 0x3E,
  0x00, 0x01, 0xFD, 0x09, 0xFF, 0x01, 0xFB, 0x06, 0x00, 0x01, 0xF7, 0x01, 0xFD, 0x01, 0xE4,
  0x06, 0x00, 0x01, 0xF8, 0x01, 0xFF, 0x01, 0xFE, 0x05, 0x00, 0x01, 0xF8, 0x01, 0xFF, 0x01,
  0xFC, 0x05, 0x00, 0x01, 0xC5, 0x01, 0xF8, 0x01, 0xFE, 0x01, 0xE4, 0x05, 0x00, 0x01, 0xF6,
  0x01, 0xFD, 0x01, 0xE9, 0x06, 0x00, 0x01, 0xF5, 0x01, 0xFE, 0x01, 0xFF, 0x05, 0x00, 0x01,
  0xF4, 0x01, 0xFC, 0x01, 0xF0, 0x06, 0x00, 0x01, 0xF9, 0x02, 0xFF, 0x05, 0x00, 0x01, 0xF5,
  0x01, 0xFD, 0x01, 0xE9, 0x06, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x05, 0x00, 0x01,
  0xF5, 0x09, 0xFF, 0x01, 0xFD, 0x01, 0xE9, 0x08, 0x00, 0x01, 0xFF, 0x01, 0xFB, 0x05, 0xFF,
  0x01, 0xFC, 0x07, 0x00, 0x01, 0xD8, 0x01, 0xF9, 0x06, 0xFF, 0x0A, 0x00, 0x01, 0xFF, 0x01,
  0xFD, 0x03, 0xFF, 0x01, 0xFE, 0x01, 0xFF, 0x09, 0x00, 0x01, 0xD8, 0x01, 0xF9, 0x06, 0xFF,
  0x0A, 0x00, 0x01, 0xFF, 0x01, 0xFD, 0x03, 0xFF, 0x01, 0xFE, 0x01, 0xFF, 0x08, 0x00, 0x01,
  0xF5, 0x01, 0xFF, 0x01, 0xFC, 0x06, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x05, 0x00,
  0x01, 0xF5, 0x01, 0xFF, 0x01, 0xFE, 0x06, 0x00, 0x01, 0xF7, 0x01, 0xFD, 0x01, 0xE9, 0x06,
  0x00, 0x01, 0xD8, 0x01, 0xF9, 0x01, 0xFC, 0x0E, 0x00, 0x01, 0xFD, 0x09, 0xFF, 0x01, 0xFB,
  0x06, 0x00, 0x01, 0xF8, 0x01, 0xFF, 0x01, 0xFB, 0x05, 0x00, 0x01, 0xD8, 0x01, 0xF9, 0x01,
  0xFD, 0x01, 0xE5, 0x05, 0x00, 0x01, 0xEF, 0x01, 0xFF, 0x01, 0xFE, 0x01, 0xE5, 0x04, 0x00,
  0x01, 0xF8, 0x01, 0xFF, 0x01, 0xFB, 0x06, 0x00, 0x01, 0xF6, 0x01, 0xFD, 0x01, 0xE9, 0x06,
  0x00, 0x01, 0xF5, 0x02, 0xFF, 0x05, 0x00, 0x01, 0xF5, 0x01, 0xFE, 0x01, 0xFF, 0x06, 0x00,
  0x01, 0xF7, 0x02, 0xFF, 0x05, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x06, 0x00, 0x01,
  0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x05, 0x00, 0x01, 0xF9, 0x09, 0xFF, 0x01, 0xFD, 0x01, 0xE9,
  0x07, 0x00, 0x01, 0xF9, 0x06, 0xFF, 0x01, 0xFD, 0x01, 0xFB, 0x07, 0x00, 0x01, 0xD8, 0x01,
  0xFB, 0x06, 0xFF, 0x01, 0xFC, 0x08, 0x00, 0x01, 0xFF, 0x01, 0xFD, 0x01, 0xFF, 0x01, 0xFE,
  0x04, 0xFF, 0x01, 0xFC, 0x08, 0x00, 0x01, 0xD8, 0x01, 0xFB, 0x06, 0xFF, 0x01, 0xFC, 0x08,
  0x00, 0x01, 0xFF, 0x01, 0xFD, 0x01, 0xFF, 0x01, 0xFE, 0x04, 0xFF, 0x01, 0xFB, 0x07, 0x00,
  0x01, 0xF5, 0x01, 0xFF, 0x01, 0xFC, 0x06, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x05,
  0x00, 0x01, 0xF5, 0x01, 0xFF, 0x01, 0xFB, 0x05, 0x00, 0x01, 0xF7, 0x01, 0xFF, 0x01, 0xFD,
  0x01, 0xE9, 0x06, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x16, 0x00, 0x01, 0xF6, 0x01, 0xFF, 0x01,
  0xFE, 0x06, 0x00, 0x01, 0xB7, 0x01, 0xFD, 0x01, 0xFC, 0x05, 0x00, 0x01, 0xF4, 0x01, 0xFF,
  0x01, 0xFC, 0x07, 0x00, 0x01, 0xF8, 0x01, 0xFF, 0x01, 0xFC, 0x03, 0x00, 0x01, 0xB7, 0x01,
  0xFC, 0x01, 0xFE, 0x01, 0xFD, 0x06, 0x00, 0x01, 0xF6, 0x01, 0xFD, 0x01, 0xE9, 0x06, 0x00,
  0x01, 0xF5, 0x02, 0xFF, 0x05, 0x00, 0x01, 0xF9, 0x01, 0xFF, 0x01, 0xFE, 0x06, 0x00, 0x01,
  0xF7, 0x01, 0xFD, 0x01, 0xF0, 0x05, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x06, 0x00,
  0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x09, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x0B, 0x00, 0x01,
  0xFB, 0x01, 0xFF, 0x01, 0xFE, 0x01, 0xFF, 0x0D, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x03, 0x00,
  0x01, 0xFF, 0x01, 0xF9, 0x01, 0xFF, 0x01, 0xFC, 0x07, 0x00, 0x01, 0xF7, 0x01, 0xFF, 0x01,
  0xFD, 0x03, 0x00, 0x01, 0xFF, 0x01, 0xFC, 0x01, 0xFF, 0x01, 0xFD, 0x07, 0x00, 0x01, 0xD8,
  0x02, 0xFB, 0x03, 0x00, 0x01, 0xFF, 0x01, 0xF9, 0x01, 0xFF, 0x01, 0xFC, 0x07, 0x00, 0x01,
  0xF7, 0x01, 0xFF, 0x01, 0xFD, 0x03, 0x00, 0x01, 0xFF, 0x01, 0xFC, 0x01, 0xFF, 0x01, 0xFD,
  0x06, 0x00, 0x01, 0xF5, 0x02, 0xFF, 0x01, 0xFB, 0x05, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01,
  0xE9, 0x05, 0x00, 0x01, 0xF5, 0x02, 0xFF, 0x01, 0xFD, 0x04, 0x00, 0x01, 0xF5, 0x01, 0xFF,
  0x01, 0xFD, 0x01, 0xE9, 0x06, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x15, 0x00, 0x01, 0xF9, 0x01,
  0xFF, 0x01, 0xFB, 0x08, 0x00, 0x01, 0xF6, 0x01, 0xFF, 0x01, 0xFD, 0x04, 0x00, 0x01, 0xF5,
  0x01, 0xFF, 0x01, 0xF9, 0x07, 0x00, 0x01, 0xBB, 0x01, 0xFB, 0x01, 0xFE, 0x01, 0xFD, 0x02,
  0x00, 0x01, 0xF5, 0x01, 0xFF, 0x01, 0xFC, 0x07, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9,
  0x06, 0x00, 0x01, 0xF5, 0x01, 0xFE, 0x01, 0xE5, 0x05, 0x00, 0x01, 0xF6, 0x01, 0xFF, 0x01,
  0xFC, 0x05, 0x00, 0x01, 0xC5, 0x02, 0xFB, 0x06, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9,
  0x06, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x09, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x0B,
  0x00, 0x01, 0xF4, 0x01, 0xFF, 0x01, 0xFD, 0x0E, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x04, 0x00,
  0x01, 0xC5, 0x01, 0xF8, 0x01, 0xFE, 0x01, 0xE4, 0x05, 0x00, 0x01, 0xF9, 0x01, 0xFF, 0x01,
  0xFB, 0x05, 0x00, 0x01, 0xF6, 0x01, 0xFF, 0x01, 0xFB, 0x07, 0x00, 0x01, 0xD8, 0x02, 0xFB,
  0x04, 0x00, 0x01, 0xC5, 0x01, 0xF8, 0x01, 0xFE, 0x01, 0xE4, 0x05, 0x00, 0x02, 0xFF, 0x01,
  0xFB, 0x05, 0x00, 0x01, 0xF6, 0x01, 0xFF, 0x01, 0xFB, 0x06, 0x00, 0x01, 0xF5, 0x02, 0xFF,
  0x01, 0xFD, 0x01, 0xE9, 0x04, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x05, 0x00, 0x01,
  0xF5, 0x02, 0xFF, 0x01, 0xFC, 0x03, 0x00, 0x01, 0xF9, 0x02, 0xFF, 0x01, 0xFD, 0x01, 0xE9,
  0x06, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x14, 0x00, 0x01, 0xBB, 0x01, 0xFB, 0x01, 0xFE, 0x01,
  0xF9, 0x08, 0x00, 0x01, 0xEF, 0x01, 0xFF, 0x01, 0xFB, 0x03, 0x00, 0x01, 0xF7, 0x01, 0xFF,
  0x01, 0xFB, 0x09, 0x00, 0x01, 0xF9, 0x01, 0xFF, 0x01, 0xFB, 0x01, 0x00, 0x01, 0xEF, 0x01,
  0xFF, 0x01, 0xFD, 0x01, 0xE9, 0x07, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x06, 0x00,
  0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x05, 0x00, 0x01, 0xBB, 0x01, 0xFC, 0x01, 0xFB, 0x05,
  0x00, 0x01, 0xFD, 0x01, 0xFF, 0x01, 0xFC, 0x06, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9,
  0x06, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x09, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x0B,
  0x00, 0x01, 0xF5, 0x01, 0xFF, 0x01, 0xFB, 0x0E, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x05, 0x00,
  0x01, 0xF2, 0x02, 0xFF, 0x05, 0x00, 0x01, 0xF5, 0x02, 0xFF, 0x06, 0x00, 0x01, 0xF7, 0x01,
  0xFE, 0x01, 0xFD, 0x06, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x05, 0x00, 0x01, 0xF2, 0x02, 0xFF,
  0x05, 0x00, 0x01, 0xF8, 0x02, 0xFF, 0x06, 0x00, 0x01, 0xF7, 0x01, 0xFE, 0x01, 0xFD, 0x05,
  0x00, 0x01, 0xF5, 0x01, 0xFD, 0x02, 0xFF, 0x01, 0xFC, 0x04, 0x00, 0x01, 0xF5, 0x01, 0xFD,
  0x01, 0xE9, 0x05, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x02, 0xFF, 0x01, 0xFB, 0x02, 0x00, 0x01,
  0xF7, 0x01, 0xFD, 0x01, 0xFF, 0x01, 0xFD, 0x01, 0xE9, 0x06, 0x00, 0x01, 0xD8, 0x02, 0xFB,
  0x14, 0x00, 0x01, 0xF6, 0x01, 0xFF, 0x01, 0xFC, 0x0A, 0x00, 0x01, 0xF7, 0x01, 0xFF, 0x01,
  0xFC, 0x02, 0x00, 0x01, 0xF7, 0x01, 0xFE, 0x01, 0xF9, 0x0A, 0x00, 0x01, 0xF7, 0x02, 0xFF,
  0x01, 0xF6, 0x01, 0xFF, 0x01, 0xFD, 0x08, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xF0, 0x02,
  0x00, 0x02, 0xFF, 0x02, 0x00, 0x01, 0xF9, 0x01, 0xFD, 0x01, 0xE9, 0x06, 0x00, 0x01, 0xF5,
  0x01, 0xFD, 0x01, 0xE9, 0x04, 0x00, 0x01, 0xF5, 0x01, 0xFF, 0x01, 0xFE, 0x06, 0x00, 0x01,
  0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x06, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x09, 0x00,
  0x01, 0xD8, 0x02, 0xFB, 0x0B, 0x00, 0x01, 0xFE, 0x01, 0xFF, 0x01, 0xFC, 0x0E, 0x00, 0x01,
  0xD8, 0x02, 0xFB, 0x05, 0x00, 0x01, 0xF2, 0x02, 0xFF, 0x05, 0x00, 0x01, 0xF6, 0x01, 0xFD,
  0x01, 0xF0, 0x06, 0x00, 0x01, 0xF5, 0x01, 0xFF, 0x01, 0xFD, 0x06, 0x00, 0x01, 0xD8, 0x02,
  0xFB, 0x05, 0x00, 0x01, 0xF2, 0x02, 0xFF, 0x05, 0x00, 0x01, 0xF6, 0x01, 0xFD, 0x01, 0xF0,
  0x06, 0x00, 0x01, 0xF5, 0x01, 0xFF, 0x01, 0xFD, 0x05, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01,
  0xFF, 0x01, 0xF5, 0x01, 0xFE, 0x01, 0xE3, 0x03, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9,
  0x05, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xFF, 0x01, 0xF7, 0x01, 0xFC, 0x01, 0x00, 0x01,
  0xF4, 0x01, 0xFF, 0x01, 0xFE, 0x01, 0xF9, 0x01, 0xFD, 0x01, 0xE9, 0x06, 0x00, 0x01, 0xD8,
  0x02, 0xFB, 0x13, 0x00, 0x01, 0xFD, 0x01, 0xFF, 0x01, 0xFC, 0x0B, 0x00, 0x01, 0xB7, 0x02,
  0xFD, 0x01, 0x00, 0x01, 0xF2, 0x01, 0xFF, 0x01, 0xFB, 0x0B, 0x00, 0x01, 0xF7, 0x03, 0xFF,
  0x01, 0xFB, 0x09, 0x00, 0x01, 0xF5, 0x02, 0xFF, 0x01, 0x00, 0x01, 0xF6, 0x01, 0xFF, 0x01,
  0xFA, 0x02, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x06, 0x00, 0x01, 0xF8, 0x01, 0xFF,
  0x01, 0xFE, 0x04, 0x00, 0x01, 0xF5, 0x01, 0xFE, 0x01, 0xFD, 0x06, 0x00, 0x01, 0xF5, 0x01,
  0xFD, 0x01, 0xE9, 0x06, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x09, 0x00, 0x01, 0xD8,
  0x02, 0xFB, 0x0B, 0x00, 0x01, 0xBB, 0x01, 0xFC, 0x03, 0xFF, 0x0C, 0x00, 0x01, 0xD8, 0x02,
  0xFB, 0x05, 0x00, 0x01, 0xF7, 0x01, 0xFF, 0x01, 0xFE, 0x05, 0x00, 0x01, 0xF4, 0x01, 0xFD,
  0x01, 0xE9, 0x06, 0x00, 0x01, 0xF5, 0x02, 0xFF, 0x06, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x05,
  0x00, 0x01, 0xF7, 0x01, 0xFF, 0x01, 0xFE, 0x05, 0x00, 0x01, 0xF4, 0x01, 0xFD, 0x01, 0xE9,
  0x06, 0x00, 0x01, 0xF5, 0x02, 0xFF, 0x05, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0x00, 0x01,
  0xF6, 0x01, 0xFF, 0x01, 0xFB, 0x03, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x05, 0x00,
  0x01, 0xF5, 0x01, 0xFD, 0x01, 0x00, 0x01, 0xF4, 0x02, 0xFF, 0x01, 0xFA, 0x01, 0xFC, 0x01,
  0x00, 0x01, 0xF2, 0x01, 0xFD, 0x01, 0xE9, 0x06, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x13, 0x00,
  0x01, 0xF6, 0x01, 0xFF, 0x01, 0xFE, 0x0C, 0x00, 0x01, 0xF5, 0x02, 0xFF, 0x02, 0xFD, 0x01,
  0xE5, 0x0C, 0x00, 0x01, 0xF7, 0x02, 0xFF, 0x01, 0xFB, 0x09, 0x00, 0x01, 0xF5, 0x02, 0xFF,
  0x01, 0x00, 0x01, 0xF9, 0x01, 0xFF, 0x01, 0xFD, 0x01, 0xE9, 0x01, 0x00, 0x01, 0xF6, 0x01,
  0xFD, 0x01, 0xE9, 0x06, 0x00, 0x01, 0xFE, 0x01, 0xFF, 0x01, 0xFB, 0x03, 0x00, 0x01, 0xD8,
  0x01, 0xF8, 0x01, 0xFB, 0x07, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x06, 0x00, 0x01,
  0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x09, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x0C, 0x00, 0x01, 0xFE,
  0x06, 0xFF, 0x09, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x04, 0x00, 0x02, 0xFF, 0x01, 0xFD, 0x01,
  0xF0, 0x05, 0x00, 0x01, 0xF4, 0x01, 0xFD, 0x01, 0xE9, 0x06, 0x00, 0x01, 0xF5, 0x02, 0xFF,
  0x06, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x04, 0x00, 0x02, 0xFF, 0x01, 0xFD, 0x01, 0xF0, 0x05,
  0x00, 0x01, 0xF4, 0x01, 0xFD, 0x01, 0xE9, 0x06, 0x00, 0x01, 0xF5, 0x02, 0xFF, 0x05, 0x00,
  0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x01, 0x00, 0x01, 0xF4, 0x01, 0xFF, 0x01, 0xFC, 0x02,
  0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x05, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9,
  0x01, 0x00, 0x01, 0xF8, 0x02, 0xFF, 0x01, 0xFD, 0x01, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01,
  0xE9, 0x06, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x12, 0x00, 0x01, 0xF9, 0x01, 0xFF, 0x01, 0xFB,
  0x0E, 0x00, 0x01, 0xF7, 0x02, 0xFF, 0x01, 0xFC, 0x0D, 0x00, 0x01, 0xF4, 0x02, 0xFF, 0x01,
  0xF9, 0x09, 0x00, 0x01, 0xFC, 0x01, 0xFF, 0x01, 0xFE, 0x01, 0x00, 0x01, 0xF4, 0x02, 0xFF,
  0x01, 0xFB, 0x01, 0x00, 0x01, 0xF4, 0x01, 0xFB, 0x07, 0x00, 0x01, 0xB7, 0x01, 0xFC, 0x01,
  0xFB, 0x03, 0x00, 0x01, 0xFD, 0x01, 0xFF, 0x01, 0xFB, 0x07, 0x00, 0x01, 0xF5, 0x01, 0xFD,
  0x01, 0xE9, 0x06, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x09, 0x00, 0x01, 0xD8, 0x02,
  0xFB, 0x0D, 0x00, 0x06, 0xFF, 0x01, 0xFC, 0x01, 0xE5, 0x07, 0x00, 0x01, 0xD8, 0x01, 0xFB,
  0x01, 0xFD, 0x06, 0xFF, 0x01, 0xFE, 0x06, 0x00, 0x01, 0xF8, 0x01, 0xFF, 0x01, 0xE4, 0x06,
  0x00, 0x01, 0xF5, 0x02, 0xFF, 0x06, 0x00, 0x01, 0xD8, 0x01, 0xFB, 0x01, 0xFD, 0x06, 0xFF,
  0x01, 0xFE, 0x06, 0x00, 0x01, 0xF8, 0x01, 0xFF, 0x01, 0xE4, 0x06, 0x00, 0x01, 0xF5, 0x02,
  0xFF, 0x05, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x01, 0x00, 0x01, 0xF9, 0x01, 0xFF,
  0x01, 0xFB, 0x02, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x05, 0x00, 0x01, 0xF5, 0x01,
  0xFD, 0x01, 0xE9, 0x01, 0x00, 0x01, 0xF9, 0x01, 0xFF, 0x01, 0xFC, 0x02, 0x00, 0x01, 0xF5,
  0x01, 0xFD, 0x01, 0xE9, 0x06, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x11, 0x00, 0x01, 0xBB, 0x01,
  0xFC, 0x01, 0xFE, 0x01, 0xF9, 0x0E, 0x00, 0x01, 0xF9, 0x01, 0xFF, 0x01, 0xFB, 0x0D, 0x00,
  0x01, 0xEA, 0x03, 0xFF, 0x01, 0xFB, 0x09, 0x00, 0x01, 0xFD, 0x01, 0xFF, 0x01, 0xFB, 0x01,
  0x00, 0x01, 0xFB, 0x01, 0xFF, 0x01, 0xF8, 0x01, 0xFA, 0x01, 0x00, 0x01, 0xF7, 0x01, 0xFB,
  0x08, 0x00, 0x01, 0xF7, 0x01, 0xFD, 0x01, 0xE9, 0x02, 0x00, 0x01, 0xF9, 0x01, 0xFF, 0x01,
  0xFD, 0x07, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x06, 0x00, 0x01, 0xF5, 0x01, 0xFD,
  0x01, 0xE9, 0x09, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x10, 0x00, 0x02, 0xFF, 0x01, 0xFB, 0x01,
  0xFF, 0x01, 0xFB, 0x07, 0x00, 0x01, 0xD8, 0x01, 0xF9, 0x06, 0xFF, 0x01, 0xFD, 0x07, 0x00,
  0x01, 0xF6, 0x01, 0xFD, 0x01, 0xE9, 0x06, 0x00, 0x01, 0xF5, 0x02, 0xFF, 0x06, 0x00, 0x01,
  0xD8, 0x01, 0xF9, 0x06, 0xFF, 0x01, 0xFE, 0x07, 0x00, 0x01, 0xF6, 0x01, 0xFD, 0x01, 0xE9,
  0x06, 0x00, 0x01, 0xF5, 0x02, 0xFF, 0x05, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x02,
  0x00, 0x01, 0xF6, 0x01, 0xFF, 0x01, 0xFD, 0x01, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9,
  0x05, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x02, 0x00, 0x02, 0xFF, 0x02, 0x00, 0x01,
  0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x06, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x11, 0x00, 0x01, 0xF6,
  0x01, 0xFF, 0x01, 0xFC, 0x0F, 0x00, 0x01, 0xD8, 0x01, 0xF9, 0x01, 0xFB, 0x0D, 0x00, 0x01,
  0xF4, 0x02, 0xFF, 0x01, 0xF8, 0x01, 0xFF, 0x01, 0xFB, 0x08, 0x00, 0x01, 0xC5, 0x01, 0xFB,
  0x01, 0xFA, 0x03, 0xFF, 0x01, 0xF4, 0x01, 0xFA, 0x01, 0x00, 0x01, 0xFB, 0x01, 0xFC, 0x08,
  0x00, 0x01, 0xF9, 0x01, 0xFF, 0x01, 0xFD, 0x02, 0x00, 0x01, 0xF7, 0x01, 0xFD, 0x01, 0xE9,
  0x07, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xF0, 0x06, 0x00, 0x01, 0xF9, 0x01, 0xFD, 0x01,
  0xE9, 0x09, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x13, 0x00, 0x01, 0xF6, 0x01, 0xFF, 0x01, 0xFE,
  0x06, 0x00, 0x01, 0xD8, 0x01, 0xFB, 0x01, 0xFE, 0x04, 0xFF, 0x01, 0xFE, 0x01, 0xF0, 0x07,
  0x00, 0x01, 0xF4, 0x01, 0xFD, 0x01, 0xE9, 0x06, 0x00, 0x01, 0xF5, 0x02, 0xFF, 0x06, 0x00,
  0x01, 0xD8, 0x01, 0xFB, 0x01, 0xFE, 0x05, 0xFF, 0x08, 0x00, 0x01, 0xF4, 0x01, 0xFD, 0x01,
  0xE9, 0x06, 0x00, 0x01, 0xF5, 0x02, 0xFF, 0x05, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9,
  0x02, 0x00, 0x01, 0xB5, 0x01, 0xFD, 0x01, 0xFB, 0x01, 0x00, 0x01, 0xF2, 0x01, 0xFD, 0x01,
  0xE9, 0x05, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x06, 0x00, 0x01, 0xF5, 0x01, 0xFD,
  0x01, 0xE9, 0x06, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x10, 0x00, 0x01, 0xF6, 0x01, 0xFF, 0x01,
  0xFC, 0x10, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x0C, 0x00, 0x01, 0xF9, 0x01, 0xFF, 0x01, 0xFB,
  0x01, 0x00, 0x01, 0xEF, 0x01, 0xFF, 0x01, 0xFB, 0x08, 0x00, 0x01, 0xC5, 0x01, 0xFB, 0x03,
  0xFD, 0x01, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xFF, 0x01, 0xF9, 0x01, 0xFB, 0x08, 0x00,
  0x02, 0xFF, 0x01, 0xFC, 0x01, 0x00, 0x01, 0xB5, 0x01, 0xFD, 0x01, 0xFB, 0x08, 0x00, 0x01,
  0xF5, 0x02, 0xFF, 0x06, 0x00, 0x01, 0xF6, 0x01, 0xFD, 0x01, 0xE9, 0x09, 0x00, 0x01, 0xD8,
  0x02, 0xFB, 0x13, 0x00, 0x01, 0xF7, 0x01, 0xFF, 0x01, 0xFC, 0x06, 0x00, 0x01, 0xD8, 0x02,
  0xFB, 0x03, 0x00, 0x01, 0xF7, 0x01, 0xFF, 0x01, 0xFD, 0x07, 0x00, 0x01, 0xF4, 0x01, 0xFD,
  0x01, 0xE9, 0x02, 0x00, 0x01, 0xFF, 0x03, 0x00, 0x01, 0xF5, 0x01, 0xFF, 0x01, 0xFB, 0x06,
  0x00, 0x01, 0xD8, 0x02, 0xFB, 0x0D, 0x00, 0x01, 0xF4, 0x01, 0xFD, 0x01, 0xE9, 0x06, 0x00,
  0x01, 0xF5, 0x02, 0xFF, 0x05, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x03, 0x00, 0x01,
  0xF5, 0x01, 0xFF, 0x01, 0xFE, 0x01, 0xF9, 0x01, 0xFD, 0x01, 0xE9, 0x05, 0x00, 0x01, 0xF5,
  0x01, 0xFD, 0x01, 0xE9, 0x06, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x06, 0x00, 0x01,
  0xD8, 0x02, 0xFB, 0x10, 0x00, 0x01, 0xF6, 0x01, 0xFF, 0x01, 0xFB, 0x10, 0x00, 0x01, 0xD8,
  0x02, 0xFB, 0x0C, 0x00, 0x01, 0xF6, 0x01, 0xFF, 0x01, 0xFD, 0x02, 0x00, 0x01, 0xF5, 0x01,
  0xFF, 0x01, 0xFC, 0x08, 0x00, 0x01, 0xF4, 0x02, 0xFE, 0x01, 0xFB, 0x01, 0x00, 0x01, 0xF9,
  0x03, 0xFF, 0x01, 0xFD, 0x09, 0x00, 0x01, 0xF6, 0x01, 0xFC, 0x01, 0x00, 0x01, 0xF5, 0x01,
  0xFF, 0x01, 0xFD, 0x08, 0x00, 0x01, 0xF9, 0x01, 0xFF, 0x01, 0xFD, 0x06, 0x00, 0x01, 0xF4,
  0x01, 0xFD, 0x01, 0xE9, 0x09, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x13, 0x00, 0x01, 0xF9, 0x01,
  0xFF, 0x01, 0xFB, 0x06, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x03, 0x00, 0x01, 0xEA, 0x01, 0xFF,
  0x01, 0xFB, 0x07, 0x00, 0x01, 0xF9, 0x01, 0xFF, 0x01, 0xFD, 0x01, 0x00, 0x01, 0xC5, 0x01,
  0xFC, 0x01, 0xFB, 0x02, 0x00, 0x01, 0xF8, 0x01, 0xFD, 0x01, 0xE9, 0x06, 0x00, 0x01, 0xD8,
  0x02, 0xFB, 0x0D, 0x00, 0x01, 0xF9, 0x01, 0xFF, 0x01, 0xFD, 0x06, 0x00, 0x01, 0xF5, 0x01,
  0xFD, 0x01, 0xE9, 0x05, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x03, 0x00, 0x01, 0xC5,
  0x01, 0xFB, 0x01, 0xFC, 0x01, 0xFF, 0x01, 0xFD, 0x01, 0xE9, 0x05, 0x00, 0x01, 0xF5, 0x01,
  0xFD, 0x01, 0xE9, 0x06, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x06, 0x00, 0x01, 0xD8,
  0x02, 0xFB, 0x0F, 0x00, 0x01, 0xF9, 0x01, 0xFF, 0x01, 0xFC, 0x11, 0x00, 0x01, 0xD8, 0x02,
  0xFB, 0x0B, 0x00, 0x01, 0xF9, 0x01, 0xFF, 0x01, 0xFB, 0x03, 0x00, 0x01, 0xF6, 0x01, 0xFF,
  0x01, 0xFC, 0x08, 0x00, 0x01, 0xF7, 0x02, 0xFF, 0x01, 0xFB, 0x02, 0x00, 0x01, 0xF8, 0x02,
  0xFF, 0x01, 0xFE, 0x09, 0x00, 0x01, 0xF9, 0x02, 0xFF, 0x01, 0xF8, 0x01, 0xFD, 0x01, 0xE9,
  0x08, 0x00, 0x01, 0xF9, 0x01, 0xFF, 0x01, 0xFB, 0x05, 0x00, 0x01, 0xB5, 0x01, 0xFD, 0x01,
  0xFC, 0x0A, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x13, 0x00, 0x01, 0xF8, 0x01, 0xFF, 0x01, 0xFD,
  0x06, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x04, 0x00, 0x01, 0xF4, 0x01, 0xFF, 0x01, 0xFD, 0x06,
  0x00, 0x01, 0xF9, 0x01, 0xFF, 0x01, 0xFB, 0x01, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x01, 0x00,
  0x01, 0xFC, 0x01, 0xFF, 0x01, 0xFB, 0x07, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x0D, 0x00, 0x01,
  0xF9, 0x01, 0xFF, 0x01, 0xFB, 0x05, 0x00, 0x01, 0xFC, 0x01, 0xFF, 0x01, 0xFB, 0x06, 0x00,
  0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x04, 0x00, 0x01, 0xF5, 0x02, 0xFF, 0x01, 0xFD, 0x01,
  0xE9, 0x05, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x06, 0x00, 0x01, 0xF5, 0x01, 0xFD,
  0x01, 0xE9, 0x06, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x0E, 0x00, 0x01, 0xB7, 0x01, 0xFC, 0x01,
  0xFE, 0x01, 0xFD, 0x11, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x0A, 0x00, 0x01, 0xD8, 0x01, 0xF8,
  0x01, 0xFF, 0x01, 0xFE, 0x04, 0x00, 0x01, 0xF5, 0x01, 0xFF, 0x01, 0xFC, 0x07, 0x00, 0x01,
  0xF5, 0x03, 0xFF, 0x02, 0x00, 0x01, 0xF5, 0x01, 0xFF, 0x01, 0xFD, 0x01, 0xE9, 0x09, 0x00,
  0x01, 0xFB, 0x01, 0xFD, 0x02, 0xFF, 0x01, 0xFB, 0x09, 0x00, 0x01, 0xD8, 0x01, 0xF9, 0x02,
  0xFF, 0x03, 0x00, 0x01, 0xFF, 0x01, 0xFA, 0x01, 0xFF, 0x01, 0xFC, 0x0A, 0x00, 0x01, 0xD8,
  0x02, 0xFB, 0x0C, 0x00, 0x01, 0xFF, 0x05, 0x00, 0x02, 0xFF, 0x01, 0xFE, 0x01, 0xE4, 0x06,
  0x00, 0x01, 0xD8, 0x02, 0xFB, 0x04, 0x00, 0x01, 0xF3, 0x01, 0xFF, 0x01, 0xFB, 0x07, 0x00,
  0x01, 0xF5, 0x01, 0xFF, 0x01, 0xFC, 0x01, 0xFF, 0x01, 0xF9, 0x01, 0xFC, 0x01, 0xFF, 0x01,
  0xFC, 0x01, 0xFF, 0x01, 0xFD, 0x07, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x0E, 0x00, 0x01, 0xF5,
  0x01, 0xFF, 0x01, 0xFE, 0x03, 0x00, 0x01, 0xFF, 0x01, 0xFC, 0x01, 0xFF, 0x01, 0xFD, 0x06,
  0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x05, 0x00, 0x01, 0xF8, 0x01, 0xFF, 0x01, 0xFD,
  0x01, 0xE9, 0x05, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x06, 0x00, 0x01, 0xF5, 0x01,
  0xFD, 0x01, 0xE9, 0x06, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x0E, 0x00, 0x01, 0xF5, 0x09, 0xFF,
  0x01, 0xFC, 0x01, 0xE9, 0x09, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x0A, 0x00, 0x01, 0xF5, 0x01,
  0xFF, 0x01, 0xFB, 0x05, 0x00, 0x01, 0xEA, 0x01, 0xFF, 0x01, 0xFD, 0x01, 0xE5, 0x06, 0x00,
  0x01, 0xFE, 0x01, 0xFF, 0x01, 0xFC, 0x01, 0xF0, 0x02, 0x00, 0x01, 0xF9, 0x01, 0xFF, 0x01,
  0xFB, 0x0B, 0x00, 0x01, 0xF7, 0x02, 0xFF, 0x01, 0xFE, 0x0A, 0x00, 0x01, 0xFE, 0x02, 0xFF,
  0x01, 0xFE, 0x04, 0xFF, 0x01, 0xFC, 0x0B, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x0B, 0x00, 0x01,
  0xFD, 0x05, 0xFF, 0x01, 0xFD, 0x02, 0xFF, 0x01, 0xFE, 0x07, 0x00, 0x01, 0xD8, 0x02, 0xFB,
  0x05, 0x00, 0x01, 0xF5, 0x02, 0xFF, 0x06, 0x00, 0x01, 0xFF, 0x01, 0xFD, 0x06, 0xFF, 0x01,
  0xFC, 0x08, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x0E, 0x00, 0x01, 0xFF, 0x01, 0xFD, 0x01, 0xFF,
  0x01, 0xFE, 0x04, 0xFF, 0x01, 0xFC, 0x07, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x05,
  0x00, 0x01, 0xF4, 0x01, 0xFF, 0x01, 0xFD, 0x01, 0xE9, 0x05, 0x00, 0x01, 0xF5, 0x01, 0xFD,
  0x01, 0xE9, 0x06, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x06, 0x00, 0x01, 0xD8, 0x01,
  0xF9, 0x01, 0xFE, 0x06, 0xFF, 0x01, 0xFC, 0x01, 0xE9, 0x06, 0x00, 0x01, 0xF5, 0x09, 0xFF,
  0x01, 0xFD, 0x01, 0xE9, 0x09, 0x00, 0x01, 0xD8, 0x01, 0xF9, 0x01, 0xFC, 0x09, 0x00, 0x01,
  0xD8, 0x01, 0xF8, 0x01, 0xFE, 0x01, 0xF9, 0x06, 0x00, 0x01, 0xF7, 0x01, 0xFF, 0x01, 0xFC,
  0x06, 0x00, 0x02, 0xFF, 0x01, 0xFB, 0x03, 0x00, 0x02, 0xFF, 0x01, 0xFC, 0x0B, 0x00, 0x01,
  0xF6, 0x01, 0xFF, 0x01, 0xFB, 0x0C, 0x00, 0x01, 0xFF, 0x01, 0xFE, 0x03, 0xFF, 0x01, 0xFE,
  0x01, 0xFF, 0x0C, 0x00, 0x01, 0xD8, 0x01, 0xF9, 0x01, 0xFC, 0x0B, 0x00, 0x01, 0xF9, 0x01,
  0xFC, 0x05, 0xFF, 0x01, 0xFD, 0x01, 0xFF, 0x08, 0x00, 0x01, 0xD8, 0x01, 0xF9, 0x01, 0xFC,
  0x05, 0x00, 0x01, 0xF9, 0x01, 0xFF, 0x01, 0xFC, 0x07, 0x00, 0x07, 0xFF, 0x09, 0x00, 0x01,
  0xD8, 0x01, 0xF9, 0x01, 0xFC, 0x0F, 0x00, 0x05, 0xFF, 0x01, 0xFE, 0x01, 0xFF, 0x08, 0x00,
  0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x06, 0x00, 0x01, 0xF6, 0x01, 0xFD, 0x01, 0xE9, 0x05,
  0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x06, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9,
  0x06, 0x00, 0x01, 0xD8, 0x01, 0xF9, 0x07, 0xFF, 0x01, 0xFD, 0x01, 0xE9, 0x5F, 0x00, 0x03,
  0xFF, 0x1F, 0x00, 0x04, 0xFF, 0x1F, 0x00, 0x01, 0xF7, 0x01, 0xFF, 0x01, 0xFC, 0x1E, 0x00,
  0x03, 0xFF, 0xDC, 0x00, 0x01, 0xF9, 0x04, 0xFF, 0x01, 0xFD, 0x01, 0xF0, 0xFA, 0x00, 0x01,
  0xFF, 0x01, 0xFB, 0x02, 0xFF, 0x01, 0xFE, 0x01, 0xE9, 0xFC, 0x00, 0x03, 0xFF, 0xFF, 0x00,
  0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xAD,
  0x00, 0x04, 0xFF, 0x40, 0x00, 0x04, 0xFF, 0x6F, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9,
  0x05, 0x00, 0x01, 0xF8, 0x01, 0xFF, 0x01, 0xFE, 0x07, 0x00, 0x01, 0xD8, 0x01, 0xF9, 0x07,
  0xFF, 0x01, 0xFD, 0x01, 0xE9, 0x06, 0x00, 0x01, 0xD8, 0x01, 0xF9, 0x06, 0xFF, 0x01, 0xFC,
  0x07, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x06, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01,
  0xE9, 0x08, 0x00, 0x07, 0xFF, 0x01, 0xFC, 0x07, 0x00, 0x01, 0xD8, 0x01, 0xF9, 0x07, 0xFF,
  0x01, 0xFD, 0x01, 0xE9, 0x06, 0x00, 0x01, 0xD8, 0x01, 0xF9, 0x07, 0xFF, 0x01, 0xFD, 0x01,
  0xE9, 0x05, 0x00, 0x01, 0xF5, 0x04, 0xFF, 0x01, 0xFE, 0x02, 0xFF, 0x0C, 0x00, 0x01, 0xFF,
  0x01, 0xFC, 0x05, 0xFF, 0x01, 0xFC, 0x06, 0x00, 0x01, 0xF5, 0x04, 0xFF, 0x01, 0xFE, 0x02,
  0xFF, 0x0D, 0x00, 0x01, 0xF9, 0x01, 0xFF, 0x01, 0xFC, 0x4F, 0x00, 0x01, 0xF5, 0x01, 0xFD,
  0x01, 0xE9, 0x04, 0x00, 0x01, 0xF9, 0x01, 0xFF, 0x01, 0xFB, 0x08, 0x00, 0x01, 0xD8, 0x01,
  0xF8, 0x07, 0xFF, 0x01, 0xFD, 0x01, 0xE9, 0x06, 0x00, 0x01, 0xD8, 0x01, 0xF8, 0x06, 0xFF,
  0x01, 0xFC, 0x07, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x06, 0x00, 0x01, 0xF5, 0x01,
  0xFD, 0x01, 0xE9, 0x06, 0x00, 0x01, 0xD8, 0x01, 0xF8, 0x02, 0xFF, 0x01, 0xFE, 0x03, 0xFF,
  0x01, 0xFD, 0x01, 0xFC, 0x07, 0x00, 0x01, 0xD8, 0x01, 0xFB, 0x07, 0xFF, 0x01, 0xFD, 0x01,
  0xE9, 0x06, 0x00, 0x01, 0xD8, 0x01, 0xFB, 0x07, 0xFF, 0x01, 0xFD, 0x01, 0xE9, 0x05, 0x00,
  0x01, 0xF5, 0x04, 0xFF, 0x01, 0xFD, 0x02, 0xFF, 0x02, 0xFD, 0x08, 0x00, 0x01, 0xC5, 0x01,
  0xF9, 0x06, 0xFF, 0x01, 0xFD, 0x01, 0xFB, 0x06, 0x00, 0x01, 0xF5, 0x07, 0xFF, 0x01, 0xFC,
  0x0C, 0x00, 0x01, 0xF8, 0x02, 0xFF, 0x01, 0xFB, 0x4E, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01,
  0xE9, 0x03, 0x00, 0x01, 0xF9, 0x01, 0xFF, 0x01, 0xFB, 0x11, 0x00, 0x01, 0xF5, 0x01, 0xFD,
  0x01, 0xE9, 0x09, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x0A, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01,
  0xE9, 0x06, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x06, 0x00, 0x01, 0xF6, 0x01, 0xFF,
  0x01, 0xFD, 0x01, 0xFF, 0x0D, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x0E, 0x00, 0x01, 0xD8, 0x02,
  0xFB, 0x0D, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x03, 0x00, 0x01, 0xFF, 0x01, 0xFB,
  0x01, 0xFF, 0x01, 0xFC, 0x01, 0xF0, 0x07, 0x00, 0x01, 0xF5, 0x01, 0xFF, 0x01, 0xFD, 0x01,
  0xFF, 0x0C, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x03, 0x00, 0x01, 0xFF, 0x01, 0xF9,
  0x01, 0xFF, 0x01, 0xFC, 0x0A, 0x00, 0x01, 0xF9, 0x02, 0xFF, 0x01, 0xFB, 0x01, 0xFC, 0x4E,
  0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x02, 0x00, 0x01, 0xF7, 0x01, 0xFF, 0x01, 0xFC,
  0x01, 0xF0, 0x11, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x09, 0x00, 0x01, 0xD8, 0x02,
  0xFB, 0x0A, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x06, 0x00, 0x01, 0xF5, 0x01, 0xFD,
  0x01, 0xE9, 0x05, 0x00, 0x02, 0xFF, 0x01, 0xFC, 0x01, 0xF0, 0x0E, 0x00, 0x01, 0xD8, 0x02,
  0xFB, 0x0E, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x0D, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9,
  0x05, 0x00, 0x01, 0xFA, 0x01, 0xFF, 0x01, 0xFB, 0x06, 0x00, 0x01, 0xF9, 0x01, 0xFF, 0x01,
  0xFC, 0x0E, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x04, 0x00, 0x01, 0xEF, 0x01, 0xFD,
  0x01, 0xFB, 0x0A, 0x00, 0x01, 0xF6, 0x01, 0xFE, 0x01, 0xF0, 0x01, 0xF2, 0x01, 0xFF, 0x01,
  0xFC, 0x4D, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x01, 0x00, 0x02, 0xFF, 0x01, 0xFE,
  0x01, 0xFD, 0x12, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x09, 0x00, 0x01, 0xD8, 0x02,
  0xFB, 0x0A, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x06, 0x00, 0x01, 0xF5, 0x01, 0xFD,
  0x01, 0xE9, 0x05, 0x00, 0x01, 0xF9, 0x01, 0xFF, 0x01, 0xFD, 0x0F, 0x00, 0x01, 0xD8, 0x02,
  0xFB, 0x0E, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x0D, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9,
  0x06, 0x00, 0x01, 0xF8, 0x01, 0xFC, 0x01, 0xF0, 0x05, 0x00, 0x01, 0xF9, 0x01, 0xFF, 0x01,
  0xFD, 0x0E, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x05, 0x00, 0x01, 0xF9, 0x01, 0xFB,
  0x09, 0x00, 0x01, 0xEF, 0x01, 0xFF, 0x01, 0xFB, 0x01, 0x00, 0x01, 0xB5, 0x01, 0xFD, 0x01,
  0xFB, 0x4D, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xF0, 0x01, 0xB7, 0x01, 0xFB, 0x02, 0xFF,
  0x13, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x09, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x0A,
  0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x06, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9,
  0x05, 0x00, 0x01, 0xF4, 0x01, 0xFD, 0x01, 0xE9, 0x0F, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x0E,
  0x00, 0x01, 0xD8, 0x02, 0xFB, 0x0D, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x06, 0x00,
  0x01, 0xF7, 0x01, 0xFF, 0x01, 0xFE, 0x05, 0x00, 0x01, 0xF4, 0x01, 0xFD, 0x01, 0xE9, 0x0E,
  0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x04, 0x00, 0x01, 0xB5, 0x01, 0xFD, 0x01, 0xFB,
  0x09, 0x00, 0x01, 0xF5, 0x01, 0xFF, 0x01, 0xFB, 0x02, 0x00, 0x01, 0xF4, 0x01, 0xFE, 0x01,
  0xE4, 0x4C, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xFF, 0x01, 0xF4, 0x01, 0xFF, 0x01, 0xFE,
  0x14, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x09, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x0A,
  0x00, 0x01, 0xF5, 0x01, 0xFD, 0x07, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x05, 0x00,
  0x01, 0xF4, 0x01, 0xFD, 0x01, 0xE9, 0x0F, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x0E, 0x00, 0x01,
  0xD8, 0x02, 0xFB, 0x0D, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x06, 0x00, 0x01, 0xF9,
  0x02, 0xFF, 0x05, 0x00, 0x01, 0xF4, 0x01, 0xFD, 0x01, 0xE9, 0x0E, 0x00, 0x01, 0xF5, 0x01,
  0xFD, 0x04, 0x00, 0x01, 0xC5, 0x01, 0xF9, 0x01, 0xFF, 0x01, 0xFB, 0x09, 0x00, 0x01, 0xF7,
  0x01, 0xFC, 0x03, 0x00, 0x01, 0xF9, 0x01, 0xFF, 0x01, 0xFB, 0x4C, 0x00, 0x01, 0xF5, 0x05,
  0xFF, 0x14, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x09, 0x00, 0x01, 0xD8, 0x02, 0xFB,
  0x0A, 0x00, 0x01, 0xF5, 0x09, 0xFF, 0x01, 0xFD, 0x01, 0xE9, 0x05, 0x00, 0x01, 0xF4, 0x01,
  0xFD, 0x01, 0xE9, 0x03, 0x00, 0x05, 0xFF, 0x01, 0xF0, 0x06, 0x00, 0x01, 0xD8, 0x01, 0xFB,
  0x01, 0xFE, 0x06, 0xFF, 0x08, 0x00, 0x01, 0xD8, 0x01, 0xFB, 0x06, 0xFF, 0x01, 0xFE, 0x07,
  0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x06, 0x00, 0x01, 0xF5, 0x02, 0xFF, 0x05, 0x00,
  0x01, 0xF4, 0x01, 0xFD, 0x01, 0xE9, 0x0E, 0x00, 0x01, 0xF5, 0x05, 0xFF, 0x01, 0xFD, 0x01,
  0xFF, 0x01, 0xFB, 0x09, 0x00, 0x01, 0xFD, 0x01, 0xFF, 0x01, 0xFB, 0x03, 0x00, 0x01, 0xEF,
  0x01, 0xFF, 0x01, 0xFB, 0x4C, 0x00, 0x01, 0xF5, 0x04, 0xFF, 0x01, 0xFD, 0x01, 0xF0, 0x13,
  0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x09, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x0A, 0x00,
  0x01, 0xF5, 0x09, 0xFF, 0x01, 0xFD, 0x01, 0xE9, 0x05, 0x00, 0x01, 0xF4, 0x01, 0xFD, 0x01,
  0xE9, 0x03, 0x00, 0x01, 0xF3, 0x03, 0xFF, 0x01, 0xFD, 0x01, 0xE9, 0x06, 0x00, 0x01, 0xD8,
  0x01, 0xF9, 0x06, 0xFF, 0x01, 0xFA, 0x08, 0x00, 0x01, 0xD8, 0x01, 0xF9, 0x06, 0xFF, 0x01,
  0xFA, 0x07, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x06, 0x00, 0x01, 0xF2, 0x02, 0xFF,
  0x05, 0x00, 0x01, 0xF4, 0x01, 0xFD, 0x01, 0xE9, 0x0E, 0x00, 0x01, 0xF5, 0x07, 0xFF, 0x01,
  0xFD, 0x01, 0xFF, 0x08, 0x00, 0x01, 0xF5, 0x01, 0xFF, 0x01, 0xFD, 0x04, 0x00, 0x01, 0xF5,
  0x01, 0xFD, 0x01, 0xE5, 0x4B, 0x00, 0x01, 0xF5, 0x01, 0xFF, 0x01, 0xFB, 0x01, 0x00, 0x01,
  0xF4, 0x01, 0xFF, 0x01, 0xFB, 0x13, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x09, 0x00,
  0x01, 0xD8, 0x02, 0xFB, 0x0A, 0x00, 0x01, 0xF5, 0x01, 0xFE, 0x07, 0xFF, 0x01, 0xFB, 0x01,
  0xFD, 0x01, 0xE9, 0x05, 0x00, 0x01, 0xF4, 0x01, 0xFD, 0x01, 0xE9, 0x03, 0x00, 0x03, 0xFF,
  0x01, 0xFA, 0x01, 0xFD, 0x01, 0xE9, 0x06, 0x00, 0x01, 0xD8, 0x01, 0xFB, 0x01, 0xFE, 0x06,
  0xFF, 0x08, 0x00, 0x01, 0xD8, 0x01, 0xFB, 0x01, 0xFE, 0x06, 0xFF, 0x07, 0x00, 0x01, 0xF5,
  0x01, 0xFD, 0x01, 0xE9, 0x06, 0x00, 0x01, 0xF9, 0x02, 0xFF, 0x05, 0x00, 0x01, 0xF4, 0x01,
  0xFD, 0x01, 0xE9, 0x0E, 0x00, 0x01, 0xF5, 0x01, 0xFE, 0x09, 0xFF, 0x07, 0x00, 0x01, 0xF6,
  0x01, 0xFE, 0x01, 0xE5, 0x04, 0x00, 0x01, 0xF5, 0x02, 0xFF, 0x4B, 0x00, 0x01, 0xF5, 0x01,
  0xFE, 0x01, 0xE4, 0x01, 0x00, 0x01, 0xC5, 0x01, 0xF9, 0x01, 0xFF, 0x01, 0xFD, 0x12, 0x00,
  0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x09, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x0A, 0x00, 0x01,
  0xF5, 0x01, 0xFD, 0x01, 0xF0, 0x06, 0x00, 0x01, 0xF2, 0x01, 0xFD, 0x01, 0xE9, 0x05, 0x00,
  0x01, 0xF6, 0x01, 0xFD, 0x01, 0xE9, 0x06, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x06,
  0x00, 0x01, 0xD8, 0x02, 0xFB, 0x0E, 0x00, 0x01, 0xD8, 0x01, 0xFB, 0x01, 0xFC, 0x0D, 0x00,
  0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x06, 0x00, 0x01, 0xF5, 0x02, 0xFF, 0x05, 0x00, 0x01,
  0xF6, 0x01, 0xFD, 0x01, 0xE9, 0x0E, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xF0, 0x05, 0x00,
  0x01, 0xFE, 0x01, 0xFF, 0x01, 0xFB, 0x06, 0x00, 0x01, 0xD8, 0x01, 0xF9, 0x06, 0xFF, 0x01,
  0xF9, 0x01, 0xFF, 0x01, 0xFB, 0x4B, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x02, 0x00,
  0x01, 0xF9, 0x01, 0xFF, 0x01, 0xFE, 0x01, 0xE4, 0x11, 0x00, 0x01, 0xF8, 0x01, 0xFD, 0x01,
  0xE9, 0x09, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x0A, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9,
  0x06, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x05, 0x00, 0x01, 0xF6, 0x01, 0xFE, 0x01,
  0xE4, 0x06, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x06, 0x00, 0x01, 0xD8, 0x02, 0xFB,
  0x0E, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x0D, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x06,
  0x00, 0x01, 0xF4, 0x01, 0xFE, 0x01, 0xFF, 0x05, 0x00, 0x01, 0xF6, 0x01, 0xFE, 0x01, 0xE4,
  0x0E, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x05, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x06,
  0x00, 0x0A, 0xFF, 0x01, 0xFB, 0x4B, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x03, 0x00,
  0x01, 0xF8, 0x01, 0xFF, 0x01, 0xFB, 0x11, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x09,
  0x00, 0x01, 0xD8, 0x02, 0xFB, 0x0A, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x06, 0x00,
  0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x05, 0x00, 0x01, 0xF5, 0x01, 0xFF, 0x01, 0xFB, 0x06,
  0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x06, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x0E, 0x00,
  0x01, 0xD8, 0x02, 0xFB, 0x0D, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x05, 0x00, 0x01,
  0xBB, 0x01, 0xFC, 0x01, 0xFB, 0x06, 0x00, 0x01, 0xF9, 0x01, 0xFF, 0x01, 0xFB, 0x0E, 0x00,
  0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x05, 0x00, 0x01, 0xBB, 0x01, 0xFF, 0x01, 0xFB, 0x06,
  0x00, 0x01, 0xF9, 0x01, 0xFF, 0x01, 0xFE, 0x06, 0xFF, 0x01, 0xFC, 0x01, 0xFB, 0x4B, 0x00,
  0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x04, 0x00, 0x01, 0xF7, 0x01, 0xFF, 0x01, 0xFC, 0x08,
  0x00, 0x01, 0xFF, 0x06, 0x00, 0x01, 0xEA, 0x01, 0xFF, 0x01, 0xFB, 0x0A, 0x00, 0x01, 0xD8,
  0x02, 0xFB, 0x0A, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x06, 0x00, 0x01, 0xF5, 0x01,
  0xFD, 0x01, 0xE9, 0x05, 0x00, 0x01, 0xB5, 0x02, 0xFD, 0x01, 0xF0, 0x05, 0x00, 0x01, 0xF5,
  0x01, 0xFD, 0x01, 0xE9, 0x06, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x0E, 0x00, 0x01, 0xD8, 0x02,
  0xFB, 0x0D, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x05, 0x00, 0x01, 0xF6, 0x01, 0xFF,
  0x01, 0xFB, 0x06, 0x00, 0x01, 0xB5, 0x02, 0xFD, 0x01, 0xE9, 0x0D, 0x00, 0x01, 0xF5, 0x01,
  0xFD, 0x01, 0xE9, 0x05, 0x00, 0x01, 0xEA, 0x01, 0xFD, 0x01, 0xFB, 0x06, 0x00, 0x01, 0xF5,
  0x01, 0xFF, 0x01, 0xFB, 0x06, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x4A, 0x00, 0x01,
  0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x04, 0x00, 0x01, 0xFD, 0x03, 0xFF, 0x06, 0x00, 0x01, 0xFB,
  0x01, 0xFF, 0x01, 0xFD, 0x01, 0xFF, 0x03, 0x00, 0x01, 0xFF, 0x01, 0xF9, 0x01, 0xFF, 0x01,
  0xFB, 0x0A, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x0A, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9,
  0x06, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x06, 0x00, 0x01, 0xF4, 0x01, 0xFF, 0x01,
  0xFD, 0x01, 0xFF, 0x04, 0x00, 0x01, 0xF9, 0x01, 0xFD, 0x01, 0xE9, 0x06, 0x00, 0x01, 0xD8,
  0x02, 0xFB, 0x0E, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x0D, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01,
  0xE9, 0x03, 0x00, 0x01, 0xFF, 0x01, 0xF9, 0x01, 0xFF, 0x01, 0xFC, 0x01, 0xF0, 0x07, 0x00,
  0x01, 0xF4, 0x01, 0xFF, 0x01, 0xFD, 0x01, 0xFF, 0x0C, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01,
  0xE9, 0x04, 0x00, 0x01, 0xFF, 0x01, 0xF8, 0x01, 0xFF, 0x01, 0xFC, 0x06, 0x00, 0x01, 0xF7,
  0x01, 0xFF, 0x01, 0xFE, 0x06, 0x00, 0x01, 0xF5, 0x01, 0xFE, 0x01, 0xF9, 0x4A, 0x00, 0x01,
  0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x05, 0x00, 0x01, 0xF8, 0x01, 0xFF, 0x01, 0xFB, 0x06, 0x00,
  0x01, 0xFF, 0x01, 0xF8, 0x07, 0xFF, 0x01, 0xFB, 0x08, 0x00, 0x01, 0xD8, 0x01, 0xF8, 0x03,
  0xFF, 0x01, 0xFE, 0x01, 0xFF, 0x01, 0xFD, 0x01, 0xFB, 0x07, 0x00, 0x01, 0xF5, 0x01, 0xFD,
  0x01, 0xE9, 0x06, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x06, 0x00, 0x01, 0xBB, 0x01,
  0xF8, 0x07, 0xFF, 0x01, 0xFD, 0x01, 0xE9, 0x06, 0x00, 0x01, 0xD8, 0x02, 0xFB, 0x0E, 0x00,
  0x01, 0xD8, 0x01, 0xF9, 0x01, 0xFE, 0x06, 0xFF, 0x01, 0xFC, 0x01, 0xE9, 0x05, 0x00, 0x01,
  0xF5, 0x07, 0xFF, 0x02, 0xFD, 0x08, 0x00, 0x01, 0xC5, 0x01, 0xF7, 0x07, 0xFF, 0x01, 0xFD,
  0x01, 0xF0, 0x05, 0x00, 0x01, 0xF5, 0x08, 0xFF, 0x01, 0xFB, 0x07, 0x00, 0x01, 0xF6, 0x01,
  0xFD, 0x01, 0xE9, 0x06, 0x00, 0x01, 0xF5, 0x02, 0xFF, 0x4A, 0x00, 0x01, 0xF5, 0x01, 0xFD,
  0x01, 0xE9, 0x06, 0x00, 0x01, 0xF7, 0x01, 0xFF, 0x01, 0xFD, 0x07, 0x00, 0x05, 0xFF, 0x01,
  0xFE, 0x01, 0xFF, 0x09, 0x00, 0x01, 0xD8, 0x01, 0xF9, 0x06, 0xFF, 0x01, 0xFB, 0x07, 0x00,
  0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x06, 0x00, 0x01, 0xF5, 0x01, 0xFD, 0x01, 0xE9, 0x08,
  0x00, 0x01, 0xFF, 0x01, 0xFC, 0x05, 0xFF, 0x01, 0xFE, 0x01, 0xF0, 0x06, 0x00, 0x01, 0xD8,
  0x01, 0xF9, 0x01, 0xFC, 0x0E, 0x00, 0x01, 0xD8, 0x01, 0xF9, 0x07, 0xFF, 0x01, 0xFD, 0x01,
  0xE9, 0x05, 0x00, 0x01, 0xF5, 0x04, 0xFF, 0x01, 0xFE, 0x02, 0xFF, 0x0C, 0x00, 0x01, 0xFF,
  0x01, 0xFD, 0x05, 0xFF, 0x01, 0xFC, 0x01, 0xE9, 0x05, 0x00, 0x01, 0xF5, 0x05, 0xFF, 0x01,
  0xFE, 0x02, 0xFF, 0x08, 0x00, 0x01, 0xF6, 0x01, 0xFD, 0x01, 0xE9, 0x06, 0x00, 0x01, 0xF5,
  0x02, 0xFF, 0x5F, 0x00, 0x03, 0xFF, 0x31, 0x00, 0x04, 0xFF, 0x40, 0x00, 0x04, 0xFF, 0xFF,
  0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00,
  0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF,
  0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00,
  0xFF, 0x00, 0xFF, 0x00 };

const FontCharSet g_fontMonoid18CharSet = {
  /* bitmap               = */ g_fontMonoid18Bitmap,
  /* bitmapWidth          = */ 256,
  /* bitmapHeight         = */ 256,
  /* bitmapColorChannels  = */ 1,
  /* bitmapDecompressSize = */ 65536,
  /* charBaseHeight       = */ 20,
  /* charWidth            = */ 16,
  /* charHeight           = */ 30,
  /* charCount            = */ 96,
  {
  /*   x,    y */
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,  150 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,   60 },
  {   17,   60 },
  {   68,    0 },
  {  153,    0 },
  {  119,    0 },
  {   34,    0 },
  {  204,   30 },
  {  119,   30 },
  {  102,   30 },
  {    0,    0 },
  {  102,    0 },
  {  170,   30 },
  {  136,    0 },
  {  187,   30 },
  {  221,    0 },
  {   34,   60 },
  {  187,   60 },
  {  170,   60 },
  {  153,   60 },
  {  136,   60 },
  {  119,   60 },
  {  102,   60 },
  {   85,   60 },
  {   68,   60 },
  {   51,   60 },
  {  136,   30 },
  {  153,   30 },
  {   17,   30 },
  {   85,    0 },
  {    0,   30 },
  {  221,   30 },
  {  204,    0 },
  {  170,  210 },
  {  153,  210 },
  {  136,  210 },
  {  119,  210 },
  {  102,  210 },
  {   85,  210 },
  {   68,  210 },
  {   51,  210 },
  {   34,  210 },
  {   17,  210 },
  {    0,  210 },
  {  238,  180 },
  {  221,  180 },
  {  204,  180 },
  {  187,  180 },
  {  170,  180 },
  {  153,  180 },
  {  136,  180 },
  {  119,  180 },
  {  102,  180 },
  {   85,  180 },
  {   68,  180 },
  {   51,  180 },
  {   34,  180 },
  {   17,  180 },
  {    0,  180 },
  {   85,   30 },
  {  187,    0 },
  {   68,   30 },
  {  170,    0 },
  {   51,    0 },
  {  238,   30 },
  {  119,  120 },
  {  102,  120 },
  {   85,  120 },
  {   68,  120 },
  {   51,  120 },
  {   34,  120 },
  {   17,  120 },
  {    0,  120 },
  {  238,   90 },
  {  221,   90 },
  {  204,   90 },
  {  187,   90 },
  {  170,   90 },
  {  153,   90 },
  {  136,   90 },
  {  119,   90 },
  {  102,   90 },
  {   85,   90 },
  {   68,   90 },
  {   51,   90 },
  {   34,   90 },
  {   17,   90 },
  {    0,   90 },
  {  238,   60 },
  {  221,   60 },
  {  204,   60 },
  {   51,   30 },
  {  238,    0 },
  {   34,   30 },
  {   17,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 },
  {    0,    0 }}
};

} // namespace dd {}

// Cleanup the local macros:
#undef DD_NULL
#undef DD_MOVE
#undef DD_FSIN
#undef DD_FCOS
#undef DD_INV_FSQRT
#undef DD_FABS
#undef DD_PI
#undef DD_TAU
#undef DD_EPSILON
#undef DD_DEG2RAD
#undef DD_ARRAY_LEN
#undef DD_CHECK_INIT
#undef DD_FONT_CHAR_SET
#undef DD_FONT_BITMAP
#undef DD_FONT_BITMAP_SIZE
#undef DD_MALLOC
#undef DD_MFREE

// Restore the warnings we have selectively silenced in the implementation:
#ifdef __clang__
    #pragma clang diagnostic pop
#endif // __clang__

// ================ End of implementation =================
#endif // DEBUG_DRAW_IMPLEMENTATION
// ================ End of implementation =================
